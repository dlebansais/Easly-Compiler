<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easly-Compiler</name>
    </assembly>
    <members>
        <member name="T:EaslyCompiler.ICompiledBody">
            <summary>
            A body, from a <see cref="T:BaseNode.Body"/> or specific to the compiler.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledBody.IsDeferredBody">
            <summary>
            Indicates if the body is deferred in another class.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICompiledNumberType">
            <summary>
            Interface for types that can be a number type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledNumberType.NumberKind">
            <summary>
            The number kind if the type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICompiledNumberType.GetDefaultNumberKind">
            <summary>
            Gets the default number kind for this type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICompiledNumberType.UpdateNumberKind(EaslyCompiler.NumberKinds,System.Boolean@)">
            <summary>
            Tentatively updates the number kind if <paramref name="kind"/> is more accurate.
            </summary>
            <param name="kind">The new kind.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="M:EaslyCompiler.ICompiledNumberType.UpdateNumberKind(EaslyCompiler.ICompiledNumberType,System.Boolean@)">
            <summary>
            Tentatively updates the number kind from another type if it is more accurate.
            </summary>
            <param name="type">The other type.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="M:EaslyCompiler.ICompiledNumberType.UpdateNumberKind(System.Collections.Generic.IList{EaslyCompiler.ICompiledNumberType},System.Boolean@)">
            <summary>
            Tentatively updates the number kind from a list of other types, if they are all more accurate.
            </summary>
            <param name="typeList">The list of types.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="T:EaslyCompiler.IComparableExpression">
            <summary>
            Expression that can be compared with others.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IComparableExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="T:EaslyCompiler.ICompiledTypeWithFeature">
            <summary>
            Interface for types that have accessible features (class type and generic type with constraints).
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICompiledTypeWithFeature.GetTypeTable">
            <summary>
            Gets the type table for this type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidOperatorOnNumber">
            <summary>
            Invalid operator.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInvalidOperatorOnNumber.Name">
            <summary>
            The operator name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidOperatorOnNumber">
            <summary>
            Duplicate name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidOperatorOnNumber.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidOperatorOnNumber"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="name">The operator name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidOperatorOnNumber.Name">
            <summary>
            The operator name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidOperatorOnNumber.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.NumberKinds">
            <summary>
            The specific kind of a number type.
            </summary>
        </member>
        <member name="F:EaslyCompiler.NumberKinds.NotChecked">
            <summary>
            This number kind hasn't been checked yet.
            </summary>
        </member>
        <member name="F:EaslyCompiler.NumberKinds.NotApplicable">
            <summary>
            Not applicable (not a number).
            </summary>
        </member>
        <member name="F:EaslyCompiler.NumberKinds.Unknown">
            <summary>
            Not known yet.
            </summary>
        </member>
        <member name="F:EaslyCompiler.NumberKinds.Integer">
            <summary>
            An integer number.
            </summary>
        </member>
        <member name="F:EaslyCompiler.NumberKinds.Real">
            <summary>
            A real number.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidConversionFeature">
            <summary>
            Bad conversion feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInvalidConversionFeature.Identifier">
            <summary>
            The invalid feature.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidConversionFeature">
            <summary>
            Bad conversion feature.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidConversionFeature.#ctor(CompilerNode.IIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidConversionFeature"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidConversionFeature.Identifier">
            <summary>
            The invalid feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidConversionFeature.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorCloningNotAllowed">
            <summary>
            Bad class.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorCloningNotAllowed.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorCloningNotAllowed">
            <summary>
            Bad class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorCloningNotAllowed.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorCloningNotAllowed"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="className">The class name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorCloningNotAllowed.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorCloningNotAllowed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorMissingOverSourceAndIndexer">
            <summary>
            Invalid source for an over loop.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorMissingOverSourceAndIndexer">
            <summary>
            Invalid source for an over loop.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorMissingOverSourceAndIndexer.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorMissingOverSourceAndIndexer"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorMissingOverSourceAndIndexer.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorCreatedFeatureNotAttributeOrProperty">
            <summary>
            Bad feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorCreatedFeatureNotAttributeOrProperty.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorCreatedFeatureNotAttributeOrProperty">
            <summary>
            Bad feature.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorCreatedFeatureNotAttributeOrProperty.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorCreatedFeatureNotAttributeOrProperty"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorCreatedFeatureNotAttributeOrProperty.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorCreatedFeatureNotAttributeOrProperty.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorCreationFeatureRequired">
            <summary>
            Bad feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorCreationFeatureRequired.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorCreationFeatureRequired">
            <summary>
            Bad feature.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorCreationFeatureRequired.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorCreationFeatureRequired"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorCreationFeatureRequired.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorCreationFeatureRequired.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidAssignment">
            <summary>
            Invalid assignment.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidAssignment">
            <summary>
            Invalid assignment.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidAssignment.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidAssignment"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidAssignment.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidRange">
            <summary>
            Invalid range.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidRange">
            <summary>
            Invalid range.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidRange.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidRange"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidRange.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorExceptionTypeRequired">
            <summary>
            Invalid type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorExceptionTypeRequired">
            <summary>
            Invalid type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorExceptionTypeRequired.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorExceptionTypeRequired"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorExceptionTypeRequired.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorReferenceTypeRequired">
            <summary>
            Invalid type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorReferenceTypeRequired">
            <summary>
            Invalid type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorReferenceTypeRequired.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorReferenceTypeRequired"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorReferenceTypeRequired.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidAttachment">
            <summary>
            Invalid attachment.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidAttachment">
            <summary>
            Invalid attachment.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidAttachment.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidAttachment"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidAttachment.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidRename">
            <summary>
            Invalid rename in C#.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidRename">
            <summary>
            Invalid rename in C#.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidRename.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidRename"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidRename.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorMultipleExternBody">
            <summary>
            Class can't be inherited.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorMultipleExternBody">
            <summary>
            Class can't be inherited.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorMultipleExternBody.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorMultipleExternBody"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorMultipleExternBody.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IFeatureWithEntity">
            <summary>
            Features for which one can obtain an entity.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureWithEntity.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureWithEntity.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IRuleTemplateList">
            <summary>
            List of rule templates belonging to the same set.
            </summary>
        </member>
        <member name="T:EaslyCompiler.RuleTemplateList">
            <summary>
            List of rule templates belonging to the same set.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IAllConversionsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllConversionsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllConversionsRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllConversionsRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexQueryExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexQueryExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexQueryExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexQueryExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexQueryExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IIndexQueryExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexQueryExpressionConstantRuleTemplate.Apply(CompilerNode.IIndexQueryExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordEntityExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordEntityExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordEntityExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordEntityExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordEntityExpressionRuleTemplate.CheckConsistency(CompilerNode.IKeywordEntityExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordEntityExpressionRuleTemplate.Apply(CompilerNode.IKeywordEntityExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorIndexExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorIndexExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IPrecursorIndexExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexExpressionConstantRuleTemplate.Apply(CompilerNode.IPrecursorIndexExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllInheritanceDiscreteComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllInheritanceDiscreteComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllInheritanceDiscreteComputationRuleTemplate.CheckConsistency(CompilerNode.IInheritance,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllInheritanceDiscreteComputationRuleTemplate.Apply(CompilerNode.IInheritance,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllClassDiscreteComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllClassDiscreteComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllClassDiscreteComputationRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllClassDiscreteComputationRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordEntityExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordEntityExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordEntityExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordEntityExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordEntityExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IKeywordEntityExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordEntityExpressionComputationRuleTemplate.Apply(CompilerNode.IKeywordEntityExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorBodyComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorBodyComputationRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorBody"/>.
            </summary>
            <typeparam name="T">The effective body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.PrecursorBodyComputationRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorBodyComputationRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IExternBodyComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IExternBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ExternBodyComputationRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IExternBody"/>.
            </summary>
            <typeparam name="T">The effective body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.ExternBodyComputationRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ExternBodyComputationRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IDeferredBodyComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDeferredBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.DeferredBodyComputationRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDeferredBody"/>.
            </summary>
            <typeparam name="T">The effective body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.DeferredBodyComputationRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.DeferredBodyComputationRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IWithComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IWith"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.WithComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IWith"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.WithComputationRuleTemplate.CheckConsistency(CompilerNode.IWith,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.WithComputationRuleTemplate.Apply(CompilerNode.IWith,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IThrowInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IThrowInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ThrowInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IThrowInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ThrowInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IThrowInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ThrowInstructionComputationRuleTemplate.Apply(CompilerNode.IThrowInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IScopeComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IScope"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ScopeComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IScope"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ScopeComputationRuleTemplate.CheckConsistency(CompilerNode.IScope,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ScopeComputationRuleTemplate.Apply(CompilerNode.IScope,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IReleaseInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IReleaseInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ReleaseInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IReleaseInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ReleaseInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IReleaseInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ReleaseInstructionComputationRuleTemplate.Apply(CompilerNode.IReleaseInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IRangeComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRange"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.RangeComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRange"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.RangeComputationRuleTemplate.CheckConsistency(CompilerNode.IRange,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.RangeComputationRuleTemplate.Apply(CompilerNode.IRange,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IRaiseEventInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRaiseEventInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.RaiseEventInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRaiseEventInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.RaiseEventInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IRaiseEventInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.RaiseEventInstructionComputationRuleTemplate.Apply(CompilerNode.IRaiseEventInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IPrecursorInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorInstructionComputationRuleTemplate.Apply(CompilerNode.IPrecursorInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorIndexAssignmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorIndexAssignmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexAssignmentInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IPrecursorIndexAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexAssignmentInstructionComputationRuleTemplate.Apply(CompilerNode.IPrecursorIndexAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IOverLoopInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOverLoopInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.OverLoopInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOverLoopInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.OverLoopInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IOverLoopInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.OverLoopInstructionComputationRuleTemplate.Apply(CompilerNode.IOverLoopInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordAssignmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordAssignmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordAssignmentInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IKeywordAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordAssignmentInstructionComputationRuleTemplate.Apply(CompilerNode.IKeywordAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInspectInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInspectInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InspectInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInspectInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InspectInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IInspectInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InspectInstructionComputationRuleTemplate.Apply(CompilerNode.IInspectInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexAssignmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexAssignmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexAssignmentInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IIndexAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexAssignmentInstructionComputationRuleTemplate.Apply(CompilerNode.IIndexAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIfThenElseInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIfThenElseInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IfThenElseInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIfThenElseInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IfThenElseInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IIfThenElseInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IfThenElseInstructionComputationRuleTemplate.Apply(CompilerNode.IIfThenElseInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssertionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertion"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssertionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertion"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssertionComputationRuleTemplate.CheckConsistency(CompilerNode.IAssertion,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssertionComputationRuleTemplate.Apply(CompilerNode.IAssertion,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IForLoopInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IForLoopInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ForLoopInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IForLoopInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ForLoopInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IForLoopInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ForLoopInstructionComputationRuleTemplate.Apply(CompilerNode.IForLoopInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEffectiveBodyComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEffectiveBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.EffectiveBodyComputationRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEffectiveBody"/>.
            </summary>
            <typeparam name="T">The effective body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.EffectiveBodyComputationRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EffectiveBodyComputationRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IDebugInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDebugInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.DebugInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDebugInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.DebugInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IDebugInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.DebugInstructionComputationRuleTemplate.Apply(CompilerNode.IDebugInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICreateInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICreateInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CreateInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICreateInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CreateInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.ICreateInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CreateInstructionComputationRuleTemplate.Apply(CompilerNode.ICreateInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IContinuationComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IContinuation"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ContinuationComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IContinuation"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ContinuationComputationRuleTemplate.CheckConsistency(CompilerNode.IContinuation,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ContinuationComputationRuleTemplate.Apply(CompilerNode.IContinuation,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConditionalComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConditional"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ConditionalComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConditional"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConditionalComputationRuleTemplate.CheckConsistency(CompilerNode.IConditional,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ConditionalComputationRuleTemplate.Apply(CompilerNode.IConditional,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICommandInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CommandInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CommandInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.ICommandInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CommandInstructionComputationRuleTemplate.Apply(CompilerNode.ICommandInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICheckInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICheckInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CheckInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICheckInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CheckInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.ICheckInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CheckInstructionComputationRuleTemplate.Apply(CompilerNode.ICheckInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAttachmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AttachmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AttachmentInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IAttachmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AttachmentInstructionComputationRuleTemplate.Apply(CompilerNode.IAttachmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAttachmentComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachment"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AttachmentComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachment"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AttachmentComputationRuleTemplate.CheckConsistency(CompilerNode.IAttachment,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AttachmentComputationRuleTemplate.Apply(CompilerNode.IAttachment,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssignmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssignmentInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssignmentInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssignmentInstructionComputationRuleTemplate.Apply(CompilerNode.IAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAsLongAsInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAsLongAsInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AsLongAsInstructionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAsLongAsInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AsLongAsInstructionComputationRuleTemplate.CheckConsistency(CompilerNode.IAsLongAsInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AsLongAsInstructionComputationRuleTemplate.Apply(CompilerNode.IAsLongAsInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllBodiesComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllBodiesComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllBodiesComputationRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllBodiesComputationRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAgentExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAgentExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AgentExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAgentExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AgentExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IAgentExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AgentExpressionComputationRuleTemplate.Apply(CompilerNode.IAgentExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssertionTagExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssertionTagExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IAssertionTagExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionComputationRuleTemplate.Apply(CompilerNode.IAssertionTagExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IBinaryConditionalExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryConditionalExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.BinaryConditionalExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryConditionalExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BinaryConditionalExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IBinaryConditionalExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.BinaryConditionalExpressionComputationRuleTemplate.Apply(CompilerNode.IBinaryConditionalExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IBinaryOperatorExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.BinaryOperatorExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BinaryOperatorExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IBinaryOperatorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.BinaryOperatorExpressionComputationRuleTemplate.Apply(CompilerNode.IBinaryOperatorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IClassConstantExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClassConstantExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ClassConstantExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClassConstantExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ClassConstantExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IClassConstantExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ClassConstantExpressionComputationRuleTemplate.Apply(CompilerNode.IClassConstantExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICloneOfExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICloneOfExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CloneOfExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICloneOfExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CloneOfExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.ICloneOfExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CloneOfExpressionComputationRuleTemplate.Apply(CompilerNode.ICloneOfExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEntityExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEntityExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.EntityExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEntityExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.EntityExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IEntityExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EntityExpressionComputationRuleTemplate.Apply(CompilerNode.IEntityExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEqualityExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEqualityExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.EqualityExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEqualityExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.EqualityExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IEqualityExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EqualityExpressionComputationRuleTemplate.Apply(CompilerNode.IEqualityExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexQueryExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexQueryExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexQueryExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexQueryExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexQueryExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IIndexQueryExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexQueryExpressionComputationRuleTemplate.Apply(CompilerNode.IIndexQueryExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInitializedObjectExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInitializedObjectExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InitializedObjectExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInitializedObjectExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InitializedObjectExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IInitializedObjectExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InitializedObjectExpressionComputationRuleTemplate.Apply(CompilerNode.IInitializedObjectExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IKeywordExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordExpressionComputationRuleTemplate.Apply(CompilerNode.IKeywordExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestCharacterExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestCharacterExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestCharacterExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestCharacterExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestCharacterExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IManifestCharacterExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestCharacterExpressionComputationRuleTemplate.Apply(CompilerNode.IManifestCharacterExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestNumberExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestNumberExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestNumberExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestNumberExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestNumberExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IManifestNumberExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestNumberExpressionComputationRuleTemplate.Apply(CompilerNode.IManifestNumberExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestStringExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestStringExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestStringExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestStringExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestStringExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IManifestStringExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestStringExpressionComputationRuleTemplate.Apply(CompilerNode.IManifestStringExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.INewExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.INewExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.NewExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.INewExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NewExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.INewExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.NewExpressionComputationRuleTemplate.Apply(CompilerNode.INewExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IOldExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOldExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.OldExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOldExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.OldExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IOldExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.OldExpressionComputationRuleTemplate.Apply(CompilerNode.IOldExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssignmentArgumentComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentArgument"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssignmentArgumentComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentArgument"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssignmentArgumentComputationRuleTemplate.CheckConsistency(CompilerNode.IAssignmentArgument,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssignmentArgumentComputationRuleTemplate.Apply(CompilerNode.IAssignmentArgument,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPositionalArgumentComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPositionalArgument"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PositionalArgumentComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPositionalArgument"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PositionalArgumentComputationRuleTemplate.CheckConsistency(CompilerNode.IPositionalArgument,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PositionalArgumentComputationRuleTemplate.Apply(CompilerNode.IPositionalArgument,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IPrecursorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorExpressionComputationRuleTemplate.Apply(CompilerNode.IPrecursorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorIndexExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorIndexExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IPrecursorIndexExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexExpressionComputationRuleTemplate.Apply(CompilerNode.IPrecursorIndexExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IQueryExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryExpressionComputationRuleTemplate.Apply(CompilerNode.IQueryExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IResultOfExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IResultOfExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ResultOfExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IResultOfExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultOfExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IResultOfExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ResultOfExpressionComputationRuleTemplate.Apply(CompilerNode.IResultOfExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IUnaryNotExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryNotExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.UnaryNotExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryNotExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.UnaryNotExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IUnaryNotExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.UnaryNotExpressionComputationRuleTemplate.Apply(CompilerNode.IUnaryNotExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IUnaryOperatorExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.UnaryOperatorExpressionComputationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.UnaryOperatorExpressionComputationRuleTemplate.CheckConsistency(CompilerNode.IUnaryOperatorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.UnaryOperatorExpressionComputationRuleTemplate.Apply(CompilerNode.IUnaryOperatorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IFeatureWithEvents">
            <summary>
            Features that support the event type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureWithEvents.ResolvedEventType">
            <summary>
            The resolved event type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IFeatureWithEvents.SetEventType(BaseNode.EventType,System.Boolean@)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.IFeatureWithEvents.ResolvedEventType"/> property.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="isConflicting">True upon return if <paramref name="eventType"/> is conflicting with a previous call.</param>
        </member>
        <member name="T:EaslyCompiler.ResolvedExpression">
            <summary>
            All information that can be obtained from an expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.ResolvedResult">
            <summary>
            The expression result types.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.ResolvedException">
            <summary>
            Exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.ConstantSourceList">
            <summary>
            Sources of the constant expression, if any.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.ExpressionConstant">
            <summary>
            The expression constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.ResolvedFinalFeature">
            <summary>
            The feature if the end of the path is a feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.ResolvedFinalDiscrete">
            <summary>
            The discrete if the end of the path is a discrete.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.SelectedResultList">
            <summary>
            The selected results.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.SelectedOverload">
            <summary>
            The selected overload, if available.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.SelectedOverloadType">
            <summary>
            The selected overload type, if available.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.SelectedPrecursor">
            <summary>
            The precursor feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResolvedExpression.InheritBySideAttribute">
            <summary>
            Inherit the side-by-side attribute.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IResultException">
            <summary>
            Exceptions that a node can throw.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IResultException.At(System.Int32)">
            <summary>
            Gets the identifier at the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:EaslyCompiler.IResultException.Add(System.String)">
            <summary>
            Adds an exception identifier.
            </summary>
            <param name="text">The identifier text.</param>
        </member>
        <member name="T:EaslyCompiler.ResultException">
            <summary>
            Exceptions that a node can throw.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ResultException"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultException.#ctor(System.Collections.Generic.IList{CompilerNode.IIdentifier})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ResultException"/> class.
            </summary>
            <param name="exceptionList">The list of exceptions.</param>
        </member>
        <member name="M:EaslyCompiler.ResultException.At(System.Int32)">
            <summary>
            Gets the identifier at the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:EaslyCompiler.ResultException.Add(System.String)">
            <summary>
            Adds an exception identifier.
            </summary>
            <param name="text">The identifier text.</param>
        </member>
        <member name="M:EaslyCompiler.ResultException.Propagate(Easly.OnceReference{EaslyCompiler.IResultException},EaslyCompiler.IResultException@)">
            <summary>
            Propagates a list of exceptions if they are available.
            </summary>
            <param name="other">The optionally assigned list of exception.</param>
            <param name="result">The list of exceptions if available; Otherwise, null.</param>
        </member>
        <member name="M:EaslyCompiler.ResultException.Merge(EaslyCompiler.IResultException,Easly.OnceReference{EaslyCompiler.IResultException})">
            <summary>
            Merges two lists of exceptions if they are available.
            </summary>
            <param name="mergedResult">The list of exceptions to update.</param>
            <param name="other">The optional list of exceptions to merge.</param>
        </member>
        <member name="M:EaslyCompiler.ResultException.Merge(EaslyCompiler.IResultException,System.Collections.Generic.IEnumerable{CompilerNode.IIdentifier})">
            <summary>
            Merges two lists of exceptions if they are available.
            </summary>
            <param name="mergedResult">The list of exceptions to update.</param>
            <param name="otherList">The list of exceptions to merge.</param>
        </member>
        <member name="T:EaslyCompiler.IFeatureCall">
            <summary>
            Arguments and matching parameters of a feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureCall.ParameterList">
            <summary>
            List of parameters from the selected overload.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureCall.ResultList">
            <summary>
            List of results from the selected overload.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureCall.ArgumentList">
            <summary>
            Arguments of the call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureCall.ResolvedArgumentList">
            <summary>
            Resolved arguments of the call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureCall.TypeArgumentStyle">
            <summary>
            The argument passing style.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureCall.IsEmpty">
            <summary>
            True if the call has no parameters or arguments.
            </summary>
        </member>
        <member name="T:EaslyCompiler.FeatureCall">
            <summary>
            Arguments and matching parameters of a feature call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FeatureCall.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.FeatureCall"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FeatureCall.#ctor(System.Collections.Generic.IList{EaslyCompiler.IParameter},System.Collections.Generic.IList{EaslyCompiler.IParameter},System.Collections.Generic.IList{CompilerNode.IArgument},System.Collections.Generic.IList{EaslyCompiler.IExpressionType},EaslyCompiler.TypeArgumentStyles)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.FeatureCall"/> class.
            </summary>
            <param name="parameterList">List of parameters from the selected overload.</param>
            <param name="resultList">List of results from the selected overload.</param>
            <param name="argumentList">Arguments of the call.</param>
            <param name="resolvedArgumentList">Resolved arguments of the call.</param>
            <param name="typeArgumentStyle">The argument passing style.</param>
        </member>
        <member name="P:EaslyCompiler.FeatureCall.ParameterList">
            <summary>
            List of parameters from the selected overload.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureCall.ResultList">
            <summary>
            List of results from the selected overload.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureCall.ArgumentList">
            <summary>
            Resolved arguments of the call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureCall.ResolvedArgumentList">
            <summary>
            Resolved arguments of the call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureCall.TypeArgumentStyle">
            <summary>
            The argument passing style.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureCall.IsEmpty">
            <summary>
            True if the call has no parameters or arguments.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IResultType">
            <summary>
            The result type(s) of a node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IResultType.ResultNameIndex">
            <summary>
            Index of the result type to select with a 'result of' expression. -1 if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IResultType.Preferred">
            <summary>
            The only result type, or the result type to select with a 'result of' expression if several. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IResultType.At(System.Int32)">
            <summary>
            Gets the type at the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:EaslyCompiler.IResultType.NumberKind">
            <summary>
            The number kind if the expression type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IResultType.TryGetResult(EaslyCompiler.ICompiledType@)">
            <summary>
            Get the type of the result if only one, or the one named 'result' if more than one.
            </summary>
            <param name="type">The result type upon return, if successful.</param>
        </member>
        <member name="M:EaslyCompiler.IResultType.ToList">
            <summary>
            Gets the list of types.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IResultType.UpdateNumberKind(EaslyCompiler.NumberKinds,System.Boolean@)">
            <summary>
            Tentatively updates the number kind of the result.
            </summary>
            <param name="numberKind">The new number kind.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="T:EaslyCompiler.ResultType">
            <summary>
            The result type(s) of a node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResultType.Empty">
            <summary>
            A special value that contains no result.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ResultType"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultType.#ctor(EaslyCompiler.IExpressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ResultType"/> class.
            </summary>
            <param name="item">The single result.</param>
        </member>
        <member name="M:EaslyCompiler.ResultType.#ctor(System.Collections.Generic.IList{EaslyCompiler.IExpressionType})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ResultType"/> class.
            </summary>
            <param name="resultList">The list of result type(s).</param>
        </member>
        <member name="M:EaslyCompiler.ResultType.#ctor(EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ResultType"/> class.
            </summary>
            <param name="valueTypeName">The expression type name.</param>
            <param name="valueType">The expression type.</param>
            <param name="name">Name of the expression value, empty if none.</param>
        </member>
        <member name="P:EaslyCompiler.ResultType.ResultNameIndex">
            <summary>
            Index of the result type to select with a 'result of' expression. -1 if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResultType.Preferred">
            <summary>
            The only result type, or the result type to select with a 'result of' expression if several.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ResultType.NumberKind">
            <summary>
            The number kind if the expression type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultType.At(System.Int32)">
            <summary>
            Gets the type at the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:EaslyCompiler.ResultType.TryGetResult(EaslyCompiler.ICompiledType@)">
            <summary>
            Get the type of the result if only one, or the one named 'result' if more than one.
            </summary>
            <param name="type">The result type upon return, if successful.</param>
        </member>
        <member name="M:EaslyCompiler.ResultType.ToList">
            <summary>
            Gets the list of types.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultType.UpdateNumberKind(EaslyCompiler.NumberKinds,System.Boolean@)">
            <summary>
            Tentatively updates the number kind of the result.
            </summary>
            <param name="numberKind">The new number kind.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="T:EaslyCompiler.ICompiler">
            <summary>
            Process Easly source code to output code for the target language (C# supported only).
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiler.ActivateVerification">
            <summary>
            True to verify the program after compilation.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiler.FileName">
            <summary>
            The last compiled file name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiler.LoadedRoot">
            <summary>
            The source code, merged with languages classes and compiled.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiler.ErrorList">
            <summary>
            Errors in last compilation.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiler.InferenceRetries">
            <summary>
            Number of retries by the inference engine (debug only).
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICompiler.Compile(System.String)">
            <summary>
            Compiles the file. The file must contain a serialized Easly Root object.
            </summary>
            <param name="fileName">The file to compile.</param>
        </member>
        <member name="M:EaslyCompiler.ICompiler.Compile(BaseNode.IRoot)">
            <summary>
            Compiles the source code.
            </summary>
            <param name="root">The source code to compile.</param>
        </member>
        <member name="M:EaslyCompiler.ICompiler.Compile(System.IO.Stream)">
            <summary>
            Compiles the source code.
            </summary>
            <param name="stream">The source code to compile.</param>
        </member>
        <member name="T:EaslyCompiler.Compiler">
            <summary>
            Process Easly source code to output code for the target language (C# supported only).
            </summary>
        </member>
        <member name="P:EaslyCompiler.Compiler.ActivateVerification">
            <summary>
            True to verify the program after compilation.
            </summary>
        </member>
        <member name="P:EaslyCompiler.Compiler.FileName">
            <summary>
            The last compiled file name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.Compiler.Root">
            <summary>
            The last compiled source code.
            </summary>
        </member>
        <member name="P:EaslyCompiler.Compiler.LoadedRoot">
            <summary>
            The source code, merged with languages classes and compiled.
            </summary>
        </member>
        <member name="P:EaslyCompiler.Compiler.ErrorList">
            <summary>
            Errors in last compilation.
            </summary>
        </member>
        <member name="P:EaslyCompiler.Compiler.InferenceRetries">
            <summary>
            Number of retries by the inference engine (debug only).
            </summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.Compile(System.String)">
            <summary>
            Compiles the file. The file must contain a serialized Easly Root object.
            </summary>
            <param name="fileName">The file to compile.</param>
        </member>
        <member name="M:EaslyCompiler.Compiler.Compile(BaseNode.IRoot)">
            <summary>
            Compiles the source code.
            </summary>
            <param name="root">The source code to compile.</param>
        </member>
        <member name="M:EaslyCompiler.Compiler.Compile(System.IO.Stream)">
            <summary>
            Compiles the source code.
            </summary>
            <param name="stream">The source code to compile.</param>
        </member>
        <member name="M:EaslyCompiler.Compiler.CreateCompilerSerializer">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.CompileRoot(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.LoadLanguageRoot">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.MergeLanguageRoot(CompilerNode.IRoot,CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.IsRootValid(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ReplacePhase1Macroes(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.GenerateCompilationDateTime">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.GenerateCompilationUID">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.GenerateCompilerVersion">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.GenerateConformanceToStandard">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.GenerateDebugging">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.InitializedStringExpression(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.InitializedExpression(System.String,System.String,BaseNode.IExpression)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ToCompilerNode``2(``0)">
            <summary></summary>
            <typeparam name="TBase">BaseNode type.</typeparam>
            <typeparam name="TCompiler">Compiler type.</typeparam>
            <param name="node">The BaseNode object to convert.</param>
        </member>
        <member name="M:EaslyCompiler.Compiler.ReplacePhase1Macro(BaseNode.INode,BaseNode.INode,System.String,BaseNodeHelper.IWalkCallbacks{EaslyCompiler.ReplacePhase1MacroContext},EaslyCompiler.ReplacePhase1MacroContext)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ReplacePhase2Macroes(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ReplacePhase2Macro(BaseNode.INode,BaseNode.INode,System.String,BaseNodeHelper.IWalkCallbacks{EaslyCompiler.ReplacePhase2MacroContext},EaslyCompiler.ReplacePhase2MacroContext)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.CreateRandomInteger">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.InitializeSources(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.InitializeSource(BaseNode.INode,BaseNode.INode,System.String,BaseNodeHelper.IWalkCallbacks{System.Object},System.Object)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.CheckClassAndLibraryNames(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.CheckClassNames(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.CheckLibraryNames(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.InitializeLibraries(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.CheckLibrariesConsistency(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.MoveResolvedLibraries(System.Collections.Generic.List{CompilerNode.ILibrary},System.Collections.Generic.List{CompilerNode.ILibrary},System.Boolean@)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.CheckClassesConsistency(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ResolveIdentifiers(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ResolveTypes(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ResolveContract(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ResolveBody(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.Resolve(CompilerNode.IRoot,EaslyCompiler.IRuleTemplateList,System.String)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.ListAllSources(BaseNode.INode,BaseNode.INode,System.String,BaseNodeHelper.IWalkCallbacks{EaslyCompiler.BuildInferenceSourceList},EaslyCompiler.BuildInferenceSourceList)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.SealScope(CompilerNode.IRoot)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.Compiler.SealAllScopes(BaseNode.INode,BaseNode.INode,System.String,BaseNodeHelper.IWalkCallbacks{System.Object},System.Object)">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.ICompiledReplicate">
            <summary>
            A replicate, from a <see cref="T:BaseNode.ClassReplicate"/> or <see cref="T:BaseNode.GlobalReplicate"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledReplicate.ReplicateName">
            <summary>
            Replicate name (from BaseNode).
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledReplicate.PatternList">
            <summary>
            Processed list of patterns.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IError">
            <summary>
            Base interface for errors.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IError.Location">
            <summary>
            The error location.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IError.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.Error">
            <summary>
            Base class for errors.
            </summary>
        </member>
        <member name="M:EaslyCompiler.Error.#ctor(EaslyCompiler.ErrorLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.Error"/> class.
            </summary>
            <param name="location">The error location.</param>
        </member>
        <member name="M:EaslyCompiler.Error.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.Error"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.Error.Location">
            <summary>
            The error location.
            </summary>
        </member>
        <member name="P:EaslyCompiler.Error.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInternal">
            <summary>
            Internal Error.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInternal.Exception">
            <summary>
            The exception leading to the error.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInternal">
            <summary>
            Internal Error.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInternal.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInternal"/> class.
            </summary>
            <param name="exception">The exception leading to the error.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInternal.Exception">
            <summary>
            The exception leading to the error.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInternal.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorList">
            <summary>
            A list of errors.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorList.IsEmpty">
            <summary>
            True if the error list is empty.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IErrorList.AddError(EaslyCompiler.IError)">
            <summary>
            Adds an error to the list.
            </summary>
            <param name="error">The error to add.</param>
        </member>
        <member name="M:EaslyCompiler.IErrorList.AddErrors(EaslyCompiler.IErrorList)">
            <summary>
            Adds errors to the list.
            </summary>
            <param name="errorList">Errors to add.</param>
        </member>
        <member name="M:EaslyCompiler.IErrorList.ClearErrors">
            <summary>
            Clears the list of errors.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IErrorList.At(System.Int32)">
            <summary>
            Returns the n-th error in the list.
            </summary>
            <param name="index">Index of the error to return.</param>
        </member>
        <member name="T:EaslyCompiler.ErrorList">
            <summary>
            A list of errors.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorList.Ignored">
            <summary>
            A list of errors that can be ignored.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorList.NoLocation">
            <summary>
            A fake location for errors to ignore.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorList.IsEmpty">
            <summary>
            True if the error list is empty.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorList.AddError(EaslyCompiler.IError)">
            <summary>
            Adds an error to the list.
            </summary>
            <param name="error">The error to add.</param>
        </member>
        <member name="M:EaslyCompiler.ErrorList.AddErrors(EaslyCompiler.IErrorList)">
            <summary>
            Adds errors to the list.
            </summary>
            <param name="errorList">Errors to add.</param>
        </member>
        <member name="M:EaslyCompiler.ErrorList.ClearErrors">
            <summary>
            Clears the list of errors.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorList.At(System.Int32)">
            <summary>
            Returns the n-th error in the list.
            </summary>
            <param name="index">Index of the error to return.</param>
        </member>
        <member name="M:EaslyCompiler.ErrorList.ToString">
            <summary>
            Displays errors on the debug terminal.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorClassAlreadyImported">
            <summary>
            Class already imported with a different name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorClassAlreadyImported.OldName">
            <summary>
            The old name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorClassAlreadyImported.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorClassAlreadyImported">
            <summary>
            Class already imported with a different name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorClassAlreadyImported.#ctor(EaslyCompiler.ISource,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorClassAlreadyImported"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name</param>
        </member>
        <member name="P:EaslyCompiler.ErrorClassAlreadyImported.OldName">
            <summary>
            The old name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorClassAlreadyImported.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorClassAlreadyImported.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNameChanged">
            <summary>
            Class importing itself.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorNameChanged.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorNameChanged.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNameChanged">
            <summary>
            Class importing itself.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNameChanged.#ctor(EaslyCompiler.ISource,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNameChanged"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="className">The class name.</param>
            <param name="newName">The new name</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNameChanged.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorNameChanged.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorNameChanged.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorDoubleRename">
            <summary>
            Double rename.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorDoubleRename.SourceName">
            <summary>
            The source name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorDoubleRename.DestinationName">
            <summary>
            The destination name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorDoubleRename">
            <summary>
            Double rename.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorDoubleRename.#ctor(EaslyCompiler.ISource,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorDoubleRename"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="sourceName">The source name.</param>
            <param name="destinationName">The destination name</param>
        </member>
        <member name="P:EaslyCompiler.ErrorDoubleRename.SourceName">
            <summary>
            The source name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorDoubleRename.DestinationName">
            <summary>
            The destination name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorDoubleRename.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorDuplicateImport">
            <summary>
            Duplicate import.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorDuplicateImport.LibraryName">
            <summary>
            The library name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorDuplicateImport.SourceName">
            <summary>
            The source name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorDuplicateImport">
            <summary>
            Duplicate import.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorDuplicateImport.#ctor(EaslyCompiler.ISource,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorDuplicateImport"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="libraryName">The library name</param>
            <param name="sourceName">The source name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorDuplicateImport.LibraryName">
            <summary>
            The library name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorDuplicateImport.SourceName">
            <summary>
            The source name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorDuplicateImport.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorCyclicDependency">
            <summary>
            Cyclic dependency.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorCyclicDependency.NameList">
            <summary>
            List of nodes with cyclic dependencies by names.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorCyclicDependency.PassName">
            <summary>
            The pass name when the error occured.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorCyclicDependency">
            <summary>
            Cyclic dependency.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorCyclicDependency.#ctor(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorCyclicDependency"/> class.
            </summary>
            <param name="nameList">List of nodes with cyclic dependencies by names.</param>
            <param name="passName">The pass name when the error occured.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorCyclicDependency.NameList">
            <summary>
            List of nodes with cyclic dependencies by names.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorCyclicDependency.PassName">
            <summary>
            The pass name when the error occured.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorCyclicDependency.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorImportTypeConflict">
            <summary>
            A class name is imported with conflicting specifications.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorImportTypeConflict.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorImportTypeConflict">
            <summary>
            A class name is imported with conflicting specifications.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorImportTypeConflict.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorImportTypeConflict"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="className">The class name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorImportTypeConflict.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorImportTypeConflict.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNameAlreadyUsed">
            <summary>
            Name already used.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorNameAlreadyUsed.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNameAlreadyUsed">
            <summary>
            Name already used.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNameAlreadyUsed.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNameAlreadyUsed"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNameAlreadyUsed.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorNameAlreadyUsed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNameUnchanged">
            <summary>
            A rename doesn't change a name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorNameUnchanged.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNameUnchanged">
            <summary>
            A rename doesn't change a name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNameUnchanged.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNameUnchanged"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNameUnchanged.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorNameUnchanged.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorSourceRequired">
            <summary>
            Class source missing.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorSourceRequired">
            <summary>
            Class source missing.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorSourceRequired.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorSourceRequired"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorSourceRequired.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidManifestNumber">
            <summary>
            Invalid number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInvalidManifestNumber.Number">
            <summary>
            The invalid number.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidManifestNumber">
            <summary>
            Invalid number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidManifestNumber.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidManifestNumber"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="number">The invalid number.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidManifestNumber.Number">
            <summary>
            The invalid number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidManifestNumber.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidManifestChraracter">
            <summary>
            Invalid character.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInvalidManifestChraracter.Character">
            <summary>
            The invalid character.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidManifestChraracter">
            <summary>
            Invalid character.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidManifestChraracter.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidManifestChraracter"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="character">The invalid character.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidManifestChraracter.Character">
            <summary>
            The invalid character.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidManifestChraracter.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorExceptionTypeMissing">
            <summary>
            The type 'Exception' is not imported.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorExceptionTypeMissing">
            <summary>
            The type 'Exception' is not imported.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorExceptionTypeMissing.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorExceptionTypeMissing"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorExceptionTypeMissing.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorIndexerInheritanceConflict">
            <summary>
            Inheritance with conflicting settings.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorIndexerInheritanceConflict">
            <summary>
            Inheritance with conflicting settings.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorIndexerInheritanceConflict.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorIndexerInheritanceConflict"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorIndexerInheritanceConflict.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidExpressionContext">
            <summary>
            Expression used outside a valid context.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidExpressionContext">
            <summary>
            Expression used outside a valid context.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidExpressionContext.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidExpressionContext"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidExpressionContext.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorOverloadParameterMismatchConformance">
            <summary>
            The parameter types of a type and a base type don't match.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorOverloadParameterMismatchConformance.DerivedParameterList">
            <summary>
            The list of parameters of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorOverloadParameterMismatchConformance.DerivedParameterEnd">
            <summary>
            The parameter end status of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorOverloadParameterMismatchConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorOverloadParameterMismatchConformance">
            <summary>
            The parameter types of a type and a base type don't match.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorOverloadParameterMismatchConformance.#ctor(EaslyCompiler.ISource,CompilerNode.IQueryOverloadType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorOverloadParameterMismatchConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="M:EaslyCompiler.ErrorOverloadParameterMismatchConformance.#ctor(EaslyCompiler.ISource,CompilerNode.ICommandOverloadType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorOverloadParameterMismatchConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorOverloadParameterMismatchConformance.DerivedParameterList">
            <summary>
            The list of parameters of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorOverloadParameterMismatchConformance.DerivedParameterEnd">
            <summary>
            The parameter end status of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorOverloadParameterMismatchConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorOverloadParameterMismatchConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorResultUsedOutsideGetter">
            <summary>
            Can't use Result.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorResultUsedOutsideGetter">
            <summary>
            Can't use Result.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorResultUsedOutsideGetter.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorResultUsedOutsideGetter"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorResultUsedOutsideGetter.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorResultNotReturned">
            <summary>
            Can't use Result.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorResultNotReturned">
            <summary>
            Can't use Result.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorResultNotReturned.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorResultNotReturned"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorResultNotReturned.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorUnavailableResult">
            <summary>
            Can't use Result.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorUnavailableResult">
            <summary>
            Can't use Result.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorUnavailableResult.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorUnavailableResult"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorUnavailableResult.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorUnavailableValue">
            <summary>
            Can't use Value.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorUnavailableValue">
            <summary>
            Can't use Value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorUnavailableValue.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorUnavailableValue"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorUnavailableValue.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorBooleanTypeMissing">
            <summary>
            The type 'Boolean' is not imported.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorBooleanTypeMissing">
            <summary>
            The type 'Boolean' is not imported.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorBooleanTypeMissing.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorBooleanTypeMissing"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorBooleanTypeMissing.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorIndexerInheritance">
            <summary>
            Invalid indexer inheritance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorIndexerInheritance">
            <summary>
            Invalid indexer inheritance.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorIndexerInheritance.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorIndexerInheritance"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorIndexerInheritance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidIdentifierContext">
            <summary>
            Use of a reserved name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInvalidIdentifierContext.Identifier">
            <summary>
            The invalid identifier.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidIdentifierContext">
            <summary>
            Use of a reserved name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidIdentifierContext.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidIdentifierContext"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="identifier">The invalid identifier.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidIdentifierContext.Identifier">
            <summary>
            The invalid identifier.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidIdentifierContext.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorTypeAlreadyInherited">
            <summary>
            Can only inherit from a class once.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorTypeAlreadyInherited">
            <summary>
            Can only inherit from a class once.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorTypeAlreadyInherited.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorTypeAlreadyInherited"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeAlreadyInherited.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorDuplicateIndexer">
            <summary>
            More than one indexer.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorDuplicateIndexer">
            <summary>
            More than one indexer.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorDuplicateIndexer.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorDuplicateIndexer"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorDuplicateIndexer.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorClassTypeRequired">
            <summary>
            Can only inherit from a class type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorClassTypeRequired">
            <summary>
            Can only inherit from a class type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorClassTypeRequired.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorClassTypeRequired"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorClassTypeRequired.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorIndexerMissingBody">
            <summary>
            Indexer must have a body.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorIndexerMissingBody">
            <summary>
            Indexer must have a body.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorIndexerMissingBody.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorIndexerMissingBody"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorIndexerMissingBody.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorIndexerBodyTypeMismatch">
            <summary>
            Two bodies of different type in the same indexer feature.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorIndexerBodyTypeMismatch">
            <summary>
            Two bodies of different type in the same indexer feature.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorIndexerBodyTypeMismatch.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorIndexerBodyTypeMismatch"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorIndexerBodyTypeMismatch.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorCloneableClass">
            <summary>
            A cloneable class can't inherit from a non-cloneable.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorCloneableClass">
            <summary>
            A cloneable class can't inherit from a non-cloneable.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorCloneableClass.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorCloneableClass"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorCloneableClass.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorMissingTypeArgument">
            <summary>
            Use of a generic class without an expected type arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorMissingTypeArgument.GenericName">
            <summary>
            The generic name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorMissingTypeArgument">
            <summary>
            Use of a generic class without an expected type arguments.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorMissingTypeArgument.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorMissingTypeArgument"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="genericName">The generic name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorMissingTypeArgument.GenericName">
            <summary>
            The generic name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorMissingTypeArgument.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNameValueNotAllowed">
            <summary>
            The name 'Value' is not allowed.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNameValueNotAllowed">
            <summary>
            The name 'Value' is not allowed.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNameValueNotAllowed.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNameValueNotAllowed"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNameValueNotAllowed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNameResultNotAllowed">
            <summary>
            The name 'Result' is not allowed.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNameResultNotAllowed">
            <summary>
            The name 'Result' is not allowed.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNameResultNotAllowed.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNameResultNotAllowed"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNameResultNotAllowed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorTypeArgumentCount">
            <summary>
            Use of a generic class with not enough type arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTypeArgumentCount.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTypeArgumentCount.RequiredArgumentCount">
            <summary>
            The required count of arguments.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorTypeArgumentCount">
            <summary>
            Use of a generic class with not enough type arguments.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorTypeArgumentCount.#ctor(EaslyCompiler.ISource,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorTypeArgumentCount"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="className">The class name.</param>
            <param name="requiredArgumentCount">The required count of arguments.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeArgumentCount.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeArgumentCount.RequiredArgumentCount">
            <summary>
            The required count of arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeArgumentCount.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorTooManyTypeArguments">
            <summary>
            Use of a generic class with too many type arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTooManyTypeArguments.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTooManyTypeArguments.RequiredArgumentCount">
            <summary>
            The required count of arguments.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorTooManyTypeArguments">
            <summary>
            Use of a generic class with too many type arguments.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorTooManyTypeArguments.#ctor(EaslyCompiler.ISource,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorTooManyTypeArguments"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="className">The class name.</param>
            <param name="requiredArgumentCount">The required count of arguments.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorTooManyTypeArguments.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTooManyTypeArguments.RequiredArgumentCount">
            <summary>
            The required count of arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTooManyTypeArguments.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorEqualParameters">
            <summary>
            Two overloads can be confused.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorEqualParameters">
            <summary>
            Two overloads can be confused.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorEqualParameters.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorEqualParameters"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorEqualParameters.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNonConformingType">
            <summary>
            A type doesn't conform to a base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNonConformingType">
            <summary>
            A type doesn't conform to a base type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNonConformingType.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNonConformingType"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNonConformingType.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorReferenceValueConstraintConformance">
            <summary>
            A type doesn't conform to a reference or value constraint.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorReferenceValueConstraintConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorReferenceValueConstraintConformance.Constraint">
            <summary>
            The constraint.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorReferenceValueConstraintConformance">
            <summary>
            A type doesn't conform to a reference or value constraint.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorReferenceValueConstraintConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,BaseNode.CopySemantic)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorReferenceValueConstraintConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorReferenceValueConstraintConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorReferenceValueConstraintConformance.Constraint">
            <summary>
            The constraint.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorReferenceValueConstraintConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorGenericClass">
            <summary>
            Use of a generic class without type arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorGenericClass.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorGenericClass">
            <summary>
            Use of a generic class without type arguments.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorGenericClass.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorGenericClass"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="className">The class name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorGenericClass.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorGenericClass.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorTypeArgumentMixed">
            <summary>
            Positional and assignment type arguments mixed.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorTypeArgumentMixed">
            <summary>
            Positional and assignment type arguments mixed.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorTypeArgumentMixed.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorTypeArgumentMixed"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeArgumentMixed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorRenameNotAllowed">
            <summary>
            Rename not allowed.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorRenameNotAllowed">
            <summary>
            Rename not allowed.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorRenameNotAllowed.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorRenameNotAllowed"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorRenameNotAllowed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorBodyTypeMismatch">
            <summary>
            Two bodies of different type in the same feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorBodyTypeMismatch.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorBodyTypeMismatch">
            <summary>
            Two bodies of different type in the same feature.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorBodyTypeMismatch.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorBodyTypeMismatch"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorBodyTypeMismatch.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorBodyTypeMismatch.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorTypeAlreadyUsedAsConstraint">
            <summary>
            A type is already used in another constraint.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorTypeAlreadyUsedAsConstraint">
            <summary>
            A type is already used in another constraint.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorTypeAlreadyUsedAsConstraint.#ctor(CompilerNode.IObjectType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorTypeAlreadyUsedAsConstraint"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeAlreadyUsedAsConstraint.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorVariableAlreadyDefined">
            <summary>
            Use of a name already defined.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorVariableAlreadyDefined.Name">
            <summary>
            The defined name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorVariableAlreadyDefined">
            <summary>
            Use of a name already defined.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorVariableAlreadyDefined.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorVariableAlreadyDefined"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="name">The defined name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorVariableAlreadyDefined.Name">
            <summary>
            The defined name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorVariableAlreadyDefined.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorTypedefNameConflict">
            <summary>
            Typedef already inherited.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTypedefNameConflict.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTypedefNameConflict.PreviousName">
            <summary>
            The previous name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorTypedefNameConflict">
            <summary>
            Typedef already inherited.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorTypedefNameConflict.#ctor(EaslyCompiler.ISource,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorTypedefNameConflict"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="newName">The new name</param>
            <param name="previousName">The previous name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorTypedefNameConflict.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTypedefNameConflict.PreviousName">
            <summary>
            The previous name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTypedefNameConflict.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorFieldMismatchConformance">
            <summary>
            Two fields don't have conforming types.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorFieldMismatchConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorFieldMismatchConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorFieldMismatchConformance">
            <summary>
            Two fields don't have conforming types.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorFieldMismatchConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorFieldMismatchConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorFieldMismatchConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorFieldMismatchConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorFieldMismatchConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorGetterSetterConformance">
            <summary>
            Incompatible getter or setter.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorGetterSetterConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorGetterSetterConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorGetterSetterConformance">
            <summary>
            Incompatible getter or setter.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorGetterSetterConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorGetterSetterConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorGetterSetterConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorGetterSetterConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorGetterSetterConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorExceptionConformance">
            <summary>
            Two lists of exception identifiers don't match.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorExceptionConformance.DerivedExceptionIdentifierList">
            <summary>
            The list of exception identifiers of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorExceptionConformance.BaseExceptionIdentifierList">
            <summary>
            The list of exception identifiers of the base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorExceptionConformance">
            <summary>
            Two lists of exception identifiers don't match.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorExceptionConformance.#ctor(EaslyCompiler.ISource,System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IIdentifier})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorExceptionConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedExceptionIdentifierList">The list of exception identifiers of the derived type.</param>
            <param name="baseExceptionIdentifierList">The list of exception identifiers of the base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorExceptionConformance.DerivedExceptionIdentifierList">
            <summary>
            The list of exception identifiers of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorExceptionConformance.BaseExceptionIdentifierList">
            <summary>
            The list of exception identifiers of the base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorExceptionConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorResultMismatchConformance">
            <summary>
            The result types of a type and a base type don't match.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorResultMismatchConformance.DerivedResultList">
            <summary>
            The list of results of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorResultMismatchConformance.BaseResultList">
            <summary>
            The list of results of the base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorResultMismatchConformance">
            <summary>
            The result types of a type and a base type don't match.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorResultMismatchConformance.#ctor(EaslyCompiler.ISource,CompilerNode.IQueryOverloadType,CompilerNode.IQueryOverloadType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorResultMismatchConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorResultMismatchConformance.DerivedResultList">
            <summary>
            The list of results of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorResultMismatchConformance.BaseResultList">
            <summary>
            The list of results of the base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorResultMismatchConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorParameterMismatchConformance">
            <summary>
            The parameter types of a type and a base type don't match.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorParameterMismatchConformance.DerivedParameterList">
            <summary>
            The list of parameters of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorParameterMismatchConformance.DerivedParameterEnd">
            <summary>
            The parameter end status of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorParameterMismatchConformance.BaseParameterList">
            <summary>
            The list of parameters of the base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorParameterMismatchConformance.BaseParameterEnd">
            <summary>
            The parameter end status of the base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorParameterMismatchConformance">
            <summary>
            The parameter types of a type and a base type don't match.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorParameterMismatchConformance.#ctor(EaslyCompiler.ISource,CompilerNode.IQueryOverloadType,CompilerNode.IQueryOverloadType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorParameterMismatchConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="M:EaslyCompiler.ErrorParameterMismatchConformance.#ctor(EaslyCompiler.ISource,CompilerNode.ICommandOverloadType,CompilerNode.ICommandOverloadType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorParameterMismatchConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="M:EaslyCompiler.ErrorParameterMismatchConformance.#ctor(EaslyCompiler.ISource,CompilerNode.IIndexerType,CompilerNode.IIndexerType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorParameterMismatchConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorParameterMismatchConformance.DerivedParameterList">
            <summary>
            The list of parameters of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorParameterMismatchConformance.DerivedParameterEnd">
            <summary>
            The parameter end status of the derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorParameterMismatchConformance.BaseParameterList">
            <summary>
            The list of parameters of the base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorParameterMismatchConformance.BaseParameterEnd">
            <summary>
            The parameter end status of the base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorParameterMismatchConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorOverloadMismatchConformance">
            <summary>
            The base of a type doesn't conform.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorOverloadMismatchConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorOverloadMismatchConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorOverloadMismatchConformance">
            <summary>
            The base of a type doesn't conform.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorOverloadMismatchConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorOverloadMismatchConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorOverloadMismatchConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorOverloadMismatchConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorOverloadMismatchConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorBaseConformance">
            <summary>
            The base of a type doesn't conform.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorBaseConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorBaseConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorBaseConformance">
            <summary>
            The base of a type doesn't conform.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorBaseConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorBaseConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorBaseConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorBaseConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorBaseConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorAncestorConformance">
            <summary>
            A type doesn't inherit from an ancestor.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorAncestorConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorAncestorConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorAncestorConformance">
            <summary>
            A type doesn't inherit from an ancestor.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorAncestorConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorAncestorConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorAncestorConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorAncestorConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorAncestorConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorTypeKindConformance">
            <summary>
            Incompatible types.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTypeKindConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTypeKindConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorTypeKindConformance">
            <summary>
            Incompatible types.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorTypeKindConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorTypeKindConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeKindConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeKindConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTypeKindConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInsufficientConstraintConformance">
            <summary>
            A type isn't sufficiently constrained.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInsufficientConstraintConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInsufficientConstraintConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInsufficientConstraintConformance">
            <summary>
            A type isn't sufficiently constrained.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInsufficientConstraintConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInsufficientConstraintConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInsufficientConstraintConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInsufficientConstraintConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInsufficientConstraintConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorReferenceValueConformance">
            <summary>
            A type doesn't conform to another.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorReferenceValueConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorReferenceValueConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorReferenceValueConformance">
            <summary>
            A type doesn't conform to another.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorReferenceValueConformance.#ctor(EaslyCompiler.ISource,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorReferenceValueConformance"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="derivedType">The derived type</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorReferenceValueConformance.DerivedType">
            <summary>
            The derived type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorReferenceValueConformance.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorReferenceValueConformance.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorSingleTypeNotAllowed">
            <summary>
            Invalid declaration of a singleton.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorSingleTypeNotAllowed.EntityName">
            <summary>
            The entity name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorSingleTypeNotAllowed">
            <summary>
            Invalid declaration of a singleton.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorSingleTypeNotAllowed.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorSingleTypeNotAllowed"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="entityName">The entity name</param>
        </member>
        <member name="P:EaslyCompiler.ErrorSingleTypeNotAllowed.EntityName">
            <summary>
            The entity name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorSingleTypeNotAllowed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorSingleInstanceConflict">
            <summary>
            Multiple declaration of a singleton.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorSingleInstanceConflict.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorSingleInstanceConflict">
            <summary>
            Multiple declaration of a singleton.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorSingleInstanceConflict.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorSingleInstanceConflict"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="className">The class name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorSingleInstanceConflict.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorSingleInstanceConflict.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorMissingAncestor">
            <summary>
            Ancestor not found.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorMissingAncestor.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorMissingAncestor">
            <summary>
            Ancestor not found.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorMissingAncestor.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorMissingAncestor"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name</param>
        </member>
        <member name="P:EaslyCompiler.ErrorMissingAncestor.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorMissingAncestor.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorMissingSelectedPrecursor">
            <summary>
            Ancestor not selected.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorMissingSelectedPrecursor.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorMissingSelectedPrecursor">
            <summary>
            Ancestor not selected.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorMissingSelectedPrecursor.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorMissingSelectedPrecursor"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name</param>
        </member>
        <member name="P:EaslyCompiler.ErrorMissingSelectedPrecursor.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorMissingSelectedPrecursor.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorMultipleEffectiveFeature">
            <summary>
            Inheritance of multiple features with the same name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorMultipleEffectiveFeature.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorMultipleEffectiveFeature">
            <summary>
            Inheritance of multiple features with the same name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorMultipleEffectiveFeature.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorMultipleEffectiveFeature"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name</param>
        </member>
        <member name="P:EaslyCompiler.ErrorMultipleEffectiveFeature.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorMultipleEffectiveFeature.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInheritanceConflict">
            <summary>
            Inheritance with conflicting settings.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInheritanceConflict.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInheritanceConflict">
            <summary>
            Inheritance with conflicting settings.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInheritanceConflict.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInheritanceConflict"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInheritanceConflict.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInheritanceConflict.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorExportNameConflict">
            <summary>
            Export already inherited.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorExportNameConflict.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorExportNameConflict.PreviousName">
            <summary>
            The previous name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorExportNameConflict">
            <summary>
            Export already inherited.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorExportNameConflict.#ctor(EaslyCompiler.ISource,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorExportNameConflict"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="newName">The new name</param>
            <param name="previousName">The previous name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorExportNameConflict.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorExportNameConflict.PreviousName">
            <summary>
            The previous name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorExportNameConflict.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidAnchoredType">
            <summary>
            Anchored type used in bad context.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidAnchoredType">
            <summary>
            Anchored type used in bad context.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidAnchoredType.#ctor(CompilerNode.IAnchoredType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidAnchoredType"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidAnchoredType.#ctor(CompilerNode.IKeywordAnchoredType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidAnchoredType"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidAnchoredType.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorDiscreteNameConflict">
            <summary>
            Discrete already inherited.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorDiscreteNameConflict.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorDiscreteNameConflict.PreviousName">
            <summary>
            The previous name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorDiscreteNameConflict">
            <summary>
            Discrete already inherited.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorDiscreteNameConflict.#ctor(EaslyCompiler.ISource,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorDiscreteNameConflict"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="newName">The new name</param>
            <param name="previousName">The previous name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorDiscreteNameConflict.NewName">
            <summary>
            The new name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorDiscreteNameConflict.PreviousName">
            <summary>
            The previous name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorDiscreteNameConflict.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNotAnchor">
            <summary>
            Name cannot be used as anchor.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorNotAnchor.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNotAnchor">
            <summary>
            Name cannot be used as anchor.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNotAnchor.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNotAnchor"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNotAnchor.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorNotAnchor.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorReservedName">
            <summary>
            Use of a reserved name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorReservedName.Name">
            <summary>
            The reserved name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorReservedName">
            <summary>
            Use of a reserved name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorReservedName.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorReservedName"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="name">The reserved name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorReservedName.Name">
            <summary>
            The reserved name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorReservedName.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidOldExpression">
            <summary>
            Invalid 'new' expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidOldExpression">
            <summary>
            Invalid 'new' expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidOldExpression.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidOldExpression"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidOldExpression.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorIncompatibleRangeBounds">
            <summary>
            Invalid arguments.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorIncompatibleRangeBounds">
            <summary>
            Invalid arguments.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorIncompatibleRangeBounds.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorIncompatibleRangeBounds"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorIncompatibleRangeBounds.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNoPrecursor">
            <summary>
            Invalid precursor call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNoPrecursor">
            <summary>
            Invalid precursor call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNoPrecursor.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNoPrecursor"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNoPrecursor.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorIndexPrecursorNotAllowedOutsideIndexer">
            <summary>
            Invalid precursor call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorIndexPrecursorNotAllowedOutsideIndexer">
            <summary>
            Invalid precursor call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorIndexPrecursorNotAllowedOutsideIndexer.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorIndexPrecursorNotAllowedOutsideIndexer"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorIndexPrecursorNotAllowedOutsideIndexer.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorPrecursorNotAllowedInIndexer">
            <summary>
            Invalid precursor call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorPrecursorNotAllowedInIndexer">
            <summary>
            Invalid precursor call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorPrecursorNotAllowedInIndexer.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorPrecursorNotAllowedInIndexer"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorPrecursorNotAllowedInIndexer.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidPrecursor">
            <summary>
            Invalid precursor.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidPrecursor">
            <summary>
            Invalid precursor.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidPrecursor.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidPrecursor"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidPrecursor.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidOverSourceType">
            <summary>
            Invalid source for an over loop.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidOverSourceType">
            <summary>
            Invalid source for an over loop.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidOverSourceType.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidOverSourceType"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidOverSourceType.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorAssignmentMismatch">
            <summary>
            Invalid assignment.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorAssignmentMismatch">
            <summary>
            Invalid assignment.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorAssignmentMismatch.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorAssignmentMismatch"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorAssignmentMismatch.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorConstantNewExpression">
            <summary>
            Invalid 'new' expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorConstantNewExpression">
            <summary>
            Invalid 'new' expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorConstantNewExpression.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorConstantNewExpression"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorConstantNewExpression.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorStringTypeMissing">
            <summary>
            The type 'String' is not imported.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorStringTypeMissing">
            <summary>
            The type 'String' is not imported.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorStringTypeMissing.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorStringTypeMissing"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorStringTypeMissing.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorConstantExpected">
            <summary>
            Invalid argument.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorConstantExpected">
            <summary>
            Invalid argument.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorConstantExpected.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorConstantExpected"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorConstantExpected.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorAttributeOrPropertyRequired">
            <summary>
            Bad feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorAttributeOrPropertyRequired.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorAttributeOrPropertyRequired">
            <summary>
            Bad feature.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorAttributeOrPropertyRequired.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorAttributeOrPropertyRequired"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorAttributeOrPropertyRequired.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorAttributeOrPropertyRequired.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorCharacterTypeMissing">
            <summary>
            The type 'Character' is not imported.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorCharacterTypeMissing">
            <summary>
            The type 'Character' is not imported.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorCharacterTypeMissing.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorCharacterTypeMissing"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorCharacterTypeMissing.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorMissingIndexer">
            <summary>
            No indexer.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorMissingIndexer">
            <summary>
            No indexer.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorMissingIndexer.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorMissingIndexer"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorMissingIndexer.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorExpressionResultMismatch">
            <summary>
            One or more results used in an expression don't match a counterpart.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorExpressionResultMismatch">
            <summary>
            One or more results used in an expression don't match a counterpart.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorExpressionResultMismatch.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorExpressionResultMismatch"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorExpressionResultMismatch.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorArgumentMixed">
            <summary>
            Invalid arguments.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorArgumentMixed">
            <summary>
            Invalid arguments.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorArgumentMixed.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorArgumentMixed"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorArgumentMixed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorConstantRequired">
            <summary>
            Feature not a constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorConstantRequired.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorConstantRequired">
            <summary>
            Feature not a constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorConstantRequired.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorConstantRequired"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="featureName">The feature name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorConstantRequired.FeatureName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorConstantRequired.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorEntityTypeMissing">
            <summary>
            The type 'Entity' is not imported.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorEntityTypeMissing">
            <summary>
            The type 'Entity' is not imported.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorEntityTypeMissing.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorEntityTypeMissing"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorEntityTypeMissing.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNumberTypeMissing">
            <summary>
            The type 'Number' is not imported.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNumberTypeMissing">
            <summary>
            The type 'Number' is not imported.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNumberTypeMissing.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNumberTypeMissing"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNumberTypeMissing.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorEventTypeMissing">
            <summary>
            The type 'Event' is not imported.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorEventTypeMissing">
            <summary>
            The type 'Event' is not imported.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorEventTypeMissing.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorEventTypeMissing"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorEventTypeMissing.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidInstruction">
            <summary>
            An invalid instruction.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidInstruction">
            <summary>
            An invalid instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidInstruction.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidInstruction"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidInstruction.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorArgumentNameMismatch">
            <summary>
            Bad argument.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorArgumentNameMismatch.ArgumentName">
            <summary>
            The argument name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorArgumentNameMismatch">
            <summary>
            Bad argument.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorArgumentNameMismatch.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorArgumentNameMismatch"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="argumentName">The argument name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorArgumentNameMismatch.ArgumentName">
            <summary>
            The argument name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorArgumentNameMismatch.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorTooManyArguments">
            <summary>
            Call with too many argument.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTooManyArguments.ActualCount">
            <summary>
            Actual argument count.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorTooManyArguments.ExpectedCount">
            <summary>
            Expected count.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorTooManyArguments">
            <summary>
            Call with too many argument.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorTooManyArguments.#ctor(EaslyCompiler.ISource,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorTooManyArguments"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="actualCount">Actual argument count.</param>
            <param name="expectedCount">Expected count.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorTooManyArguments.ActualCount">
            <summary>
            Actual argument count.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTooManyArguments.ExpectedCount">
            <summary>
            Expected count.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorTooManyArguments.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidOperator">
            <summary>
            Bad operator.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInvalidOperator.OperatorName">
            <summary>
            The operator name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidOperator">
            <summary>
            Bad operator.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidOperator.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidOperator"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="operatorName">The operator name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidOperator.OperatorName">
            <summary>
            The operator name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidOperator.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorNumberConstantExpected">
            <summary>
            Expression not a constant number.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorNumberConstantExpected">
            <summary>
            Expression not a constant number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorNumberConstantExpected.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorNumberConstantExpected"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorNumberConstantExpected.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidExpression">
            <summary>
            An invalid expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidExpression">
            <summary>
            An invalid expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidExpression.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidExpression"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidExpression.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorMultipleIdenticalDiscrete">
            <summary>
            Discretes with the same value.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorMultipleIdenticalDiscrete.Number">
            <summary>
            The shared number.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorMultipleIdenticalDiscrete">
            <summary>
            Discretes with the same value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorMultipleIdenticalDiscrete.#ctor(EaslyCompiler.ISource,EaslyNumber.Number)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorMultipleIdenticalDiscrete"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="number">The shared number.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorMultipleIdenticalDiscrete.Number">
            <summary>
            The shared number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorMultipleIdenticalDiscrete.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorEmptyClassPath">
            <summary>
            Empty class path.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorEmptyClassPath">
            <summary>
            Empty class path.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorEmptyClassPath.#ctor(CompilerNode.IClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorEmptyClassPath"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorEmptyClassPath.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorPatternAlreadyUsed">
            <summary>
            Pattern already used.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorPatternAlreadyUsed.Pattern">
            <summary>
            The pattern.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorPatternAlreadyUsed">
            <summary>
            Pattern already used.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorPatternAlreadyUsed.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorPatternAlreadyUsed"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorPatternAlreadyUsed.Pattern">
            <summary>
            The pattern.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorPatternAlreadyUsed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorIdentifierAlreadyListed">
            <summary>
            Identifier already listed.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorIdentifierAlreadyListed.Identifier">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorIdentifierAlreadyListed">
            <summary>
            Identifier already listed.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorIdentifierAlreadyListed.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorIdentifierAlreadyListed"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorIdentifierAlreadyListed.Identifier">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorIdentifierAlreadyListed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorUnknownIdentifier">
            <summary>
            Unknown identifier.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorUnknownIdentifier.Identifier">
            <summary>
            The unknown identifier.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorUnknownIdentifier">
            <summary>
            Unknown identifier.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorUnknownIdentifier.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorUnknownIdentifier"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="identifier">The unknown identifier.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorUnknownIdentifier.Identifier">
            <summary>
            The unknown identifier.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorUnknownIdentifier.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorDuplicateName">
            <summary>
            Duplicate name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorDuplicateName.Name">
            <summary>
            The duplicate name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorDuplicateName">
            <summary>
            Duplicate name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorDuplicateName.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorDuplicateName"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="name">The duplicate name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorDuplicateName.Name">
            <summary>
            The duplicate name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorDuplicateName.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorWhiteSpaceNotAllowed">
            <summary>
            Whitespace not allowed in string.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorWhiteSpaceNotAllowed">
            <summary>
            Whitespace not allowed in string.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorWhiteSpaceNotAllowed.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorWhiteSpaceNotAllowed"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorWhiteSpaceNotAllowed.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorEmptyString">
            <summary>
            Invalid empty string.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorEmptyString">
            <summary>
            Invalid empty string.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorEmptyString.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorEmptyString"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorEmptyString.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInvalidCharacter">
            <summary>
            Invalid character in a string.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInvalidCharacter.Character">
            <summary>
            The invalid character.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInvalidCharacter">
            <summary>
            Invalid character in a string.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInvalidCharacter.#ctor(EaslyCompiler.ISource,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInvalidCharacter"/> class.
            </summary>
            <param name="source">The error location.</param>
            <param name="character">The invalid character.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidCharacter.Character">
            <summary>
            The invalid character.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInvalidCharacter.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorIllFormedString">
            <summary>
            Invalid unicode string.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorIllFormedString">
            <summary>
            Invalid unicode string.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorIllFormedString.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorIllFormedString"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorIllFormedString.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInputRootInvalid">
            <summary>
            Invalid Input Root.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInputRootInvalid">
            <summary>
            Invalid Input Root.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInputRootInvalid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInputRootInvalid"/> class.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInputRootInvalid.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInputFileInvalid">
            <summary>
            Invalid Input File or stream.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInputFileInvalid.Exception">
            <summary>
            The exception that occured reading the file or stream.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInputFileInvalid">
            <summary>
            Invalid Input File or stream.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInputFileInvalid.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInputFileInvalid"/> class.
            </summary>
            <param name="exception">The exception that occured reading the file or stream.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInputFileInvalid.Exception">
            <summary>
            The exception that occured reading the file or stream.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInputFileInvalid.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IErrorInputFileNotFound">
            <summary>
            Input File Not Found.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IErrorInputFileNotFound.FileName">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorInputFileNotFound">
            <summary>
            Input File Not Found.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorInputFileNotFound.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorInputFileNotFound"/> class.
            </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorInputFileNotFound.FileName">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorInputFileNotFound.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorLocation">
            <summary>
            Location of an error.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ErrorLocation.NoLocation">
            <summary>
            The default if an error has no location.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorLocation"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorLocation.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorLocation"/> class.
            </summary>
            <param name="source">The node location.</param>
        </member>
        <member name="P:EaslyCompiler.ErrorLocation.Node">
            <summary>
            The node location.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorLocation.ToString">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.ICompiledFeature">
            <summary>
            A feature, from a <see cref="T:BaseNode.Feature"/> or specific to the compiler.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICompiledType">
            <summary>
            A type, from a <see cref="T:BaseNode.ObjectType"/> or specific to the compiler.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.DiscreteTable">
            <summary>
            Discretes available in this type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.FeatureTable">
            <summary>
            Features available in this type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.ExportTable">
            <summary>
            Exports available in this type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.ConformanceTable">
            <summary>
            Table of conforming types.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.InstancingRecordList">
            <summary>
            List of type instancing.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.TypeFriendlyName">
            <summary>
            Type friendly name, unique.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.IsReference">
            <summary>
            True if the type is a reference type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.IsValue">
            <summary>
            True if the type is a value type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICompiledType.OriginatingTypedef">
            <summary>
            The typedef this type comes from, if assigned.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICompiledType.InstanciateType(EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates an instance of a class type, or reuse an existing instance.
            </summary>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The proposed type instance name.</param>
            <param name="resolvedType">The proposed type instance.</param>
        </member>
        <member name="T:EaslyCompiler.IErrorStringValidity">
            <summary>
            Invalid string.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ErrorStringValidity">
            <summary>
            Invalid string.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ErrorStringValidity.#ctor(EaslyCompiler.ISource)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ErrorStringValidity"/> class.
            </summary>
            <param name="source">The error location.</param>
        </member>
        <member name="T:EaslyCompiler.IFeatureInstance">
            <summary>
            An instance of a feature in a class (direct or inherited).
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureInstance.Owner">
            <summary>
            The class with the instance. Can be different than the class that defines the feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureInstance.Feature">
            <summary>
            The feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureInstance.IsForgotten">
            <summary>
            Inherited with a forget clause.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureInstance.IsKept">
            <summary>
            Inherited with a keep clause.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureInstance.IsDiscontinued">
            <summary>
            Inherited with a discontinue clause.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureInstance.InheritBySideAttribute">
            <summary>
            Inherited from an effective body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureInstance.PrecursorList">
            <summary>
            List of precursors.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureInstance.OriginalPrecursor">
            <summary>
            The first precursor in the inheritance tree.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IFeatureInstance.SetIsForgotten(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.IFeatureInstance.IsForgotten"/> flag.
            </summary>
            <param name="isForgotten">The new value.</param>
        </member>
        <member name="M:EaslyCompiler.IFeatureInstance.SetIsKept(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.IFeatureInstance.IsKept"/> flag.
            </summary>
            <param name="isKept">The new value.</param>
        </member>
        <member name="M:EaslyCompiler.IFeatureInstance.SetIsDiscontinued(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.IFeatureInstance.IsDiscontinued"/> flag.
            </summary>
            <param name="isDiscontinued">The new value.</param>
        </member>
        <member name="M:EaslyCompiler.IFeatureInstance.SetInheritBySideAttribute(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.IFeatureInstance.InheritBySideAttribute"/> flag.
            </summary>
            <param name="inheritBySideAttribute">The new value.</param>
        </member>
        <member name="M:EaslyCompiler.IFeatureInstance.Clone(CompilerNode.IClassType)">
            <summary>
            Clones this instance using the specified ancestor.
            </summary>
            <param name="ancestor">The ancestor.</param>
        </member>
        <member name="M:EaslyCompiler.IFeatureInstance.FindPrecursor(Easly.IOptionalReference{BaseNode.IObjectType},EaslyCompiler.IErrorList,EaslyCompiler.ISource,EaslyCompiler.IFeatureInstance@)">
            <summary>
            Find the precursor, either the only one or the selected one.
            </summary>
            <param name="ancestorType">The optionally selected precursor.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="source">The source to use when reporting errors.</param>
            <param name="selectedPrecursor">The selected precursor upon return if successful.</param>
        </member>
        <member name="T:EaslyCompiler.FeatureInstance">
            <summary>
            An instance of a feature in a class (direct or inherited).
            </summary>
        </member>
        <member name="M:EaslyCompiler.FeatureInstance.#ctor(CompilerNode.IClass,EaslyCompiler.ICompiledFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.FeatureInstance"/> class.
            </summary>
            <param name="owner">The class with the instance. Can be different than the class that defines the feature.</param>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:EaslyCompiler.FeatureInstance.#ctor(CompilerNode.IClass,EaslyCompiler.ICompiledFeature,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.FeatureInstance"/> class.
            </summary>
            <param name="owner">The class with the instance. Can be different than the class that defines the feature.</param>
            <param name="feature">The feature.</param>
            <param name="isKept">Inherited with a keep clause.</param>
            <param name="isDiscontinued">Inherited with a discontinue clause.</param>
        </member>
        <member name="P:EaslyCompiler.FeatureInstance.Owner">
            <summary>
            The class with the instance. Can be different than the class that defines the feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureInstance.Feature">
            <summary>
            The feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureInstance.IsForgotten">
            <summary>
            Inherited with a forget clause.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureInstance.IsKept">
            <summary>
            Inherited with a keep clause.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureInstance.IsDiscontinued">
            <summary>
            Inherited with a discontinue clause.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureInstance.InheritBySideAttribute">
            <summary>
            Inherited from an effective body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureInstance.PrecursorList">
            <summary>
            List of precursors.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureInstance.OriginalPrecursor">
            <summary>
            The first precursor in the inheritance tree.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FeatureInstance.SetIsForgotten(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.FeatureInstance.IsForgotten"/> flag.
            </summary>
            <param name="isForgotten">The new value.</param>
        </member>
        <member name="M:EaslyCompiler.FeatureInstance.SetIsKept(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.FeatureInstance.IsKept"/> flag.
            </summary>
            <param name="isKept">The new value.</param>
        </member>
        <member name="M:EaslyCompiler.FeatureInstance.SetIsDiscontinued(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.FeatureInstance.IsDiscontinued"/> flag.
            </summary>
            <param name="isDiscontinued">The new value.</param>
        </member>
        <member name="M:EaslyCompiler.FeatureInstance.SetInheritBySideAttribute(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.FeatureInstance.InheritBySideAttribute"/> flag.
            </summary>
            <param name="inheritBySideAttribute">The new value.</param>
        </member>
        <member name="M:EaslyCompiler.FeatureInstance.Clone(CompilerNode.IClassType)">
            <summary>
            Clones this instance using the specified ancestor.
            </summary>
            <param name="ancestor">The ancestor.</param>
        </member>
        <member name="M:EaslyCompiler.FeatureInstance.FindPrecursor(Easly.IOptionalReference{BaseNode.IObjectType},EaslyCompiler.IErrorList,EaslyCompiler.ISource,EaslyCompiler.IFeatureInstance@)">
            <summary>
            Find the precursor, either the only one or the selected one.
            </summary>
            <param name="ancestorType">The optionally selected precursor.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="source">The source to use when reporting errors.</param>
            <param name="selectedPrecursor">The selected precursor upon return if successful.</param>
        </member>
        <member name="T:EaslyCompiler.IImportedClass">
            <summary>
            Specifications of an imported class in a library.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.Item">
            <summary>
            The imported class.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.ParentSource">
            <summary>
            The class importing.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.ImportType">
            <summary>
            The import type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.IsTypeAssigned">
            <summary>
            True if <see cref="P:EaslyCompiler.IImportedClass.ImportType"/> is valid.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.ImportLocation">
            <summary>
            The import location.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.IsLocationAssigned">
            <summary>
            True if <see cref="P:EaslyCompiler.IImportedClass.ImportLocation"/> is valid.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.ResolvedClassTypeName">
            <summary>
            The resolved class type name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.ResolvedClassType">
            <summary>
            The resolved class type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IImportedClass.ClassGroup">
            <summary>
            The group of classes the imported class belongs to.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IImportedClass.SetParentSource(CompilerNode.IClass)">
            <summary>
            Sets the parent source.
            </summary>
            <param name="parentSource">The parent source.</param>
        </member>
        <member name="M:EaslyCompiler.IImportedClass.SetImportType(BaseNode.ImportType)">
            <summary>
            Sets the import type.
            </summary>
            <param name="importType">The import type.</param>
        </member>
        <member name="M:EaslyCompiler.IImportedClass.SetImportLocation(CompilerNode.IImport)">
            <summary>
            Sets the import location.
            </summary>
            <param name="importLocation">The import location.</param>
        </member>
        <member name="T:EaslyCompiler.ImportedClass">
            <summary>
            Specifications of an imported class in a library.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ImportedClass.#ctor(CompilerNode.IClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ImportedClass"/> class.
            </summary>
            <param name="item">The imported class.</param>
        </member>
        <member name="M:EaslyCompiler.ImportedClass.#ctor(CompilerNode.IClass,BaseNode.ImportType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ImportedClass"/> class.
            </summary>
            <param name="item">The imported class.</param>
            <param name="importType">The import type.</param>
        </member>
        <member name="M:EaslyCompiler.ImportedClass.#ctor(EaslyCompiler.IImportedClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ImportedClass"/> class.
            </summary>
            <param name="other">The other imported class.</param>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.Item">
            <summary>
            The imported class.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.ParentSource">
            <summary>
            The class importing.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.ImportType">
            <summary>
            The import type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.IsTypeAssigned">
            <summary>
            True if <see cref="P:EaslyCompiler.ImportedClass.ImportType"/> is valid.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.ImportLocation">
            <summary>
            The import location.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.IsLocationAssigned">
            <summary>
            True if <see cref="P:EaslyCompiler.ImportedClass.ImportLocation"/> is valid.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.ResolvedClassTypeName">
            <summary>
            The resolved class type name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.ResolvedClassType">
            <summary>
            The resolved class type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ImportedClass.ClassGroup">
            <summary>
            The group of classes the imported class belongs to.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ImportedClass.SetParentSource(CompilerNode.IClass)">
            <summary>
            Sets the parent source.
            </summary>
            <param name="parentSource">The parent source.</param>
        </member>
        <member name="M:EaslyCompiler.ImportedClass.SetImportType(BaseNode.ImportType)">
            <summary>
            Sets the import type.
            </summary>
            <param name="importType">The import type.</param>
        </member>
        <member name="M:EaslyCompiler.ImportedClass.SetImportLocation(CompilerNode.IImport)">
            <summary>
            Sets the import location.
            </summary>
            <param name="importLocation">The import location.</param>
        </member>
        <member name="M:EaslyCompiler.ImportedClass.ToString">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.IDestinationTemplate">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IDestinationTemplate.Path">
            <summary>
            Path to the destination object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IDestinationTemplate.DestinationType">
            <summary>
            Type of the destination.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IDestinationTemplate.StartingPoint">
            <summary>
            The starting point for the path.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IDestinationTemplate.IsSet(EaslyCompiler.ISource)">
            <summary>
            True if the destination value has been set;
            </summary>
            <param name="source">The node for which the value is to be checked.</param>
        </member>
        <member name="M:EaslyCompiler.IDestinationTemplate.GetDestinationObject(EaslyCompiler.ISource)">
            <summary>
            Gets the destination current value.
            </summary>
            <param name="source">The node for which the value is requested.</param>
        </member>
        <member name="T:EaslyCompiler.IDestinationTemplate`2">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TValue">Type of the destination.</typeparam>
        </member>
        <member name="P:EaslyCompiler.IDestinationTemplate`2.Path">
            <summary>
            Path to the destination object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IDestinationTemplate`2.DestinationType">
            <summary>
            Type of the destination.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IDestinationTemplate`2.StartingPoint">
            <summary>
            The starting point for the path.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IDestinationTemplate`2.IsSet(`0)">
            <summary>
            True if the destination value has been set;
            </summary>
            <param name="source">The node for which the value is to be checked.</param>
        </member>
        <member name="M:EaslyCompiler.IDestinationTemplate`2.GetDestinationObject(`0)">
            <summary>
            Gets the destination current value.
            </summary>
            <param name="source">The node for which the value is requested.</param>
        </member>
        <member name="T:EaslyCompiler.DestinationTemplate`2">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TValue">Type of the destination.</typeparam>
        </member>
        <member name="M:EaslyCompiler.DestinationTemplate`2.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.DestinationTemplate`2"/> class.
            </summary>
            <param name="path">Path to the destination object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="P:EaslyCompiler.DestinationTemplate`2.Path">
            <summary>
            Path to the destination object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.DestinationTemplate`2.DestinationType">
            <summary>
            Type of the destination.
            </summary>
        </member>
        <member name="P:EaslyCompiler.DestinationTemplate`2.StartingPoint">
            <summary>
            The starting point for the path.
            </summary>
        </member>
        <member name="M:EaslyCompiler.DestinationTemplate`2.IsSet(`0)">
            <summary>
            True if the destination value has been set;
            </summary>
            <param name="source">The node for which the value is to be checked.</param>
        </member>
        <member name="M:EaslyCompiler.DestinationTemplate`2.GetDestinationObject(`0)">
            <summary>
            Gets the destination current value.
            </summary>
            <param name="source">The node for which the value is requested.</param>
        </member>
        <member name="P:EaslyCompiler.DestinationTemplate`2.PropertyPath">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.IUnsealedListDestinationTemplate">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unsealed <see cref="T:Easly.ISealableList"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IUnsealedListDestinationTemplate`2">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unsealed <see cref="T:Easly.ISealableList`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="T:EaslyCompiler.UnsealedListDestinationTemplate`2">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unsealed <see cref="T:Easly.ISealableList`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="M:EaslyCompiler.UnsealedListDestinationTemplate`2.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.UnsealedListDestinationTemplate`2"/> class.
            </summary>
            <param name="path">Path to the destination object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.UnsealedListDestinationTemplate`2.IsSet(`0)">
            <summary>
            True if the destination value has been set;
            </summary>
            <param name="node">The node for which the value is to be checked.</param>
        </member>
        <member name="T:EaslyCompiler.IUnsealedTableDestinationTemplate">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unsealed <see cref="T:Easly.ISealableDictionary"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IUnsealedTableDestinationTemplate`3">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unsealed <see cref="T:Easly.ISealableDictionary`2"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="T:EaslyCompiler.UnsealedTableDestinationTemplate`3">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unsealed <see cref="T:Easly.ISealableDictionary`2"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:EaslyCompiler.UnsealedTableDestinationTemplate`3.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.UnsealedTableDestinationTemplate`3"/> class.
            </summary>
            <param name="path">Path to the destination object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.UnsealedTableDestinationTemplate`3.IsSet(`0)">
            <summary>
            True if the destination value has been set;
            </summary>
            <param name="node">The node for which the value is to be checked.</param>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceDestinationTemplate">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unassigned <see cref="T:Easly.IOnceReference"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceDestinationTemplate`2">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unassigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the reference.</typeparam>
        </member>
        <member name="T:EaslyCompiler.OnceReferenceDestinationTemplate`2">
            <summary>
            Specifies a destination for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The destination is an unassigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the reference.</typeparam>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceDestinationTemplate`2.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.OnceReferenceDestinationTemplate`2"/> class.
            </summary>
            <param name="path">Path to the destination object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceDestinationTemplate`2.IsSet(`0)">
            <summary>
            True if the destination value has been set;
            </summary>
            <param name="node">The node for which the value is to be checked.</param>
        </member>
        <member name="T:EaslyCompiler.RuleTemplateSet">
            <summary>
            Set of <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.RuleTemplateSet.Identifiers">
            <summary>
            Rules for the identifiers inference pass.
            </summary>
        </member>
        <member name="P:EaslyCompiler.RuleTemplateSet.Types">
            <summary>
            Rules for the types inference pass.
            </summary>
        </member>
        <member name="P:EaslyCompiler.RuleTemplateSet.Contract">
            <summary>
            Rules for the contract inference pass.
            </summary>
        </member>
        <member name="P:EaslyCompiler.RuleTemplateSet.Body">
            <summary>
            Rules for the body inference pass.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IRenameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRename"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.RenameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRename"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.RenameRuleTemplate.CheckConsistency(CompilerNode.IRename,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.RenameRuleTemplate.Apply(CompilerNode.IRename,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQualifiedNameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQualifiedName"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QualifiedNameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQualifiedName"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QualifiedNameRuleTemplate.CheckConsistency(CompilerNode.IQualifiedName,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QualifiedNameRuleTemplate.Apply(CompilerNode.IQualifiedName,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.INameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IName"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.NameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IName"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NameRuleTemplate.CheckConsistency(CompilerNode.IName,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.NameRuleTemplate.Apply(CompilerNode.IName,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestStringTextRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestStringExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestStringTextRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestStringExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestStringTextRuleTemplate.CheckConsistency(CompilerNode.IManifestStringExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestStringTextRuleTemplate.Apply(CompilerNode.IManifestStringExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestNumberTextRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestNumberExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestNumberTextRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestNumberExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestNumberTextRuleTemplate.CheckConsistency(CompilerNode.IManifestNumberExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestNumberTextRuleTemplate.Apply(CompilerNode.IManifestNumberExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestCharacterTextRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestCharacterExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestCharacterTextRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestCharacterExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestCharacterTextRuleTemplate.CheckConsistency(CompilerNode.IManifestCharacterExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestCharacterTextRuleTemplate.Apply(CompilerNode.IManifestCharacterExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIdentifierRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIdentifier"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IIdentifierRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIdentifier"/>.
            </summary>
            <typeparam name="TIdentifier">The identifier type on which the rule applies.</typeparam>
        </member>
        <member name="T:EaslyCompiler.IdentifierRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIdentifier"/>.
            </summary>
            <typeparam name="TIdentifier">The identifier type on which the rule applies.</typeparam>
        </member>
        <member name="M:EaslyCompiler.IdentifierRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IdentifierRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllInheritancesGroupRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllInheritancesGroupRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllInheritancesGroupRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllInheritancesGroupRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllInheritancesClassGroupRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllInheritancesClassGroupRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllInheritancesClassGroupRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllInheritancesClassGroupRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssertionTagExpressionBodyRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssertionTagExpressionBodyRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionBodyRuleTemplate.CheckConsistency(CompilerNode.IAssertionTagExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionBodyRuleTemplate.Apply(CompilerNode.IAssertionTagExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IFunctionFeatureResultRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFunctionFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.FunctionFeatureResultRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFunctionFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FunctionFeatureResultRuleTemplate.CheckConsistency(CompilerNode.IFunctionFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.FunctionFeatureResultRuleTemplate.Apply(CompilerNode.IFunctionFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IFunctionTypeResultRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFunctionType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.FunctionTypeResultRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFunctionType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FunctionTypeResultRuleTemplate.CheckConsistency(CompilerNode.IFunctionType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.FunctionTypeResultRuleTemplate.Apply(CompilerNode.IFunctionType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInheritanceClassGroupRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InheritanceClassGroupRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InheritanceClassGroupRuleTemplate.CheckConsistency(CompilerNode.IInheritance,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InheritanceClassGroupRuleTemplate.Apply(CompilerNode.IInheritance,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordAnchoredTypeCurrentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAnchoredType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordAnchoredTypeCurrentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAnchoredType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordAnchoredTypeCurrentRuleTemplate.CheckConsistency(CompilerNode.IKeywordAnchoredType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordAnchoredTypeCurrentRuleTemplate.Apply(CompilerNode.IKeywordAnchoredType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryOverloadAssociatedTypeConformanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryOverloadAssociatedTypeConformanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadAssociatedTypeConformanceRuleTemplate.CheckConsistency(CompilerNode.IQueryOverload,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadAssociatedTypeConformanceRuleTemplate.Apply(CompilerNode.IQueryOverload,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryOverloadResultRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryOverloadResultRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadResultRuleTemplate.CheckConsistency(CompilerNode.IQueryOverload,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadResultRuleTemplate.Apply(CompilerNode.IQueryOverload,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryOverloadConformanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryOverloadConformanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadConformanceRuleTemplate.CheckConsistency(CompilerNode.IQueryOverload,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadConformanceRuleTemplate.Apply(CompilerNode.IQueryOverload,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryOverloadTypeConformanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverloadType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryOverloadTypeConformanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverloadType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadTypeConformanceRuleTemplate.CheckConsistency(CompilerNode.IQueryOverloadType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadTypeConformanceRuleTemplate.Apply(CompilerNode.IQueryOverloadType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IWithRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IWith"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.WithRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IWith"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.WithRuleTemplate.CheckConsistency(CompilerNode.IWith,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.WithRuleTemplate.Apply(CompilerNode.IWith,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ITypedefSourceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ITypedef"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TypedefSourceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ITypedef"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TypedefSourceRuleTemplate.CheckConsistency(CompilerNode.ITypedef,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.TypedefSourceRuleTemplate.Apply(CompilerNode.ITypedef,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ITypedefRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ITypedef"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TypedefRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ITypedef"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TypedefRuleTemplate.CheckConsistency(CompilerNode.ITypedef,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.TypedefRuleTemplate.Apply(CompilerNode.ITypedef,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ITupleTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ITupleType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TupleTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ITupleType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TupleTypeRuleTemplate.CheckConsistency(CompilerNode.ITupleType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.TupleTypeRuleTemplate.Apply(CompilerNode.ITupleType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IThrowInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IThrowInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ThrowInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IThrowInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ThrowInstructionRuleTemplate.CheckConsistency(CompilerNode.IThrowInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ThrowInstructionRuleTemplate.Apply(CompilerNode.IThrowInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ISimpleTypeInheritanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ISimpleType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.SimpleTypeInheritanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ISimpleType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISimpleTypeClassRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ISimpleType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.SimpleTypeClassRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ISimpleType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISimpleTypeSourceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ISimpleType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.SimpleTypeSourceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ISimpleType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.SimpleTypeSourceRuleTemplate.CheckConsistency(CompilerNode.ISimpleType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.SimpleTypeSourceRuleTemplate.Apply(CompilerNode.ISimpleType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ISimpleTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ISimpleType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.SimpleTypeRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.ISimpleType"/>.
            </summary>
            <typeparam name="T">Type used to have separate static constructor.</typeparam>
        </member>
        <member name="M:EaslyCompiler.SimpleTypeRuleTemplate`1.CheckConsistency(CompilerNode.ISimpleType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.SimpleTypeRuleTemplate`1.Apply(CompilerNode.ISimpleType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IScopeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IScope"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ScopeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IScope"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ScopeRuleTemplate.CheckConsistency(CompilerNode.IScope,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ScopeRuleTemplate.Apply(CompilerNode.IScope,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IReleaseInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IReleaseInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ReleaseInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IReleaseInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ReleaseInstructionRuleTemplate.CheckConsistency(CompilerNode.IReleaseInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ReleaseInstructionRuleTemplate.Apply(CompilerNode.IReleaseInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IRaiseEventInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRaiseEventInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.RaiseEventInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRaiseEventInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.RaiseEventInstructionRuleTemplate.CheckConsistency(CompilerNode.IRaiseEventInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.RaiseEventInstructionRuleTemplate.Apply(CompilerNode.IRaiseEventInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryOverloadTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverloadType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryOverloadTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverloadType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadTypeRuleTemplate.CheckConsistency(CompilerNode.IQueryOverloadType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadTypeRuleTemplate.Apply(CompilerNode.IQueryOverloadType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryOverloadRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryOverloadRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadRuleTemplate.CheckConsistency(CompilerNode.IQueryOverload,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadRuleTemplate.Apply(CompilerNode.IQueryOverload,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPropertyTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPropertyType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PropertyTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPropertyType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PropertyTypeRuleTemplate.CheckConsistency(CompilerNode.IPropertyType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PropertyTypeRuleTemplate.Apply(CompilerNode.IPropertyType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPropertyFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPropertyFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PropertyFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPropertyFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PropertyFeatureRuleTemplate.CheckConsistency(CompilerNode.IPropertyFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PropertyFeatureRuleTemplate.Apply(CompilerNode.IPropertyFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IProcedureTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IProcedureType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ProcedureTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IProcedureType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ProcedureTypeRuleTemplate.CheckConsistency(CompilerNode.IProcedureType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ProcedureTypeRuleTemplate.Apply(CompilerNode.IProcedureType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IProcedureFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IProcedureFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ProcedureFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IProcedureFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ProcedureFeatureRuleTemplate.CheckConsistency(CompilerNode.IProcedureFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ProcedureFeatureRuleTemplate.Apply(CompilerNode.IProcedureFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorInstructionRuleTemplate.CheckConsistency(CompilerNode.IPrecursorInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorInstructionRuleTemplate.Apply(CompilerNode.IPrecursorInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorIndexAssignmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorIndexAssignmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexAssignmentInstructionRuleTemplate.CheckConsistency(CompilerNode.IPrecursorIndexAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexAssignmentInstructionRuleTemplate.Apply(CompilerNode.IPrecursorIndexAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPositionalTypeArgumentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPositionalTypeArgument"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PositionalTypeArgumentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPositionalTypeArgument"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PositionalTypeArgumentRuleTemplate.CheckConsistency(CompilerNode.IPositionalTypeArgument,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PositionalTypeArgumentRuleTemplate.Apply(CompilerNode.IPositionalTypeArgument,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IOverLoopInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOverLoopInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.OverLoopInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOverLoopInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.OverLoopInstructionRuleTemplate.CheckConsistency(CompilerNode.IOverLoopInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.OverLoopInstructionRuleTemplate.Apply(CompilerNode.IOverLoopInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.INamespaceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.NamespaceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NamespaceRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.NamespaceRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ILocalNamespaceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.LocalNamespaceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.LocalNamespaceRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.LocalNamespaceRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordAssignmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordAssignmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordAssignmentInstructionRuleTemplate.CheckConsistency(CompilerNode.IKeywordAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordAssignmentInstructionRuleTemplate.Apply(CompilerNode.IKeywordAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordAnchoredTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAnchoredType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordAnchoredTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAnchoredType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordAnchoredTypeRuleTemplate.CheckConsistency(CompilerNode.IKeywordAnchoredType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordAnchoredTypeRuleTemplate.Apply(CompilerNode.IKeywordAnchoredType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInspectInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInspectInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InspectInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInspectInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InspectInstructionRuleTemplate.CheckConsistency(CompilerNode.IInspectInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InspectInstructionRuleTemplate.Apply(CompilerNode.IInspectInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInheritanceRenameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InheritanceRenameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InheritanceRenameRuleTemplate.CheckConsistency(CompilerNode.IInheritance,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InheritanceRenameRuleTemplate.Apply(CompilerNode.IInheritance,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInheritanceParentTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InheritanceParentTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InheritanceParentTypeRuleTemplate.CheckConsistency(CompilerNode.IInheritance,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InheritanceParentTypeRuleTemplate.Apply(CompilerNode.IInheritance,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInheritanceClassParentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InheritanceClassParentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InheritanceClassParentRuleTemplate.CheckConsistency(CompilerNode.IInheritance,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InheritanceClassParentRuleTemplate.Apply(CompilerNode.IInheritance,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexerTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexerType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexerTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexerType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexerTypeRuleTemplate.CheckConsistency(CompilerNode.IIndexerType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexerTypeRuleTemplate.Apply(CompilerNode.IIndexerType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexerRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexerFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexerRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexerFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexerRuleTemplate.CheckConsistency(CompilerNode.IIndexerFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexerRuleTemplate.Apply(CompilerNode.IIndexerFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexerFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexerFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexerFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexerFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexerFeatureRuleTemplate.CheckConsistency(CompilerNode.IIndexerFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexerFeatureRuleTemplate.Apply(CompilerNode.IIndexerFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexAssignmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexAssignmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexAssignmentInstructionRuleTemplate.CheckConsistency(CompilerNode.IIndexAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexAssignmentInstructionRuleTemplate.Apply(CompilerNode.IIndexAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIfThenElseInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIfThenElseInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IfThenElseInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIfThenElseInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IfThenElseInstructionRuleTemplate.CheckConsistency(CompilerNode.IIfThenElseInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IfThenElseInstructionRuleTemplate.Apply(CompilerNode.IIfThenElseInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IGenericTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGenericType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.GenericTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGenericType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.GenericTypeRuleTemplate.CheckConsistency(CompilerNode.IGenericType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.GenericTypeRuleTemplate.Apply(CompilerNode.IGenericType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IGenericTypeArgumentsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGenericType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.GenericTypeArgumentsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGenericType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.GenericTypeArgumentsRuleTemplate.CheckConsistency(CompilerNode.IGenericType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.GenericTypeArgumentsRuleTemplate.Apply(CompilerNode.IGenericType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IGenericDefaultTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGeneric"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.GenericDefaultTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGeneric"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.GenericDefaultTypeRuleTemplate.CheckConsistency(CompilerNode.IGeneric,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.GenericDefaultTypeRuleTemplate.Apply(CompilerNode.IGeneric,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IGenericConstraintsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGeneric"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.GenericConstraintsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGeneric"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.GenericConstraintsRuleTemplate.CheckConsistency(CompilerNode.IGeneric,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.GenericConstraintsRuleTemplate.Apply(CompilerNode.IGeneric,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IFunctionTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFunctionType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.FunctionTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFunctionType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FunctionTypeRuleTemplate.CheckConsistency(CompilerNode.IFunctionType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.FunctionTypeRuleTemplate.Apply(CompilerNode.IFunctionType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IFunctionFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFunctionFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.FunctionFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFunctionFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FunctionFeatureRuleTemplate.CheckConsistency(CompilerNode.IFunctionFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.FunctionFeatureRuleTemplate.Apply(CompilerNode.IFunctionFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IForLoopInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IForLoopInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ForLoopInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IForLoopInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ForLoopInstructionRuleTemplate.CheckConsistency(CompilerNode.IForLoopInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ForLoopInstructionRuleTemplate.Apply(CompilerNode.IForLoopInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IDebugInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDebugInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.DebugInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDebugInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.DebugInstructionRuleTemplate.CheckConsistency(CompilerNode.IDebugInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.DebugInstructionRuleTemplate.Apply(CompilerNode.IDebugInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICreationFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICreationFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CreationFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICreationFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CreationFeatureRuleTemplate.CheckConsistency(CompilerNode.ICreationFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CreationFeatureRuleTemplate.Apply(CompilerNode.ICreationFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICreateInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICreateInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CreateInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICreateInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CreateInstructionRuleTemplate.CheckConsistency(CompilerNode.ICreateInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CreateInstructionRuleTemplate.Apply(CompilerNode.ICreateInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConstraintRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstraint"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ConstraintRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstraint"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConstraintRuleTemplate.CheckConsistency(CompilerNode.IConstraint,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ConstraintRuleTemplate.Apply(CompilerNode.IConstraint,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConstantFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstantFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ConstantFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstantFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConstantFeatureRuleTemplate.CheckConsistency(CompilerNode.IConstantFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ConstantFeatureRuleTemplate.Apply(CompilerNode.IConstantFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConstraintRenameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstraint"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ConstraintRenameRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstraint"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConstraintRenameRuleTemplate.CheckConsistency(CompilerNode.IConstraint,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ConstraintRenameRuleTemplate.Apply(CompilerNode.IConstraint,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConstraintParentTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstraint"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ConstraintParentTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstraint"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConstraintParentTypeRuleTemplate.CheckConsistency(CompilerNode.IConstraint,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ConstraintParentTypeRuleTemplate.Apply(CompilerNode.IConstraint,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConstraintConformanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstraint"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ConstraintConformanceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConstraint"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConstraintConformanceRuleTemplate.CheckConsistency(CompilerNode.IConstraint,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ConstraintConformanceRuleTemplate.Apply(CompilerNode.IConstraint,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IContinuationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IContinuation"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ContinuationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IContinuation"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ContinuationRuleTemplate.CheckConsistency(CompilerNode.IContinuation,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ContinuationRuleTemplate.Apply(CompilerNode.IContinuation,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConditionalRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConditional"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ConditionalRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConditional"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConditionalRuleTemplate.CheckConsistency(CompilerNode.IConditional,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ConditionalRuleTemplate.Apply(CompilerNode.IConditional,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICommandOverloadTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandOverloadType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CommandOverloadTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandOverloadType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CommandOverloadTypeRuleTemplate.CheckConsistency(CompilerNode.ICommandOverloadType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CommandOverloadTypeRuleTemplate.Apply(CompilerNode.ICommandOverloadType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICommandOverloadRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandOverload"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CommandOverloadRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandOverload"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CommandOverloadRuleTemplate.CheckConsistency(CompilerNode.ICommandOverload,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CommandOverloadRuleTemplate.Apply(CompilerNode.ICommandOverload,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICommandInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CommandInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CommandInstructionRuleTemplate.CheckConsistency(CompilerNode.ICommandInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CommandInstructionRuleTemplate.Apply(CompilerNode.ICommandInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICheckInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICheckInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CheckInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICheckInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CheckInstructionRuleTemplate.CheckConsistency(CompilerNode.ICheckInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CheckInstructionRuleTemplate.Apply(CompilerNode.ICheckInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAttachmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AttachmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AttachmentInstructionRuleTemplate.CheckConsistency(CompilerNode.IAttachmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AttachmentInstructionRuleTemplate.Apply(CompilerNode.IAttachmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssignmentTypeArgumentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentTypeArgument"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssignmentTypeArgumentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentTypeArgument"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssignmentTypeArgumentRuleTemplate.CheckConsistency(CompilerNode.IAssignmentTypeArgument,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssignmentTypeArgumentRuleTemplate.Apply(CompilerNode.IAssignmentTypeArgument,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssignmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssignmentInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssignmentInstructionRuleTemplate.CheckConsistency(CompilerNode.IAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssignmentInstructionRuleTemplate.Apply(CompilerNode.IAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAsLongAsInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAsLongAsInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AsLongAsInstructionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAsLongAsInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AsLongAsInstructionRuleTemplate.CheckConsistency(CompilerNode.IAsLongAsInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AsLongAsInstructionRuleTemplate.Apply(CompilerNode.IAsLongAsInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllTypedefsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllTypedefsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllTypedefsRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllTypedefsRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllLocalTypedefsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllLocalTypedefsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllLocalTypedefsRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllLocalTypedefsRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllLocalFeaturesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllLocalFeaturesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllLocalFeaturesRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllLocalFeaturesRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllLocalExportsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllLocalExportsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllLocalExportsRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllLocalExportsRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllLocalDiscretesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllLocalDiscretesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllLocalDiscretesRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllLocalDiscretesRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllInheritancesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllInheritancesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllInheritancesRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllInheritancesRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllInheritancesInstancedRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllInheritancesInstancedRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllInheritancesInstancedRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllInheritancesInstancedRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllImportedClassRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllImportedClassRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllImportedClassRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllImportedClassRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllGenericsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllGenericsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllGenericsRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllGenericsRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllFeaturesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllFeaturesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllFeaturesRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllFeaturesRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllExportsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllExportsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllExportsRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllExportsRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAnchoredTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAnchoredType"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AnchoredTypeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAnchoredType"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AnchoredTypeRuleTemplate.CheckConsistency(CompilerNode.IAnchoredType,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AnchoredTypeRuleTemplate.Apply(CompilerNode.IAnchoredType,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllDiscretesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllDiscretesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllDiscretesRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllDiscretesRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAttributeFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttributeFeature"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AttributeFeatureRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttributeFeature"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AttributeFeatureRuleTemplate.CheckConsistency(CompilerNode.IAttributeFeature,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AttributeFeatureRuleTemplate.Apply(CompilerNode.IAttributeFeature,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAttachmentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachment"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AttachmentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachment"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AttachmentRuleTemplate.CheckConsistency(CompilerNode.IAttachment,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AttachmentRuleTemplate.Apply(CompilerNode.IAttachment,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IFeatureRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFeature"/>.
            </summary>
            <typeparam name="TFeature">One of the <see cref="T:CompilerNode.IFeature"/> descendants.</typeparam>
        </member>
        <member name="T:EaslyCompiler.FeatureRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IFeature"/>.
            </summary>
            <typeparam name="TFeature">One of the <see cref="T:CompilerNode.IFeature"/> descendants.</typeparam>
        </member>
        <member name="M:EaslyCompiler.FeatureRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.FeatureRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IExportRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IExport"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ExportRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IExport"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ExportRuleTemplate.CheckConsistency(CompilerNode.IExport,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ExportRuleTemplate.Apply(CompilerNode.IExport,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IExportChangeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IExportChange"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ExportChangeRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IExportChange"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ExportChangeRuleTemplate.CheckConsistency(CompilerNode.IExportChange,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ExportChangeRuleTemplate.Apply(CompilerNode.IExportChange,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEffectiveBodyRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEffectiveBody"/>.
            </summary>
            <typeparam name="TBody">Specialized type of effective body.</typeparam>
        </member>
        <member name="T:EaslyCompiler.EffectiveBodyRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEffectiveBody"/>.
            </summary>
            <typeparam name="TBody">Specialized type of effective body.</typeparam>
        </member>
        <member name="M:EaslyCompiler.EffectiveBodyRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EffectiveBodyRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IDiscreteRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDiscrete"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.DiscreteRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDiscrete"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.DiscreteRuleTemplate.CheckConsistency(CompilerNode.IDiscrete,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.DiscreteRuleTemplate.Apply(CompilerNode.IDiscrete,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEntityDeclarationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEntityDeclaration"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.EntityDeclarationRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEntityDeclaration"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.EntityDeclarationRuleTemplate.CheckConsistency(CompilerNode.IEntityDeclaration,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EntityDeclarationRuleTemplate.Apply(CompilerNode.IEntityDeclaration,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IGenericRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGeneric"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.GenericRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IGeneric"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.GenericRuleTemplate.CheckConsistency(CompilerNode.IGeneric,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.GenericRuleTemplate.Apply(CompilerNode.IGeneric,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="P:EaslyCompiler.AncestorFeatureInfo.Ancestor">
            <summary>
            The ancestor/
            </summary>
        </member>
        <member name="P:EaslyCompiler.AncestorFeatureInfo.FeatureTable">
            <summary>
            The ancestor features.
            </summary>
        </member>
        <member name="P:EaslyCompiler.AncestorFeatureInfo.Location">
            <summary>
            The location for error reports.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IExpressionType">
            <summary>
            Type of an expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IExpressionType.ValueTypeName">
            <summary>
            The expression type name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IExpressionType.ValueType">
            <summary>
            The expression type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IExpressionType.Name">
            <summary>
            Name of the expression value, empty if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IExpressionType.Source">
            <summary>
            The expression with this type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IExpressionType.IsResultName">
            <summary>
            True if the associated name is 'Result'.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IExpressionType.Index">
            <summary>
            Index of this type in results of <see cref="P:EaslyCompiler.IExpressionType.Source"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IExpressionType.NumberKind">
            <summary>
            The number kind if the expression type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IExpressionType.SetSource(CompilerNode.IExpression,System.Int32)">
            <summary>
            Sets the origin expression of this type.
            </summary>
            <param name="source">The expression with this type.</param>
            <param name="index">Index of this type in results of <paramref name="source"/>.</param>
        </member>
        <member name="M:EaslyCompiler.IExpressionType.SetName(System.String)">
            <summary>
            Set this type name.
            </summary>
            <param name="name">The name to set.</param>
        </member>
        <member name="M:EaslyCompiler.IExpressionType.UpdateNumberKind(EaslyCompiler.NumberKinds,System.Boolean@)">
            <summary>
            Tentatively updates the number kind of the result.
            </summary>
            <param name="numberKind">The new number kind.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="T:EaslyCompiler.ExpressionType">
            <summary>
            Type of an expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ExpressionType.#ctor(EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ExpressionType"/> class.
            </summary>
            <param name="valueTypeName">The expression type name.</param>
            <param name="valueType">The expression type.</param>
            <param name="name">Name of the expression value, empty if none.</param>
        </member>
        <member name="P:EaslyCompiler.ExpressionType.ValueTypeName">
            <summary>
            The expression type name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ExpressionType.ValueType">
            <summary>
            The expression type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ExpressionType.Name">
            <summary>
            Name of the expression value, empty if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ExpressionType.Source">
            <summary>
            The expression with this type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ExpressionType.IsResultName">
            <summary>
            True if the associated name is 'Result'.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ExpressionType.Index">
            <summary>
            Index of this type in results of <see cref="P:EaslyCompiler.ExpressionType.Source"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ExpressionType.NumberKind">
            <summary>
            The number kind if the expression type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ExpressionType.SetSource(CompilerNode.IExpression,System.Int32)">
            <summary>
            Sets the origin expression of this type.
            </summary>
            <param name="source">The expression with this type.</param>
            <param name="index">Index of this type in results of <paramref name="source"/>.</param>
        </member>
        <member name="M:EaslyCompiler.ExpressionType.SetName(System.String)">
            <summary>
            Set this type name.
            </summary>
            <param name="name">The name to set.</param>
        </member>
        <member name="M:EaslyCompiler.ExpressionType.UpdateNumberKind(EaslyCompiler.NumberKinds,System.Boolean@)">
            <summary>
            Tentatively updates the number kind of the result.
            </summary>
            <param name="numberKind">The new number kind.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="T:EaslyCompiler.IParameter">
            <summary>
            An instance of an overload parameter.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IParameter.Name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IParameter.ResolvedParameter">
            <summary>
            The corresponding resolved attribute.
            </summary>
        </member>
        <member name="T:EaslyCompiler.Parameter">
            <summary>
            An instance of an overload parameter.
            </summary>
        </member>
        <member name="M:EaslyCompiler.Parameter.#ctor(System.String,CompilerNode.IScopeAttributeFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.Parameter"/> class.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="resolvedParameter">The corresponding resolved attribute.</param>
        </member>
        <member name="P:EaslyCompiler.Parameter.Name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.Parameter.ResolvedParameter">
            <summary>
            The corresponding resolved attribute.
            </summary>
        </member>
        <member name="M:EaslyCompiler.Parameter.TableContainsName(Easly.ISealableList{EaslyCompiler.IParameter},System.String)">
            <summary>
            Checks if a table of parameters contains a parameter with the given name.
            </summary>
            <param name="parameterTable">The table of parameters.</param>
            <param name="name">The name to look for.</param>
        </member>
        <member name="M:EaslyCompiler.Parameter.ToString">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.SingleClassGroup">
            <summary>
            List of classes that belong to the same group.
            </summary>
        </member>
        <member name="M:EaslyCompiler.SingleClassGroup.#ctor(CompilerNode.IClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.SingleClassGroup"/> class.
            </summary>
            <param name="firstClass">First class of the group.</param>
        </member>
        <member name="M:EaslyCompiler.SingleClassGroup.AddClass(CompilerNode.IClass,System.Boolean@)">
            <summary>
            Adds a class belonging to the same group.
            </summary>
            <param name="groupClass">The class added.</param>
            <param name="isUpdated">True upon return if the class list changed.</param>
        </member>
        <member name="P:EaslyCompiler.SingleClassGroup.GroupClassList">
            <summary>
            List of classes in the group.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TypeArgumentStyles">
            <summary>
            Choice for type arguments.
            </summary>
        </member>
        <member name="F:EaslyCompiler.TypeArgumentStyles.None">
            <summary>
            No choice made.
            </summary>
        </member>
        <member name="F:EaslyCompiler.TypeArgumentStyles.Positional">
            <summary>
            Using positional arguments.
            </summary>
        </member>
        <member name="F:EaslyCompiler.TypeArgumentStyles.Assignment">
            <summary>
            Using assignment arguments.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TypeInstancingRecord">
            <summary>
            Link between class types and their instancing.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TypeInstancingRecord.InstancingClassType">
            <summary>
            The class type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TypeInstancingRecord.ResolvedTypeName">
            <summary>
            The name of the instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TypeInstancingRecord.ResolvedType">
            <summary>
            The type instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IAssertionTagExpressionSourceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssertionTagExpressionSourceRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionSourceRuleTemplate.CheckConsistency(CompilerNode.IAssertionTagExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionSourceRuleTemplate.Apply(CompilerNode.IAssertionTagExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IObjectLanguageConstant">
            <summary>
            Represents an object feature as some constant.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ObjectLanguageConstant">
            <summary>
            Represents an object feature as some constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ObjectLanguageConstant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ObjectLanguageConstant"/> class.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ObjectLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ObjectLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.ObjectLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.ObjectLanguageConstant.IsConstantEqual(EaslyCompiler.ObjectLanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.IQueryExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IQueryExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryExpressionConstantRuleTemplate.Apply(CompilerNode.IQueryExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IDeferredBodyRuleContractTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IDeferredBodyRuleContractTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="T:EaslyCompiler.DeferredBodyRuleContractTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.DeferredBodyRuleContractTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.DeferredBodyRuleContractTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IExternBodyRuleContractTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IExternBodyRuleContractTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="T:EaslyCompiler.ExternBodyRuleContractTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.ExternBodyRuleContractTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ExternBodyRuleContractTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IReleaseInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IReleaseInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ReleaseInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IReleaseInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ReleaseInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IReleaseInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Releases for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ReleaseInstructionContractRuleTemplate.Apply(CompilerNode.IReleaseInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from ReleaseConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IRaiseEventInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRaiseEventInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.RaiseEventInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRaiseEventInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.RaiseEventInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IRaiseEventInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            RaiseEvents for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.RaiseEventInstructionContractRuleTemplate.Apply(CompilerNode.IRaiseEventInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from RaiseEventConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInitializedObjectExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInitializedObjectExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InitializedObjectExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInitializedObjectExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InitializedObjectExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IInitializedObjectExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InitializedObjectExpressionConstantRuleTemplate.Apply(CompilerNode.IInitializedObjectExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssignmentArgumentConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentArgument"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssignmentArgumentConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentArgument"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssignmentArgumentConstantRuleTemplate.CheckConsistency(CompilerNode.IAssignmentArgument,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssignmentArgumentConstantRuleTemplate.Apply(CompilerNode.IAssignmentArgument,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPositionalArgumentConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPositionalArgument"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PositionalArgumentConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPositionalArgument"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PositionalArgumentConstantRuleTemplate.CheckConsistency(CompilerNode.IPositionalArgument,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PositionalArgumentConstantRuleTemplate.Apply(CompilerNode.IPositionalArgument,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.NeutralLanguageConstant">
            <summary>
            A singleton constant to use as a null expression constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.NeutralLanguageConstant.NotConstant">
            <summary>
            Static property that represents the null value for an expression constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NeutralLanguageConstant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.NeutralLanguageConstant"/> class.
            </summary>
        </member>
        <member name="P:EaslyCompiler.NeutralLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NeutralLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.NeutralLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.IUnaryOperatorExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.UnaryOperatorExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.UnaryOperatorExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IUnaryOperatorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.UnaryOperatorExpressionConstantRuleTemplate.Apply(CompilerNode.IUnaryOperatorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IUnaryNotExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryNotExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.UnaryNotExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryNotExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.UnaryNotExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IUnaryNotExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.UnaryNotExpressionConstantRuleTemplate.Apply(CompilerNode.IUnaryNotExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IResultOfExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IResultOfExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ResultOfExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IResultOfExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultOfExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IResultOfExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ResultOfExpressionConstantRuleTemplate.Apply(CompilerNode.IResultOfExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IPrecursorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorExpressionConstantRuleTemplate.Apply(CompilerNode.IPrecursorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEqualityExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEqualityExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.EqualityExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEqualityExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.EqualityExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IEqualityExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EqualityExpressionConstantRuleTemplate.Apply(CompilerNode.IEqualityExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IClassConstantExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClassConstantExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ClassConstantExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClassConstantExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ClassConstantExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IClassConstantExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ClassConstantExpressionConstantRuleTemplate.Apply(CompilerNode.IClassConstantExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IBinaryOperatorExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.BinaryOperatorExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BinaryOperatorExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IBinaryOperatorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.BinaryOperatorExpressionConstantRuleTemplate.Apply(CompilerNode.IBinaryOperatorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IBinaryConditionalExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryConditionalExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.BinaryConditionalExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryConditionalExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BinaryConditionalExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IBinaryConditionalExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.BinaryConditionalExpressionConstantRuleTemplate.Apply(CompilerNode.IBinaryConditionalExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssertionTagExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssertionTagExpressionConstantRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionConstantRuleTemplate.CheckConsistency(CompilerNode.IAssertionTagExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionConstantRuleTemplate.Apply(CompilerNode.IAssertionTagExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEntityLanguageConstant">
            <summary>
            Represents an entity feature as some constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IEntityLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="T:EaslyCompiler.EntityLanguageConstant">
            <summary>
            Represents an entity feature as some constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.EntityLanguageConstant.#ctor(EaslyCompiler.IFeatureWithEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.EntityLanguageConstant"/> class.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:EaslyCompiler.EntityLanguageConstant.#ctor(CompilerNode.IDiscrete)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.EntityLanguageConstant"/> class.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="P:EaslyCompiler.EntityLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="P:EaslyCompiler.EntityLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.EntityLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.EntityLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.EntityLanguageConstant.IsConstantEqual(EaslyCompiler.IEntityLanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.IAgentLanguageConstant">
            <summary>
            Represents an agent feature as some constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IAgentLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AgentLanguageConstant">
            <summary>
            Represents an agent feature as some constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AgentLanguageConstant.#ctor(EaslyCompiler.ICompiledFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.AgentLanguageConstant"/> class.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="P:EaslyCompiler.AgentLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="P:EaslyCompiler.AgentLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AgentLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.AgentLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.AgentLanguageConstant.IsConstantEqual(EaslyCompiler.IAgentLanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.IStringLanguageConstant">
            <summary>
            Represents a string constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IStringLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="T:EaslyCompiler.StringLanguageConstant">
            <summary>
            Represents a string constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.StringLanguageConstant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.StringLanguageConstant"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.StringLanguageConstant.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.StringLanguageConstant"/> class.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="P:EaslyCompiler.StringLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="P:EaslyCompiler.StringLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.StringLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.StringLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.StringLanguageConstant.IsConstantEqual(EaslyCompiler.IStringLanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.ICharacterLanguageConstant">
            <summary>
            Represents a character constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICharacterLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CharacterLanguageConstant">
            <summary>
            Represents a character constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CharacterLanguageConstant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CharacterLanguageConstant"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CharacterLanguageConstant.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CharacterLanguageConstant"/> class.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="P:EaslyCompiler.CharacterLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CharacterLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CharacterLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.CharacterLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.CharacterLanguageConstant.IsConstantEqual(EaslyCompiler.ICharacterLanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.IBooleanLanguageConstant">
            <summary>
            Represents a boolean constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IBooleanLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="T:EaslyCompiler.BooleanLanguageConstant">
            <summary>
            Represents a boolean constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BooleanLanguageConstant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.BooleanLanguageConstant"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BooleanLanguageConstant.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.BooleanLanguageConstant"/> class.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="P:EaslyCompiler.BooleanLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="P:EaslyCompiler.BooleanLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BooleanLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.BooleanLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.BooleanLanguageConstant.IsConstantEqual(EaslyCompiler.IBooleanLanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.IOrderedLanguageConstant">
            <summary>
            Represents a type of constant number that can be ordered and compared.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IOrderedLanguageConstant.IsConstantGreater(EaslyCompiler.IOrderedLanguageConstant)">
            <summary>
            Checks if another constant is greater than this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IPrecursorInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorInstructionContractRuleTemplate.Apply(CompilerNode.IPrecursorInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IWithContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IWith"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.WithContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IWith"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.WithContractRuleTemplate.CheckConsistency(CompilerNode.IWith,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.WithContractRuleTemplate.Apply(CompilerNode.IWith,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IUnaryOperatorExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.UnaryOperatorExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.UnaryOperatorExpressionRuleTemplate.CheckConsistency(CompilerNode.IUnaryOperatorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.UnaryOperatorExpressionRuleTemplate.Apply(CompilerNode.IUnaryOperatorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IUnaryNotExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryNotExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.UnaryNotExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IUnaryNotExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.UnaryNotExpressionRuleTemplate.CheckConsistency(CompilerNode.IUnaryNotExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.UnaryNotExpressionRuleTemplate.Apply(CompilerNode.IUnaryNotExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IThrowInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IThrowInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ThrowInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IThrowInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ThrowInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IThrowInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ThrowInstructionContractRuleTemplate.Apply(CompilerNode.IThrowInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IScopeContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IScope"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ScopeContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IScope"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ScopeContractRuleTemplate.CheckConsistency(CompilerNode.IScope,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ScopeContractRuleTemplate.Apply(CompilerNode.IScope,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IResultOfExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IResultOfExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ResultOfExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IResultOfExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ResultOfExpressionRuleTemplate.CheckConsistency(CompilerNode.IResultOfExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ResultOfExpressionRuleTemplate.Apply(CompilerNode.IResultOfExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConstantRange">
            <summary>
            The range between two constants.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IConstantRange.Minimum">
            <summary>
            The minimum value in the range.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IConstantRange.Maximum">
            <summary>
            The maximum value in the range.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IConstantRange.IsIntersecting(EaslyCompiler.IConstantRange)">
            <summary>
            Checks if two ranges intersect.
            </summary>
            <param name="other">The other range.</param>
        </member>
        <member name="T:EaslyCompiler.ConstantRange">
            <summary>
            The range between two constants.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConstantRange.#ctor(EaslyCompiler.IOrderedLanguageConstant,EaslyCompiler.IOrderedLanguageConstant)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ConstantRange"/> class.
            </summary>
            <param name="minimum">The minimum value in the range.</param>
            <param name="maximum">The maximum value in the range.</param>
        </member>
        <member name="P:EaslyCompiler.ConstantRange.Minimum">
            <summary>
            The minimum value in the range.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ConstantRange.Maximum">
            <summary>
            The maximum value in the range.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConstantRange.TryParseRange(CompilerNode.IRange,EaslyCompiler.IConstantRange@,EaslyCompiler.IError@)">
            <summary>
            Tries to parse a range node to obtain the corresponding range of constants.
            </summary>
            <param name="range">The range to parse.</param>
            <param name="result">The constant range upon return if successful.</param>
            <param name="error">The error in case of failure.</param>
        </member>
        <member name="M:EaslyCompiler.ConstantRange.IsIntersecting(EaslyCompiler.IConstantRange)">
            <summary>
            Checks if two ranges intersect.
            </summary>
            <param name="other">The other range.</param>
        </member>
        <member name="T:EaslyCompiler.IRangeContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRange"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.RangeContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IRange"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.RangeContractRuleTemplate.CheckConsistency(CompilerNode.IRange,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.RangeContractRuleTemplate.Apply(CompilerNode.IRange,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryOverloadContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryOverloadContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryOverload"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadContractRuleTemplate.CheckConsistency(CompilerNode.IQueryOverload,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryOverloadContractRuleTemplate.Apply(CompilerNode.IQueryOverload,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQualifiedNameContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQualifiedName"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QualifiedNameContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQualifiedName"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QualifiedNameContractRuleTemplate.CheckConsistency(CompilerNode.IQualifiedName,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QualifiedNameContractRuleTemplate.Apply(CompilerNode.IQualifiedName,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IQueryExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.QueryExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IQueryExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.QueryExpressionRuleTemplate.CheckConsistency(CompilerNode.IQueryExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.QueryExpressionRuleTemplate.Apply(CompilerNode.IQueryExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorIndexExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorIndexExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexExpressionRuleTemplate.CheckConsistency(CompilerNode.IPrecursorIndexExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexExpressionRuleTemplate.Apply(CompilerNode.IPrecursorIndexExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorIndexAssignmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorIndexAssignmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexAssignmentInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IPrecursorIndexAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorIndexAssignmentInstructionContractRuleTemplate.Apply(CompilerNode.IPrecursorIndexAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPrecursorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorExpressionRuleTemplate.CheckConsistency(CompilerNode.IPrecursorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorExpressionRuleTemplate.Apply(CompilerNode.IPrecursorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPrecursorBodyContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IPrecursorBodyContractRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="T:EaslyCompiler.PrecursorBodyContractRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.PrecursorBodyContractRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PrecursorBodyContractRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IPositionalArgumentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPositionalArgument"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PositionalArgumentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IPositionalArgument"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PositionalArgumentRuleTemplate.CheckConsistency(CompilerNode.IPositionalArgument,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.PositionalArgumentRuleTemplate.Apply(CompilerNode.IPositionalArgument,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IOverLoopInstructionInitContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOverLoopInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.OverLoopInstructionInitContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOverLoopInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.OverLoopInstructionInitContractRuleTemplate.CheckConsistency(CompilerNode.IOverLoopInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.OverLoopInstructionInitContractRuleTemplate.Apply(CompilerNode.IOverLoopInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IOverLoopInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOverLoopInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.OverLoopInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOverLoopInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.OverLoopInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IOverLoopInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.OverLoopInstructionContractRuleTemplate.Apply(CompilerNode.IOverLoopInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IOldExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOldExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.OldExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IOldExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.OldExpressionRuleTemplate.CheckConsistency(CompilerNode.IOldExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.OldExpressionRuleTemplate.Apply(CompilerNode.IOldExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.INewExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.INewExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.NewExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.INewExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NewExpressionRuleTemplate.CheckConsistency(CompilerNode.INewExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.NewExpressionRuleTemplate.Apply(CompilerNode.INewExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestStringExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestStringExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestStringExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestStringExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestStringExpressionRuleTemplate.CheckConsistency(CompilerNode.IManifestStringExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestStringExpressionRuleTemplate.Apply(CompilerNode.IManifestStringExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestNumberExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestNumberExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestNumberExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestNumberExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestNumberExpressionRuleTemplate.CheckConsistency(CompilerNode.IManifestNumberExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestNumberExpressionRuleTemplate.Apply(CompilerNode.IManifestNumberExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IManifestCharacterExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestCharacterExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ManifestCharacterExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IManifestCharacterExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ManifestCharacterExpressionRuleTemplate.CheckConsistency(CompilerNode.IManifestCharacterExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ManifestCharacterExpressionRuleTemplate.Apply(CompilerNode.IManifestCharacterExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordExpressionRuleTemplate.CheckConsistency(CompilerNode.IKeywordExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordExpressionRuleTemplate.Apply(CompilerNode.IKeywordExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IKeywordAssignmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.KeywordAssignmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IKeywordAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.KeywordAssignmentInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IKeywordAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.KeywordAssignmentInstructionContractRuleTemplate.Apply(CompilerNode.IKeywordAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInspectInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInspectInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InspectInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInspectInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InspectInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IInspectInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InspectInstructionContractRuleTemplate.Apply(CompilerNode.IInspectInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInitializedObjectExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInitializedObjectExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InitializedObjectExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInitializedObjectExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InitializedObjectExpressionRuleTemplate.CheckConsistency(CompilerNode.IInitializedObjectExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InitializedObjectExpressionRuleTemplate.Apply(CompilerNode.IInitializedObjectExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IInheritanceTagRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.InheritanceTagRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IInheritance"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InheritanceTagRuleTemplate.CheckConsistency(CompilerNode.IInheritance,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.InheritanceTagRuleTemplate.Apply(CompilerNode.IInheritance,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexQueryExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexQueryExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexQueryExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexQueryExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexQueryExpressionRuleTemplate.CheckConsistency(CompilerNode.IIndexQueryExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexQueryExpressionRuleTemplate.Apply(CompilerNode.IIndexQueryExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIndexAssignmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IndexAssignmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIndexAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IndexAssignmentInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IIndexAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IndexAssignmentInstructionContractRuleTemplate.Apply(CompilerNode.IIndexAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IIfThenElseInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIfThenElseInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IfThenElseInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IIfThenElseInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IfThenElseInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IIfThenElseInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IfThenElseInstructionContractRuleTemplate.Apply(CompilerNode.IIfThenElseInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IForLoopInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IForLoopInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ForLoopInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IForLoopInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ForLoopInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IForLoopInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ForLoopInstructionContractRuleTemplate.Apply(CompilerNode.IForLoopInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEqualityExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEqualityExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.EqualityExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEqualityExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.EqualityExpressionRuleTemplate.CheckConsistency(CompilerNode.IEqualityExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EqualityExpressionRuleTemplate.Apply(CompilerNode.IEqualityExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEntityExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEntityExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.EntityExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IEntityExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.EntityExpressionRuleTemplate.CheckConsistency(CompilerNode.IEntityExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EntityExpressionRuleTemplate.Apply(CompilerNode.IEntityExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IEffectiveBodyRuleContractTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IEffectiveBodyRuleContractTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="T:EaslyCompiler.EffectiveBodyRuleContractTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.EffectiveBodyRuleContractTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.EffectiveBodyRuleContractTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IDebugInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDebugInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.DebugInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IDebugInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.DebugInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IDebugInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.DebugInstructionContractRuleTemplate.Apply(CompilerNode.IDebugInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICreateInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICreateInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CreateInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICreateInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CreateInstructionContractRuleTemplate.CheckConsistency(CompilerNode.ICreateInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CreateInstructionContractRuleTemplate.Apply(CompilerNode.ICreateInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IContinuationContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IContinuation"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ContinuationContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IContinuation"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ContinuationContractRuleTemplate.CheckConsistency(CompilerNode.IContinuation,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ContinuationContractRuleTemplate.Apply(CompilerNode.IContinuation,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IConditionalContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConditional"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ConditionalContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IConditional"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ConditionalContractRuleTemplate.CheckConsistency(CompilerNode.IConditional,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ConditionalContractRuleTemplate.Apply(CompilerNode.IConditional,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICommandOverloadContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandOverload"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CommandOverloadContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandOverload"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CommandOverloadContractRuleTemplate.CheckConsistency(CompilerNode.ICommandOverload,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CommandOverloadContractRuleTemplate.Apply(CompilerNode.ICommandOverload,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICommandInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CommandInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICommandInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CommandInstructionContractRuleTemplate.CheckConsistency(CompilerNode.ICommandInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CommandInstructionContractRuleTemplate.Apply(CompilerNode.ICommandInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICheckInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICheckInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CheckInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICheckInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CheckInstructionContractRuleTemplate.CheckConsistency(CompilerNode.ICheckInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CheckInstructionContractRuleTemplate.Apply(CompilerNode.ICheckInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IBodyRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IBodyRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="T:EaslyCompiler.BodyRuleTemplate`1">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBody"/>.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
        </member>
        <member name="M:EaslyCompiler.BodyRuleTemplate`1.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.BodyRuleTemplate`1.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IBinaryOperatorExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.BinaryOperatorExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryOperatorExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BinaryOperatorExpressionRuleTemplate.CheckConsistency(CompilerNode.IBinaryOperatorExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.BinaryOperatorExpressionRuleTemplate.Apply(CompilerNode.IBinaryOperatorExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IBinaryConditionalExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryConditionalExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.BinaryConditionalExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IBinaryConditionalExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BinaryConditionalExpressionRuleTemplate.CheckConsistency(CompilerNode.IBinaryConditionalExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.BinaryConditionalExpressionRuleTemplate.Apply(CompilerNode.IBinaryConditionalExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAttachmentInstructionInitContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AttachmentInstructionInitContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AttachmentInstructionInitContractRuleTemplate.CheckConsistency(CompilerNode.IAttachmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AttachmentInstructionInitContractRuleTemplate.Apply(CompilerNode.IAttachmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAttachmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AttachmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AttachmentInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IAttachmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AttachmentInstructionContractRuleTemplate.Apply(CompilerNode.IAttachmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAttachmentContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachment"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AttachmentContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAttachment"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AttachmentContractRuleTemplate.CheckConsistency(CompilerNode.IAttachment,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AttachmentContractRuleTemplate.Apply(CompilerNode.IAttachment,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssignmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssignmentInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssignmentInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IAssignmentInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssignmentInstructionContractRuleTemplate.Apply(CompilerNode.IAssignmentInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssignmentArgumentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentArgument"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssignmentArgumentRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssignmentArgument"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssignmentArgumentRuleTemplate.CheckConsistency(CompilerNode.IAssignmentArgument,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssignmentArgumentRuleTemplate.Apply(CompilerNode.IAssignmentArgument,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssertionTagExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssertionTagExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionRuleTemplate.CheckConsistency(CompilerNode.IAssertionTagExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssertionTagExpressionRuleTemplate.Apply(CompilerNode.IAssertionTagExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAssertionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertion"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AssertionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAssertion"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AssertionContractRuleTemplate.CheckConsistency(CompilerNode.IAssertion,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AssertionContractRuleTemplate.Apply(CompilerNode.IAssertion,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAsLongAsInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAsLongAsInstruction"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AsLongAsInstructionContractRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAsLongAsInstruction"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AsLongAsInstructionContractRuleTemplate.CheckConsistency(CompilerNode.IAsLongAsInstruction,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AsLongAsInstructionContractRuleTemplate.Apply(CompilerNode.IAsLongAsInstruction,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllInheritanceTagsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllInheritanceTagsRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllInheritanceTagsRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllInheritanceTagsRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllEntitiesWithDefaultRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllEntitiesWithDefaultRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllEntitiesWithDefaultRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllEntitiesWithDefaultRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAllBodiesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AllBodiesRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClass"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AllBodiesRuleTemplate.CheckConsistency(CompilerNode.IClass,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AllBodiesRuleTemplate.Apply(CompilerNode.IClass,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IAgentExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAgentExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.AgentExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IAgentExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.AgentExpressionRuleTemplate.CheckConsistency(CompilerNode.IAgentExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.AgentExpressionRuleTemplate.Apply(CompilerNode.IAgentExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.ICloneOfExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICloneOfExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CloneOfExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.ICloneOfExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CloneOfExpressionRuleTemplate.CheckConsistency(CompilerNode.ICloneOfExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.CloneOfExpressionRuleTemplate.Apply(CompilerNode.ICloneOfExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IClassConstantExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClassConstantExpression"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ClassConstantExpressionRuleTemplate">
            <summary>
            A rule to process <see cref="T:CompilerNode.IClassConstantExpression"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ClassConstantExpressionRuleTemplate.CheckConsistency(CompilerNode.IClassConstantExpression,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="node">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.ClassConstantExpressionRuleTemplate.Apply(CompilerNode.IClassConstantExpression,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="node">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="T:EaslyCompiler.IDiscreteLanguageConstant">
            <summary>
            Represents a discrete constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IDiscreteLanguageConstant.Discrete">
            <summary>
            The discrete constant, if known.
            </summary>
        </member>
        <member name="T:EaslyCompiler.DiscreteLanguageConstant">
            <summary>
            Represents a discrete constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.DiscreteLanguageConstant.#ctor(CompilerNode.IDiscrete)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.DiscreteLanguageConstant"/> class.
            </summary>
            <param name="discrete">The discrete constant.</param>
        </member>
        <member name="P:EaslyCompiler.DiscreteLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="P:EaslyCompiler.DiscreteLanguageConstant.Discrete">
            <summary>
            The discrete constant, if known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.DiscreteLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.DiscreteLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.DiscreteLanguageConstant.IsConstantEqual(EaslyCompiler.IDiscreteLanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.DiscreteLanguageConstant.IsConstantGreater(EaslyCompiler.IOrderedLanguageConstant)">
            <summary>
            Checks if another constant is greater than this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.DiscreteLanguageConstant.IsConstantGreater(EaslyCompiler.IDiscreteLanguageConstant)">
            <summary>
            Checks if another constant is greater than this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.ILanguageConstant">
            <summary>
            Represents a specific type of constant number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ILanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ILanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.ILanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.LanguageConstant">
            <summary>
            Represents a specific type of constant number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.LanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.LanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.LanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.LanguageConstant.TryParseInt(EaslyCompiler.ILanguageConstant,System.Int32@)">
            <summary>
            Tries to parse the specified constant as an integer.
            </summary>
            <param name="constant">The constant to parse.</param>
            <param name="value">The integer value upon return if successful.</param>
            <returns>True if the constant could be parsed as an integer; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyCompiler.LanguageConstant.TryParseExpression(CompilerNode.IExpression,EaslyCompiler.IOrderedLanguageConstant@,EaslyCompiler.IError@)">
            <summary>
            Tries to parse an expression as a constant number.
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="expressionConstant">The parsed constant upon return if successful.</param>
            <param name="error">Error found on failure.</param>
            <returns>True if the expression could be parsed as a constant; Otherwise, false.</returns>
        </member>
        <member name="T:EaslyCompiler.INumberLanguageConstant">
            <summary>
            Represents a number constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.INumberLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="T:EaslyCompiler.NumberLanguageConstant">
            <summary>
            Represents a number constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NumberLanguageConstant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.NumberLanguageConstant"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NumberLanguageConstant.#ctor(EaslyNumber.Number)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.NumberLanguageConstant"/> class.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="P:EaslyCompiler.NumberLanguageConstant.IsValueKnown">
            <summary>
            True if the constant value is known.
            </summary>
        </member>
        <member name="P:EaslyCompiler.NumberLanguageConstant.Value">
            <summary>
            The constant value, if known.
            </summary>
        </member>
        <member name="M:EaslyCompiler.NumberLanguageConstant.IsCompatibleWith(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant can be compared with this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.NumberLanguageConstant.IsConstantEqual(EaslyCompiler.ILanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.NumberLanguageConstant.IsConstantEqual(EaslyCompiler.INumberLanguageConstant)">
            <summary>
            Checks if another constant is equal to this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.NumberLanguageConstant.IsConstantGreater(EaslyCompiler.IOrderedLanguageConstant)">
            <summary>
            Checks if this instance is greater than another constant.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyCompiler.NumberLanguageConstant.IsConstantGreater(EaslyCompiler.INumberLanguageConstant)">
            <summary>
            Checks if another constant is greater than this instance.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="T:EaslyCompiler.ITaggedContract">
            <summary>
            A contract and its associated tag.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITaggedContract.Contract">
            <summary>
            The contract.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITaggedContract.Tag">
            <summary>
            The associated tag.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITaggedContract.HasTag">
            <summary>
            True if there is a valid tag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TaggedContract">
            <summary>
            A contract and its associated tag.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TaggedContract.#ctor(CompilerNode.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.TaggedContract"/> class.
            </summary>
            <param name="contract">The contract.</param>
        </member>
        <member name="M:EaslyCompiler.TaggedContract.#ctor(CompilerNode.IExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.TaggedContract"/> class.
            </summary>
            <param name="contract">The contract.</param>
            <param name="tag">The associated tag.</param>
        </member>
        <member name="P:EaslyCompiler.TaggedContract.Contract">
            <summary>
            The contract.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TaggedContract.Tag">
            <summary>
            The associated tag.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TaggedContract.HasTag">
            <summary>
            True if there is a valid tag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISourceTemplate.Path">
            <summary>
            Path to the source object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISourceTemplate.SourceType">
            <summary>
            Type of the source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISourceTemplate.StartingPoint">
            <summary>
            The starting point for the path.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ISourceTemplate.IsReady(EaslyCompiler.ISource,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="source">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="T:EaslyCompiler.ISourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TValue">Type of the source.</typeparam>
        </member>
        <member name="P:EaslyCompiler.ISourceTemplate`2.Path">
            <summary>
            Path to the source object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISourceTemplate`2.SourceType">
            <summary>
            Type of the source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISourceTemplate`2.StartingPoint">
            <summary>
            The starting point for the path.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ISourceTemplate`2.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="source">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.ISourceTemplate`2.GetSourceObject(`0,System.Boolean@)">
            <summary>
            Gets the source's current value.
            </summary>
            <param name="source">The node for which the value is requested.</param>
            <param name="isInterrupted">True is progressing through the path was interrupted.</param>
        </member>
        <member name="T:EaslyCompiler.SourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TValue">Type of the source.</typeparam>
        </member>
        <member name="M:EaslyCompiler.SourceTemplate`2.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.SourceTemplate`2"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="P:EaslyCompiler.SourceTemplate`2.Path">
            <summary>
            Path to the source object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.SourceTemplate`2.SourceType">
            <summary>
            Type of the source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.SourceTemplate`2.StartingPoint">
            <summary>
            The starting point for the path.
            </summary>
        </member>
        <member name="M:EaslyCompiler.SourceTemplate`2.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="source">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.SourceTemplate`2.GetSourceObject(`0,System.Boolean@)">
            <summary>
            Gets the source's current value.
            </summary>
            <param name="source">The node for which the value is requested.</param>
            <param name="isInterrupted">True is progressing through the path was interrupted.</param>
        </member>
        <member name="P:EaslyCompiler.SourceTemplate`2.PropertyPath">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.SourceTemplate`2.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IRuleTemplate">
            <summary>
            A rule to process an Easly node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IRuleTemplate.NodeType">
            <summary>
            Type on which a rule operates.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IRuleTemplate.ErrorList">
            <summary>
            List of errors found when applying this rule.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate.Clear">
            <summary>
            Clears the rule template state.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate.IsNoDestinationSet(EaslyCompiler.ISource)">
            <summary>
            Checks that no destination value has been set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate.AreAllSourcesReady(EaslyCompiler.ISource,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object}@)">
            <summary>
            Checks that all sources are ready.
            </summary>
            <param name="source">The node instance to check.</param>
            <param name="dataList">Optional data returned by each source.</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate.CheckConsistency(EaslyCompiler.ISource,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="source">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate.Apply(EaslyCompiler.ISource,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="source">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate.AreAllDestinationsSet(EaslyCompiler.ISource)">
            <summary>
            Checks that all destination values have been set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate.GetAllSourceTemplatesNotReady(EaslyCompiler.ISource)">
            <summary>
            Gets all sources that are not ready.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate.GetAllDestinationTemplatesNotSet(EaslyCompiler.ISource)">
            <summary>
            Gets all destinations that are not set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="T:EaslyCompiler.IRuleTemplate`2">
            <summary>
            A rule to process an Easly node.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRule">The rule type, used to ensure unicity of the static constructor.</typeparam>
        </member>
        <member name="P:EaslyCompiler.IRuleTemplate`2.NodeType">
            <summary>
            Type on which a rule operates.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IRuleTemplate`2.ErrorList">
            <summary>
            List of errors found when applying this rule.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate`2.Clear">
            <summary>
            Clears the rule template state.
            </summary>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate`2.IsNoDestinationSet(`0)">
            <summary>
            Checks that no destination value has been set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate`2.AreAllSourcesReady(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object}@)">
            <summary>
            Checks that all sources are ready.
            </summary>
            <param name="source">The node instance to check.</param>
            <param name="dataList">Optional data returned by each source.</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate`2.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="source">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate`2.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="source">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate`2.AreAllDestinationsSet(`0)">
            <summary>
            Checks that all destination values have been set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate`2.GetAllSourceTemplatesNotReady(`0)">
            <summary>
            Gets all sources that are not ready.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.IRuleTemplate`2.GetAllDestinationTemplatesNotSet(`0)">
            <summary>
            Gets all destinations that are not set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="T:EaslyCompiler.RuleTemplate`2">
            <summary>
            A rule to process an Easly node.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRule">The rule type, used to ensure unicity of the static constructor.</typeparam>
        </member>
        <member name="F:EaslyCompiler.RuleTemplate`2.Dot">
            <summary>
            The dot separator for property path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.RuleTemplate`2.SourceTemplateList">
            <summary>
            Sources this rule is watching.
            </summary>
        </member>
        <member name="P:EaslyCompiler.RuleTemplate`2.DestinationTemplateList">
            <summary>
            Destinations this rule applies to.
            </summary>
        </member>
        <member name="P:EaslyCompiler.RuleTemplate`2.NodeType">
            <summary>
            Type on which a rule operates.
            </summary>
        </member>
        <member name="P:EaslyCompiler.RuleTemplate`2.ErrorList">
            <summary>
            List of errors found when applying this rule.
            </summary>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.Clear">
            <summary>
            Clears the rule template state.
            </summary>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.IsNoDestinationSet(`0)">
            <summary>
            Checks that no destination value has been set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.AreAllSourcesReady(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object}@)">
            <summary>
            Checks that all sources are ready.
            </summary>
            <param name="source">The node instance to check.</param>
            <param name="dataList">Optional data returned by each source.</param>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.CheckConsistency(`0,System.Collections.Generic.IDictionary{EaslyCompiler.ISourceTemplate,System.Object},System.Object@)">
            <summary>
            Checks for errors before applying a rule.
            </summary>
            <param name="source">The node instance to check.</param>
            <param name="dataList">Optional data collected during inspection of sources.</param>
            <param name="data">Private data to give to Apply() upon return.</param>
            <returns>True if an error occured.</returns>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.Apply(`0,System.Object)">
            <summary>
            Applies the rule.
            </summary>
            <param name="source">The node instance to modify.</param>
            <param name="data">Private data from CheckConsistency().</param>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.AreAllDestinationsSet(`0)">
            <summary>
            Checks that all destinations values have been set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.GetAllSourceTemplatesNotReady(`0)">
            <summary>
            Gets all sources that are not ready.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.GetAllDestinationTemplatesNotSet(`0)">
            <summary>
            Gets all destinations that are not set.
            </summary>
            <param name="source">The node instance to check.</param>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.AddSourceError(EaslyCompiler.IError)">
            <summary>
            Adds an error.
            </summary>
            <param name="error">The error to add.</param>
        </member>
        <member name="M:EaslyCompiler.RuleTemplate`2.AddSourceErrorList(EaslyCompiler.IErrorList)">
            <summary>
            Adds several errors.
            </summary>
            <param name="sourceErrorList">The list of errors to add.</param>
        </member>
        <member name="T:EaslyCompiler.IInferenceEngine">
            <summary>
            Inference engine to process rules over a set of Easly nodes.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IInferenceEngine.RuleTemplateList">
            <summary>
            The set of rules to execute.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IInferenceEngine.SourceList">
            <summary>
            The list of nodes on which rules are checked and applied.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IInferenceEngine.ClassList">
            <summary>
            The list of classes to resolve.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IInferenceEngine.IsCycleErrorChecked">
            <summary>
            True if the engine should check for cyclic dependencies errors.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IInferenceEngine.Retries">
            <summary>
            Number of retries (debug only).
            </summary>
        </member>
        <member name="M:EaslyCompiler.IInferenceEngine.Solve(EaslyCompiler.IErrorList,System.String)">
            <summary>
            Execute all rules until the source list is exhausted.
            </summary>
            <param name="errorList">List of errors found.</param>
            <param name="passName">The pass name.</param>
            <returns>True if there is no source left to process.</returns>
        </member>
        <member name="T:EaslyCompiler.InferenceEngine">
            <summary>
            Inference engine to process rules over a set of Easly nodes.
            </summary>
        </member>
        <member name="F:EaslyCompiler.InferenceEngine.Dot">
            <summary>
            The dot separator for property path.
            </summary>
        </member>
        <member name="M:EaslyCompiler.InferenceEngine.#ctor(EaslyCompiler.IRuleTemplateList,System.Collections.Generic.IList{EaslyCompiler.ISource},System.Collections.Generic.IList{CompilerNode.IClass},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.InferenceEngine"/> class.
            </summary>
            <param name="ruleTemplateList">The set of rules to execute.</param>
            <param name="sourceList">The list of nodes on which rules are checked and applied.</param>
            <param name="classList">The list of classes to resolve.</param>
            <param name="isCycleErrorChecked">True if the engine should check for cyclic dependencies errors.</param>
            <param name="retries">Number of retries (debug only).</param>
        </member>
        <member name="P:EaslyCompiler.InferenceEngine.RuleTemplateList">
            <summary>
            The set of rules to execute.
            </summary>
        </member>
        <member name="P:EaslyCompiler.InferenceEngine.SourceList">
            <summary>
            The list of nodes on which rules are checked and applied.
            </summary>
        </member>
        <member name="P:EaslyCompiler.InferenceEngine.ClassList">
            <summary>
            The list of classes to resolve.
            </summary>
        </member>
        <member name="P:EaslyCompiler.InferenceEngine.IsCycleErrorChecked">
            <summary>
            True if the engine should check for cyclic dependencies errors.
            </summary>
        </member>
        <member name="P:EaslyCompiler.InferenceEngine.Retries">
            <summary>
            Number of retries (debug only).
            </summary>
        </member>
        <member name="M:EaslyCompiler.InferenceEngine.Solve(EaslyCompiler.IErrorList,System.String)">
            <summary>
            Execute all rules until the source list is exhausted.
            </summary>
            <param name="errorList">List of errors found.</param>
            <param name="passName">The pass name.</param>
            <returns>True if there is no source left to process.</returns>
        </member>
        <member name="M:EaslyCompiler.InferenceEngine.SolveWithRetry(EaslyCompiler.IErrorList,System.String)">
            <summary>
            Execute all rules until the source list is exhausted.
            </summary>
            <param name="errorList">List of errors found.</param>
            <param name="passName">The pass name.</param>
            <returns>True if there is no source left to process.</returns>
        </member>
        <member name="M:EaslyCompiler.InferenceEngine.IsNoDestinationSet">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.InferenceEngine.InferTemplates(System.Boolean@,System.Collections.Generic.IList{EaslyCompiler.ISource},EaslyCompiler.IErrorList)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.InferenceEngine.MoveResolvedClasses(System.Boolean@,System.Collections.Generic.IList{CompilerNode.IClass},System.Collections.Generic.IList{CompilerNode.IClass},System.Collections.Generic.IList{EaslyCompiler.ISource})">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.InferenceEngine.ResetSources">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.InferenceEngine.CheckTypesResolved(CompilerNode.IClass)">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.IConditionallyAssignedReferenceSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOptionalReference"/> where the assigned node has a property that must be an assigned <see cref="T:Easly.IOnceReference"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IConditionallyAssignedReferenceSourceTemplate`3">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOptionalReference`1"/> where the assigned node has a property that must be an assigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the optional node.</typeparam>
            <typeparam name="TValue">Type of the once reference value.</typeparam>
        </member>
        <member name="T:EaslyCompiler.ConditionallyAssignedReferenceSourceTemplate`3">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOptionalReference`1"/> where the assigned node has a property that must be an assigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the optional node.</typeparam>
            <typeparam name="TValue">Type of the once reference value.</typeparam>
        </member>
        <member name="M:EaslyCompiler.ConditionallyAssignedReferenceSourceTemplate`3.#ctor(System.String,System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ConditionallyAssignedReferenceSourceTemplate`3"/> class.
            </summary>
            <param name="path">Path to the <see cref="T:Easly.IOptionalReference`1"/> in the source object.</param>
            <param name="propertyName">The name of the <see cref="T:Easly.OnceReference`1"/> property to check in the optional node.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.ConditionallyAssignedReferenceSourceTemplate`3.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.ConditionallyAssignedReferenceSourceTemplate`3.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceTypeSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOnceReference"/> holding a type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceTypeSourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.OnceReference`1"/> holding a type.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the reference.</typeparam>
        </member>
        <member name="T:EaslyCompiler.OnceReferenceTypeSourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.OnceReference`1"/> holding a type.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the reference.</typeparam>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceTypeSourceTemplate`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.OnceReferenceTypeSourceTemplate`2"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceTypeSourceTemplate`2.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceResultSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOnceReference"/> in a node that can have a result.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceResultSourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.OnceReference`1"/> in a node that can have a result.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the reference.</typeparam>
        </member>
        <member name="T:EaslyCompiler.OnceReferenceResultSourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.OnceReference`1"/> in a node that can have a result.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the reference.</typeparam>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceResultSourceTemplate`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.OnceReferenceResultSourceTemplate`2"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceResultSourceTemplate`2.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="T:EaslyCompiler.ISealedListCollectionSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of nodes, each with a property that must be a sealed <see cref="T:Easly.ISealableList"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISealedListCollectionSourceTemplate`3">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of <typeparamref name="TItem"/> nodes, each with a property that must be a sealed <see cref="T:Easly.ISealableList`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TItem">Type of items in the source.</typeparam>
            <typeparam name="TValue">Type of <see cref="T:Easly.ISealableList"/> in each item.</typeparam>
        </member>
        <member name="T:EaslyCompiler.SealedListCollectionSourceTemplate`3">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of <typeparamref name="TItem"/> nodes, each with a property that must be a sealed <see cref="T:Easly.ISealableList`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TItem">Type of items in the source.</typeparam>
            <typeparam name="TValue">Type of <see cref="T:Easly.ISealableList"/> in each item.</typeparam>
        </member>
        <member name="M:EaslyCompiler.SealedListCollectionSourceTemplate`3.#ctor(System.String,System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.SealedListCollectionSourceTemplate`3"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="propertyName">The name of the <see cref="T:Easly.ISealableList`1"/> property to check in each items of the list.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.SealedListCollectionSourceTemplate`3.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.SealedListCollectionSourceTemplate`3.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceTableSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a hash table of nodes, each with a property that must be an assigned <see cref="T:Easly.IOnceReference"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceTableSourceTemplate`4">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a <typeparamref name="TKey"/>, <typeparamref name="TValue"/> hash table of nodes, each with a property that must be an assigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TKey">Type of the key for each item.</typeparam>
            <typeparam name="TValue">Type of the value for each item.</typeparam>
            <typeparam name="TRef">Type of the reference in each item value.</typeparam>
        </member>
        <member name="T:EaslyCompiler.OnceReferenceTableSourceTemplate`4">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a <typeparamref name="TKey"/>, <typeparamref name="TValue"/> hash table of nodes, each with a property that must be an assigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TKey">Type of the key for each item.</typeparam>
            <typeparam name="TValue">Type of the value for each item.</typeparam>
            <typeparam name="TRef">Type of the reference in each item value.</typeparam>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceTableSourceTemplate`4.#ctor(System.String,System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.OnceReferenceTableSourceTemplate`4"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="propertyName">The name of the <see cref="T:Easly.OnceReference`1"/> property to check in each item of the list.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceTableSourceTemplate`4.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceTableSourceTemplate`4.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceCollectionSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of nodes, each with a property that must be an assigned <see cref="T:Easly.IOnceReference"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceCollectionSourceTemplate`3">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of <typeparamref name="TItem"/> nodes, each with a property that must be an assigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TItem">Type of items in the source.</typeparam>
            <typeparam name="TValue">Type of <see cref="T:Easly.IOnceReference"/> in each item.</typeparam>
        </member>
        <member name="T:EaslyCompiler.OnceReferenceCollectionSourceTemplate`3">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of <typeparamref name="TItem"/> nodes, each with a property that must be an assigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TItem">Type of items in the source.</typeparam>
            <typeparam name="TValue">Type of <see cref="T:Easly.IOnceReference"/> in each item.</typeparam>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceCollectionSourceTemplate`3.#ctor(System.String,System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.OnceReferenceCollectionSourceTemplate`3"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="propertyName">The name of the <see cref="T:Easly.OnceReference`1"/> property to check in each items of the list.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceCollectionSourceTemplate`3.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceCollectionSourceTemplate`3.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IResolvedPathSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned collection of <see cref="T:CompilerNode.IIdentifier"/>, and each of them must be the name of a resolved type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IResolvedPathSourceTemplate`1">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned collection of <see cref="T:CompilerNode.IIdentifier"/>, and each of them must be the name of a resolved type.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
        </member>
        <member name="T:EaslyCompiler.ResolvedPathSourceTemplate`1">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned collection of <see cref="T:CompilerNode.IIdentifier"/>, and each of them must be the name of a resolved type.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
        </member>
        <member name="M:EaslyCompiler.ResolvedPathSourceTemplate`1.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ResolvedPathSourceTemplate`1"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.ResolvedPathSourceTemplate`1.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.ResolvedPathSourceTemplate`1.IsPathReady(System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.List{CompilerNode.IEntityDeclaration},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance},EaslyCompiler.IErrorList,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Checks if a path to a target type is made of resolved elements.
            </summary>
            <param name="path">The path to the target.</param>
            <param name="localEntityList">The list of available local variables.</param>
            <param name="localFeatureTable">The local feature table at the begining of the path.</param>
            <param name="featureTable">The feature table at the begining of the path.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedPathTypeName">The target type name upon return.</param>
            <param name="resolvedPathType">The target type upon return.</param>
            <returns>True if the path could be resolved to the target.</returns>
        </member>
        <member name="M:EaslyCompiler.ResolvedPathSourceTemplate`1.IsPathItemReady(CompilerNode.IIdentifier,CompilerNode.IIdentifier,System.Collections.Generic.List{CompilerNode.IEntityDeclaration}@,Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance}@,EaslyCompiler.IErrorList,System.Boolean@)">
            <summary>
            Checks if an intermediate step in a path to a target type is resolved.
            </summary>
            <param name="item">The current step.</param>
            <param name="nextItem">The step after <paramref name="item"/>.</param>
            <param name="localEntityList">The list of available local variables.</param>
            <param name="featureTable">The feature table to use.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="isInterrupted">Set if an error is found.</param>
            <returns>False to stop; True to continue with the next step.</returns>
        </member>
        <member name="M:EaslyCompiler.ResolvedPathSourceTemplate`1.IsLastPathItemReady(CompilerNode.IIdentifier,System.Collections.Generic.List{CompilerNode.IEntityDeclaration},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance},EaslyCompiler.IErrorList,System.Boolean@,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Checks if the last step in a path to a target type is resolved.
            </summary>
            <param name="item">The last step.</param>
            <param name="localEntityList">The list of available local variables.</param>
            <param name="featureTable">The feature table to use.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="isInterrupted">Set if an error is found.</param>
            <param name="resolvedPathTypeName">The target type name upon return.</param>
            <param name="resolvedPathType">The target type upon return.</param>
            <returns>True if the path step could be resolved, or an error was found.</returns>
        </member>
        <member name="T:EaslyCompiler.IConditionallyAssignedSealedTableSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOptionalReference"/> where the assigned node has a property that must be a sealed <see cref="T:Easly.ISealableDictionary"/> hash table.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IConditionallyAssignedSealedTableSourceTemplate`4">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOptionalReference`1"/> where the assigned node has a property that must be a sealed <see cref="T:Easly.ISealableDictionary`2"/> hash table.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the optional node.</typeparam>
            <typeparam name="TKey">Type of the hash table key.</typeparam>
            <typeparam name="TValue">Type of the hash table value.</typeparam>
        </member>
        <member name="T:EaslyCompiler.ConditionallyAssignedSealedTableSourceTemplate`4">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOptionalReference`1"/> where the assigned node has a property that must be a sealed <see cref="T:Easly.ISealableDictionary`2"/> hash table.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the optional node.</typeparam>
            <typeparam name="TKey">Type of the hash table key.</typeparam>
            <typeparam name="TValue">Type of the hash table value.</typeparam>
        </member>
        <member name="M:EaslyCompiler.ConditionallyAssignedSealedTableSourceTemplate`4.#ctor(System.String,System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.ConditionallyAssignedSealedTableSourceTemplate`4"/> class.
            </summary>
            <param name="path">Path to the <see cref="T:Easly.IOptionalReference`1"/> in the source object.</param>
            <param name="propertyName">The name of the <see cref="T:Easly.ISealableDictionary`2"/> property to check in the optional node.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.ConditionallyAssignedSealedTableSourceTemplate`4.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.ConditionallyAssignedSealedTableSourceTemplate`4.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISealedTableCollectionSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of nodes, each with a property that must be a sealed <see cref="T:Easly.ISealableDictionary"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISealedTableCollectionSourceTemplate`4">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of nodes, each with a property that must be a sealed <see cref="T:Easly.ISealableDictionary`2"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TItem">Type of items in the source.</typeparam>
            <typeparam name="TKey">Type of the key in each item.</typeparam>
            <typeparam name="TValue">Type of the value in each item.</typeparam>
        </member>
        <member name="T:EaslyCompiler.SealedTableCollectionSourceTemplate`4">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a collection of nodes, each with a property that must be a sealed <see cref="T:Easly.ISealableDictionary`2"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TItem">Type of items in the source.</typeparam>
            <typeparam name="TKey">Type of the key in each item.</typeparam>
            <typeparam name="TValue">Type of the value in each item.</typeparam>
        </member>
        <member name="M:EaslyCompiler.SealedTableCollectionSourceTemplate`4.#ctor(System.String,System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.SealedTableCollectionSourceTemplate`4"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="propertyName">The name of the <see cref="T:Easly.ISealableDictionary`2"/> property to check in each items of the list.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.SealedTableCollectionSourceTemplate`4.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="M:EaslyCompiler.SealedTableCollectionSourceTemplate`4.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISealedListSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a sealed <see cref="T:Easly.ISealableList"/> list.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISealedListSourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a sealed <see cref="T:Easly.ISealableList`1"/> list.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="T:EaslyCompiler.SealedListSourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a sealed <see cref="T:Easly.ISealableList`1"/> list.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:EaslyCompiler.SealedListSourceTemplate`2.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.SealedListSourceTemplate`2"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.SealedListSourceTemplate`2.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="T:EaslyCompiler.ISealedTableSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a sealed <see cref="T:Easly.ISealableDictionary"/> hash table.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ISealedTableSourceTemplate`3">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a sealed <see cref="T:Easly.ISealableDictionary`2"/> hash table.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="T:EaslyCompiler.SealedTableSourceTemplate`3">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a sealed <see cref="T:Easly.ISealableDictionary`2"/> hash table.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:EaslyCompiler.SealedTableSourceTemplate`3.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.SealedTableSourceTemplate`3"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.SealedTableSourceTemplate`3.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.IOnceReference"/>.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IOnceReferenceSourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the reference.</typeparam>
        </member>
        <member name="T:EaslyCompiler.OnceReferenceSourceTemplate`2">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is an assigned <see cref="T:Easly.OnceReference`1"/>.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
            <typeparam name="TRef">Type of the reference.</typeparam>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceSourceTemplate`2.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.OnceReferenceSourceTemplate`2"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.OnceReferenceSourceTemplate`2.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="T:EaslyCompiler.IStringSourceTemplate">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a non-null string.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IStringSourceTemplate`1">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a non-null string.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
        </member>
        <member name="T:EaslyCompiler.StringSourceTemplate`1">
            <summary>
            Specifies a source for a <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            The source is a non-null string.
            </summary>
            <typeparam name="TSource">The node type on which the rule applies.</typeparam>
        </member>
        <member name="M:EaslyCompiler.StringSourceTemplate`1.#ctor(System.String,EaslyCompiler.ITemplatePathStart{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.StringSourceTemplate`1"/> class.
            </summary>
            <param name="path">Path to the source object.</param>
            <param name="startingPoint">The starting point for the path.</param>
        </member>
        <member name="M:EaslyCompiler.StringSourceTemplate`1.IsReady(`0,System.Object@)">
            <summary>
            Checks if a node source is ready.
            </summary>
            <param name="node">The node for which the value is checked.</param>
            <param name="data">Optional data returned to the caller.</param>
        </member>
        <member name="T:EaslyCompiler.ITemplateScopeStart">
            <summary>
            The embedding scope starting point.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateScopeStart`1">
            <summary>
            The embedding scope starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="T:EaslyCompiler.TemplateScopeStart`1">
            <summary>
            The embedding scope starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="P:EaslyCompiler.TemplateScopeStart`1.Default">
            <summary>
            An instance that can be used in any source template.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TemplateScopeStart`1.PropertyType">
            <summary>
            The type of the starting point.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TemplateScopeStart`1.GetStart(`0)">
            <summary>
            Gets the starting point.
            </summary>
            <param name="source">The node for which a value is requested.</param>
        </member>
        <member name="M:EaslyCompiler.TemplateScopeStart`1.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateResultStart">
            <summary>
            The embedding property, indexer or query overload starting point.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateResultStart`1">
            <summary>
            The embedding property, indexer or query overload starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="T:EaslyCompiler.TemplateResultStart`1">
            <summary>
            The embedding property, indexer or query overload starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="P:EaslyCompiler.TemplateResultStart`1.Default">
            <summary>
            An instance that can be used in any source template.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TemplateResultStart`1.PropertyType">
            <summary>
            The type of the starting point.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TemplateResultStart`1.GetStart(`0)">
            <summary>
            Gets the starting point.
            </summary>
            <param name="source">The node for which a value is requested.</param>
        </member>
        <member name="M:EaslyCompiler.TemplateResultStart`1.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateGenericStart">
            <summary>
            The embedding generic starting point.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateGenericStart`1">
            <summary>
            The embedding generic starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="T:EaslyCompiler.TemplateGenericStart`1">
            <summary>
            The embedding generic starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="P:EaslyCompiler.TemplateGenericStart`1.Default">
            <summary>
            An instance that can be used in any source template.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TemplateGenericStart`1.PropertyType">
            <summary>
            The type of the starting point.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TemplateGenericStart`1.GetStart(`0)">
            <summary>
            Gets the starting point.
            </summary>
            <param name="source">The node for which a value is requested.</param>
        </member>
        <member name="M:EaslyCompiler.TemplateGenericStart`1.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateClassStart">
            <summary>
            The embedding class starting point.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateClassStart`1">
            <summary>
            The embedding class starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="T:EaslyCompiler.TemplateClassStart`1">
            <summary>
            The embedding class starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="P:EaslyCompiler.TemplateClassStart`1.Default">
            <summary>
            An instance that can be used in any source template.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TemplateClassStart`1.PropertyType">
            <summary>
            The type of the starting point.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TemplateClassStart`1.GetStart(`0)">
            <summary>
            Gets the starting point.
            </summary>
            <param name="source">The node for which a value is requested.</param>
        </member>
        <member name="M:EaslyCompiler.TemplateClassStart`1.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateNodeStart">
            <summary>
            The identity starting point.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplateNodeStart`1">
            <summary>
            The identity starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="T:EaslyCompiler.TemplateNodeStart`1">
            <summary>
            The identity starting point.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="P:EaslyCompiler.TemplateNodeStart`1.Default">
            <summary>
            An instance that can be used in any source template.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TemplateNodeStart`1.PropertyType">
            <summary>
            The type of the starting point.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TemplateNodeStart`1.GetStart(`0)">
            <summary>
            Gets the starting point.
            </summary>
            <param name="source">The node for which a value is requested.</param>
        </member>
        <member name="M:EaslyCompiler.TemplateNodeStart`1.ToString">
            <summary>
            Returns a string representing this instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplatePathStart">
            <summary>
            An interface to find the starting point of a source template path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITemplatePathStart.PropertyType">
            <summary>
            The type of the starting point.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITemplatePathStart`1">
            <summary>
            An interface to find the starting point of a source template path.
            </summary>
            <typeparam name="TSource">The node type for the starting point.</typeparam>
        </member>
        <member name="P:EaslyCompiler.ITemplatePathStart`1.PropertyType">
            <summary>
            The type of the starting point.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ITemplatePathStart`1.GetStart(`0)">
            <summary>
            Gets the starting point.
            </summary>
            <param name="source">The node for which a value is requested.</param>
        </member>
        <member name="T:EaslyCompiler.TemplateHelper">
            <summary>
            Helper class for source and destination templates.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TemplateHelper.BuildPropertyPath(System.Type,System.String,System.Collections.Generic.IList{System.Reflection.PropertyInfo})">
            <summary>
            Recursively build a path of properties from a base node to the final property.
            </summary>
            <param name="type">The current object type.</param>
            <param name="path">The remaining path to parse.</param>
            <param name="propertyPath">Accumulated properties in the path so far.</param>
        </member>
        <member name="M:EaslyCompiler.TemplateHelper.GetPropertyPathValue``2(``0,EaslyCompiler.ITemplatePathStart{``0},System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo},System.Boolean@)">
            <summary>
            Gets the current value at the end of a property path.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TValue">Type of the result.</typeparam>
            <param name="source">The node for which the value is requested.</param>
            <param name="startingPoint">The starting point to use.</param>
            <param name="propertyPath">Path from the starting point to the value to read.</param>
            <param name="isInterrupted">True is progressing through the path was interrupted.</param>
        </member>
        <member name="M:EaslyCompiler.TemplateHelper.ToCompilerType(System.Type)">
            <summary>
            Converts a type that references a base node to the same type referencing a compiler node.
            </summary>
            <param name="nodeType">The type to convert.</param>
        </member>
        <member name="T:EaslyCompiler.NameGuidPair">
            <summary>
            A pair of name and GUID.
            </summary>
        </member>
        <member name="P:EaslyCompiler.NameGuidPair.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.NameGuidPair.Guid">
            <summary>
            The GUID.
            </summary>
        </member>
        <member name="T:EaslyCompiler.INodeWithReplicatedBlocks">
            <summary>
            INode contains block list properties.
            </summary>
        </member>
        <member name="M:EaslyCompiler.INodeWithReplicatedBlocks.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="T:EaslyCompiler.INodeWithResult">
            <summary>
            Information about nodes that can have a result.
            </summary>
        </member>
        <member name="P:EaslyCompiler.INodeWithResult.ResolvedResultTypeName">
            <summary>
            The name of the resolved result type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.INodeWithResult.ResolvedResultType">
            <summary>
            The resolved result type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IPrecursorInstance">
            <summary>
            An instance of a precursor.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IPrecursorInstance.Ancestor">
            <summary>
            The ancestor type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IPrecursorInstance.Precursor">
            <summary>
            The precursor instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.PrecursorInstance">
            <summary>
            An instance of a precursor.
            </summary>
        </member>
        <member name="M:EaslyCompiler.PrecursorInstance.#ctor(CompilerNode.IClassType,EaslyCompiler.IFeatureInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.PrecursorInstance"/> class.
            </summary>
            <param name="ancestor">The ancestor type.</param>
            <param name="precursor">The precursor instance.</param>
        </member>
        <member name="P:EaslyCompiler.PrecursorInstance.Ancestor">
            <summary>
            The ancestor type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.PrecursorInstance.Precursor">
            <summary>
            The precursor instance.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ReplacePhase2MacroContext">
            <summary>
            A context for macro replacement.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ReplacePhase2MacroContext.CurrentClass">
            <summary>
            The current class.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ReplacePhase1MacroContext">
            <summary>
            A context for macro replacement.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ReplacePhase1MacroContext.CurrentClass">
            <summary>
            The current class.
            </summary>
        </member>
        <member name="T:EaslyCompiler.BuildInferenceSourceList">
            <summary>
            Context used when walking the node tree to build a list of sources for a <see cref="T:EaslyCompiler.InferenceEngine"/>.
            </summary>
        </member>
        <member name="M:EaslyCompiler.BuildInferenceSourceList.#ctor(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.BuildInferenceSourceList"/> class.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that will be used during inference.</param>
        </member>
        <member name="P:EaslyCompiler.BuildInferenceSourceList.RuleTemplateList">
            <summary>
            The list of rule templates that will be used during inference.
            </summary>
        </member>
        <member name="P:EaslyCompiler.BuildInferenceSourceList.SourceList">
            <summary>
            The resulting source list.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ReplicationContext">
            <summary>
            Context used when walking the node tree to replicate blocks.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ReplicationContext.GlobalReplicateTable">
            <summary>
            A table of subsitutions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ReplicationContext.ReplicateTable">
            <summary>
            A table of subsitutions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ReplicationContext.PatternTable">
            <summary>
            A table of pattern association. The key is the text to replace, the value the replacement.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IGetterSetterScopeHolder">
            <summary>
            Information about entities, where they are declared or used.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IGetterSetterScopeHolder.LocalGetScope">
            <summary>
            Entities local to a scope, getter only.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IGetterSetterScopeHolder.LocalSetScope">
            <summary>
            Entities local to a scope, setter only.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IGetterSetterScopeHolder.InnerGetScopes">
            <summary>
            List of scopes containing the current instance, getter only.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IGetterSetterScopeHolder.InnerSetScopes">
            <summary>
            List of scopes containing the current instance, setter only.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IGetterSetterScopeHolder.FullGetScope">
            <summary>
            All reachable entities, getter only.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IGetterSetterScopeHolder.FullSetScope">
            <summary>
            All reachable entities, setter only.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IScopeHolder">
            <summary>
            Information about entities, where they are declared or used.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IScopeHolder.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IScopeHolder.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IScopeHolder.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IScopeHolder.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ScopeHolder">
            <summary>
            Helper class for scopes.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ScopeHolder.RecursiveAdd(Easly.ISealableDictionary{System.String,CompilerNode.IScopeAttributeFeature},System.Collections.Generic.IList{EaslyCompiler.IScopeHolder})">
            <summary>
            Adds the content of a local scope to a full scope and all inner scopes inside.
            </summary>
            <param name="source">The local scope.</param>
            <param name="innerScopeList">The list of inner scopes.</param>
        </member>
        <member name="M:EaslyCompiler.ScopeHolder.RecursiveCheck(Easly.ISealableDictionary{System.String,CompilerNode.IScopeAttributeFeature},System.Collections.Generic.IList{EaslyCompiler.IScopeHolder},System.Collections.Generic.IList{System.String})">
            <summary>
            Finds all names that in conflict with others already defined in embedding scopes.
            </summary>
            <param name="source">The scope where the check is performed.</param>
            <param name="innerScopeList">The list of inner scopes.</param>
            <param name="conflictList">The list of conflicting names.</param>
        </member>
        <member name="M:EaslyCompiler.ScopeHolder.HasConflictingSingleAttributes(Easly.ISealableDictionary{System.String,CompilerNode.IScopeAttributeFeature},System.Collections.Generic.IList{EaslyCompiler.IScopeHolder},System.Collections.Generic.IList{CompilerNode.IClass},EaslyCompiler.ISource,EaslyCompiler.IErrorList)">
            <summary>
            Finds all single class attributes in conflict with others already defined in embedding scopes.
            </summary>
            <param name="scope">The scope where the check is performed.</param>
            <param name="innerScopeList">The list of inner scopes.</param>
            <param name="assignedSingleClassList">The list of assigned single class attributes.</param>
            <param name="source">The location where to report errors.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:EaslyCompiler.ScopeHolder.EmbeddingScope(EaslyCompiler.ISource)">
            <summary>
            Gets the scope embedding the provided one.
            </summary>
            <param name="source">The scope.</param>
        </member>
        <member name="T:EaslyCompiler.ISource">
            <summary>
            References to embedding nodes.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISource.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISource.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISource.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISource.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISource.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ISource.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ISource.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:EaslyCompiler.ISource.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:EaslyCompiler.ISource.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="T:EaslyCompiler.LanguageClasses">
            <summary>
            Info about language classes.
            </summary>
        </member>
        <member name="T:EaslyCompiler.StringValidation">
            <summary>
            Validation of source code strings
            </summary>
        </member>
        <member name="M:EaslyCompiler.StringValidation.IsValidIdentifier(System.String)">
            <summary>
            Checks if an identifier or name is valid.
            </summary>
            <param name="text">The text to check.</param>
            <returns>True if the identifier or name is valid.</returns>
        </member>
        <member name="M:EaslyCompiler.StringValidation.IsValidIdentifier(EaslyCompiler.ISource,System.String,System.String@,EaslyCompiler.IErrorStringValidity@)">
            <summary>
            Checks if an identifier or name is valid.
            </summary>
            <param name="source">Location to use when reporting errors.</param>
            <param name="text">The text to check.</param>
            <param name="validText">If valid, the normalized string to use instead of <paramref name="text"/>.</param>
            <param name="error">If not valid, the error to report.</param>
            <returns>True if the identifier or name is valid.</returns>
        </member>
        <member name="M:EaslyCompiler.StringValidation.IsValidManifestString(System.String)">
            <summary>
            Checks if a manifest string is valid.
            </summary>
            <param name="text">The text to check.</param>
            <returns>True if the manifest string is valid.</returns>
        </member>
        <member name="M:EaslyCompiler.StringValidation.IsValidManifestString(EaslyCompiler.ISource,System.String,System.String@,EaslyCompiler.IErrorStringValidity@)">
            <summary>
            Checks if a manifest string is valid.
            </summary>
            <param name="source">Location to use when reporting errors.</param>
            <param name="text">The text to check.</param>
            <param name="validText">If valid, the normalized string to use instead of <paramref name="text"/>.</param>
            <param name="error">If not valid, the error to report.</param>
            <returns>True if the manifest string is valid.</returns>
        </member>
        <member name="T:EaslyCompiler.IFeatureName">
            <summary>
            Name of a feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IFeatureName.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.FeatureName">
            <summary>
            Name of a feature.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FeatureName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.FeatureName"/> class.
            </summary>
            <param name="name">The feature name.</param>
        </member>
        <member name="P:EaslyCompiler.FeatureName.IndexerFeatureName">
            <summary>
            The unique name for an indexer.
            </summary>
        </member>
        <member name="P:EaslyCompiler.FeatureName.Name">
            <summary>
            The unique name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FeatureName.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:EaslyCompiler.FeatureName.TableContain``1(Easly.ISealableDictionary{EaslyCompiler.IFeatureName,``0},System.String,EaslyCompiler.IFeatureName@,``0@)">
            <summary>
            Checks if a table of feature names contains a name, and if so returns the corresponding <see cref="T:EaslyCompiler.IFeatureName"/> and associated value.
            </summary>
            <typeparam name="TValue">The type of the value associated to feature names in the table.</typeparam>
            <param name="table">The table.</param>
            <param name="name">The name to check.</param>
            <param name="key">The feature name found upon return.</param>
            <param name="value">The associated value.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpContractLocations">
            <summary>
            The mode to use to write a C# contract.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpContractLocations.Getter">
            <summary>
            The contract is a of a getter.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpContractLocations.Setter">
            <summary>
            The contract is a of a setter.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpContractLocations.Other">
            <summary>
            The contract is neither of a getter nor a setter.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpCurlyBracketsInsertions">
            <summary>
            The mode to use to write a C# scope.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpCurlyBracketsInsertions.Indifferent">
            <summary>
            The callee can handle it as they please.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpCurlyBracketsInsertions.Mandatory">
            <summary>
            The callee must insert them.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpCurlyBracketsInsertions.AlreadyInserted">
            <summary>
            The callee should not insert them.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpBodyFlags">
            <summary>
            The mode to use to write a C# body.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpBodyFlags.None">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpBodyFlags.MandatoryCurlyBrackets">
            <summary>
            Add a { and } around the body.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpBodyFlags.HasResult">
            <summary>
            Include the result.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpBodyFlags.HasValue">
            <summary>
            Use the 'value' keyword.
            </summary>
        </member>
        <member name="T:EaslyCompiler.IClassSplitting">
            <summary>
            Indicates how to split the class inheritance tree.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IClassSplitting.MustInherit">
            <summary>
            These classes must be inherited ans can't be merged with the base class using them.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IClassSplitting.MustInterface">
            <summary>
            These classes must have a corresponding interface and be used by the interface rather than directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.IClassSplitting.OtherParents">
            <summary>
            These classes can be used directly and merged with a base class.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ClassSplitting">
            <summary>
            Indicates how to split the class inheritance tree.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ClassSplitting.Create(System.Collections.Generic.IList{CompilerNode.IClass},EaslyCompiler.IErrorList,EaslyCompiler.IClassSplitting@)">
            <summary>
            Creates a <see cref="T:EaslyCompiler.ClassSplitting"/> object.
            </summary>
            <param name="classList">The list of classes to split.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="result">The created object upon return.</param>
        </member>
        <member name="P:EaslyCompiler.ClassSplitting.MustInherit">
            <summary>
            These classes must be inherited ans can't be merged with the base class using them.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ClassSplitting.MustInterface">
            <summary>
            These classes must have a corresponding interface and be used by the interface rather than directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ClassSplitting.OtherParents">
            <summary>
            These classes can be used directly and merged with a base class.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpConstructorTypes">
            <summary>
            How many constructors in the C# class.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpComputableExpression">
            <summary>
            Interface for expressions that can be compiled separately to obtain a constant value.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpComputableExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpComputableExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpExpressionAsConstant">
            <summary>
            Interface for expressions that can be used as the value of a constant feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpressionAsConstant.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpExpressionContext">
            <summary>
            Context when evaluating an expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpressionContext.DestinationNameList">
            <summary>
            Name to use for destination variables.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpressionContext.CompleteDestinationNameList">
            <summary>
            Copy of <see cref="P:EaslyCompiler.ICSharpExpressionContext.DestinationNameList"/> but with temporary variables added.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpressionContext.FilledDestinationTable">
            <summary>
            Table of filled destinations.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpressionContext.ReturnValue">
            <summary>
            The value returned directly. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpressionContext.ReturnValueIndex">
            <summary>
            Index of the value returned directly. -1 if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpressionContext.ResultListAsArgument">
            <summary>
            All returned results, presented as argument for a call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpExpressionContext.SetSingleReturnValue(System.String)">
            <summary>
            Sets the single return value of an expression.
            </summary>
            <param name="value">The expression return value in plain text.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpExpressionContext.SetMultipleResult(System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Sets results of an expression, with one of them the returned value.
            </summary>
            <param name="outgoingResultList">The list of results.</param>
            <param name="returnValueIndex">The expression return value in plain text.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpExpressionContext">
            <summary>
            Context when evaluating an expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpExpressionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpExpressionContext"/> class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpExpressionContext.#ctor(System.Collections.Generic.IList{EaslyCompiler.ICSharpVariableContext})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpExpressionContext"/> class.
            </summary>
            <param name="destinationNameList">The list of variables to use as destination.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpExpressionContext.DestinationNameList">
            <summary>
            Name to use for destination variables.
            Contains names that can be assigned directly as 'out' results. May contain less names than results, and these extra results are allowed to be lost.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpressionContext.CompleteDestinationNameList">
            <summary>
            Copy of <see cref="P:EaslyCompiler.CSharpExpressionContext.DestinationNameList"/> but with temporary variables added.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpressionContext.FilledDestinationTable">
            <summary>
            Table of filled destinations.
            Key: all strings in DestinationNameList, plus temporary variables.
            Value: Variable names or expressions in plain text. If null, it's in <see cref="P:EaslyCompiler.CSharpExpressionContext.ReturnValue"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpressionContext.ReturnValue">
            <summary>
            The value returned directly. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpressionContext.ReturnValueIndex">
            <summary>
            Index of the value returned directly. -1 if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpressionContext.ResultListAsArgument">
            <summary>
            All returned results, presented as argument for a call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpExpressionContext.SetSingleReturnValue(System.String)">
            <summary>
            Sets the single return value of an expression.
            </summary>
            <param name="value">The expression return value in plain text.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpExpressionContext.SetMultipleResult(System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Sets results of an expression, with one of them the returned value.
            </summary>
            <param name="outgoingResultList">The list of results.</param>
            <param name="returnValueIndex">The expression return value in plain text.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpFeatureCall">
            <summary>
            Feature call information.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeatureCall.ParameterList">
            <summary>
            The list of parameters for the selected overload.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeatureCall.ResultList">
            <summary>
            The list of results for the selected overload.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeatureCall.ArgumentList">
            <summary>
            The list of arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeatureCall.Count">
            <summary>
            The number of parameters and arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeatureCall.ArgumentStyle">
            <summary>
            The argument passing style.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpFeatureCall">
            <summary>
            Feature call information.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFeatureCall.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.IFeatureCall)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpFeatureCall"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">Details of the feature call.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpFeatureCall.ParameterList">
            <summary>
            The list of parameters for the selected overload.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeatureCall.ResultList">
            <summary>
            The list of results for the selected overload.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeatureCall.ArgumentList">
            <summary>
            The list of arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeatureCall.Count">
            <summary>
            The number of parameters and arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeatureCall.ArgumentStyle">
            <summary>
            The argument passing style.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeatureCall.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFeatureCall.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpContext">
            <summary>
            A context for creating C# nodes.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpContext.GetClass(CompilerNode.IClass)">
            <summary>
            Gets the C# class from the source class.
            </summary>
            <param name="sourceClass">The source class.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpContext.GetFeature(EaslyCompiler.ICompiledFeature)">
            <summary>
            Gets the C# feature from the source feature.
            </summary>
            <param name="sourceFeature">The source feature.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpContext.GetGeneric(CompilerNode.IGeneric)">
            <summary>
            Gets the C# generic from the source generic.
            </summary>
            <param name="sourceGeneric">The source generic.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpContext">
            <summary>
            A context for creating C# nodes.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpContext.#ctor(System.Collections.Generic.IDictionary{CompilerNode.IClass,EaslyCompiler.ICSharpClass},System.Collections.Generic.IDictionary{EaslyCompiler.ICompiledFeature,EaslyCompiler.ICSharpFeature})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpContext"/> class.
            </summary>
            <param name="classTable">The table of all classes.</param>
            <param name="featureTable">The table of all known features.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpContext.ClassTable">
            <summary>
            The table of all classes.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpContext.FeatureTable">
            <summary>
            The table of all known features.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpContext.GetClass(CompilerNode.IClass)">
            <summary>
            Gets the C# class from the source class.
            </summary>
            <param name="sourceClass">The source class.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpContext.GetFeature(EaslyCompiler.ICompiledFeature)">
            <summary>
            Gets the C# feature from the source feature.
            </summary>
            <param name="sourceFeature">The source feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpContext.GetGeneric(CompilerNode.IGeneric)">
            <summary>
            Gets the C# generic from the source generic.
            </summary>
            <param name="sourceGeneric">The source generic.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpFeatureTextTypes">
            <summary>
            The mode to use to write a C# feature.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpFeatureTextTypes.Interface">
            <summary>
            Write the feature interface.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpFeatureTextTypes.Implementation">
            <summary>
            Write the feature implementation.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpLanguageClasses">
            <summary>
            C# built-in classes and types.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpNumberTypes">
            <summary>
            The type of a C# number type.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpNumberTypes.NotApplicable">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpNumberTypes.Unknown">
            <summary>
            Not known yet.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpNumberTypes.Integer">
            <summary>
            An integer number.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpNumberTypes.Real">
            <summary>
            A real number.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpOutputNode">
            <summary>
            Nodes that can produce C# source code.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOutputNode.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpOutputNode.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpOutputNode">
            <summary>
            Nodes that can produce C# source code.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpOutputNode.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpOutputNode.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpTypeWithFeature">
            <summary>
            Interface for types that have accessible features (class type and generic type with constraints).
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpTypeWithFeature.ConformingClassTypeList">
            <summary>
            The list of class types this type conforms to.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpUsingCollection">
            <summary>
            An interface to add using directives to a collection.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUsingCollection.DefaultNamespace">
            <summary>
            Gets the default namespace.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUsingCollection.SourceFileName">
            <summary>
            Gets the source file name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUsingCollection.OutputFolder">
            <summary>
            Gets the output folder.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUsingCollection.AttachmentMap">
            <summary>
            Map of attached variable names.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpUsingCollection.AddUsing(System.String)">
            <summary>
            Adds a using directive to write separately.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpUsingCollection.AddAttachment(System.String,System.String)">
            <summary>
            Adds a name and its corresponding attached name to the attachment map.
            </summary>
            <param name="name">The name.</param>
            <param name="nameAttached">The corresponding attached name.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpUsingCollection.RemoveAttachment(System.String)">
            <summary>
            Removes a name and its corresponding attached name from the attachment map.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpUsingCollection.GetTemporaryName">
            <summary>
            Gets a temporary name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpUsingCollection.GetTemporaryName(System.String)">
            <summary>
            Gets a temporary name from a source name.
            </summary>
            <param name="sourceName">The source name.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpVariableContext">
            <summary>
            Context for a variable used in expressions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpVariableContext.Name">
            <summary>
            The variable name
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpVariableContext.IsDeclared">
            <summary>
            True if the variable is already declared.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpVariableContext">
            <summary>
            Context for a variable used in expressions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpVariableContext.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpVariableContext"/> class.
            </summary>
            <param name="name">The variable name.</param>
            <param name="isDeclared">True if the variable is already declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpVariableContext.Name">
            <summary>
            The variable name
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpVariableContext.IsDeclared">
            <summary>
            True if the variable is already declared.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAssignmentArgument">
            <summary>
            A C# argument.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssignmentArgument.Source">
            <summary>
            The Easly argument from which the C# argument is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssignmentArgument.ParameterNameList">
            <summary>
            List of assigned parameters.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpAssignmentArgument">
            <summary>
            A C# argument.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAssignmentArgument.Create(EaslyCompiler.ICSharpContext,CompilerNode.IAssignmentArgument)">
            <summary>
            Creates a new C# argument.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly argument from which the C# argument is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAssignmentArgument.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IAssignmentArgument)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAssignmentArgument"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly argument from which the C# argument is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAssignmentArgument.Source">
            <summary>
            The Easly argument from which the C# argument is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAssignmentArgument.ParameterNameList">
            <summary>
            List of assigned parameters.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpPositionalArgument">
            <summary>
            A C# argument.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPositionalArgument.Source">
            <summary>
            The Easly argument from which the C# argument is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpPositionalArgument">
            <summary>
            A C# argument.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPositionalArgument.Create(EaslyCompiler.ICSharpContext,CompilerNode.IPositionalArgument)">
            <summary>
            Creates a new C# argument.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly argument from which the C# argument is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPositionalArgument.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IPositionalArgument)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpPositionalArgument"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly argument from which the C# argument is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPositionalArgument.Source">
            <summary>
            The Easly argument from which the C# argument is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpArgument">
            <summary>
            A C# argument.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpArgument.Source">
            <summary>
            The Easly argument from which the C# argument is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpArgument.SourceExpression">
            <summary>
            The source expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpArgument">
            <summary>
            A C# argument.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpArgument.Create(EaslyCompiler.ICSharpContext,CompilerNode.IArgument)">
            <summary>
            Creates a new C# argument.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly argument from which the C# argument is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpArgument.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IArgument)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpArgument"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly argument from which the C# argument is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpArgument.Source">
            <summary>
            The Easly argument from which the C# argument is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpArgument.SourceExpression">
            <summary>
            The source expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpArgument.CSharpArgumentList(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,EaslyCompiler.ICSharpFeatureCall)">
            <summary>
            Gets the source code of arguments of a feature call.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="featureCall">Details of the call.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpArgument.CSharpArgumentList(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,EaslyCompiler.ICSharpFeatureCall,System.Int32,System.Boolean,System.String@,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Gets the source code of arguments of a feature call.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="featureCall">Details of the call.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
            <param name="isAgentCall">True if the call is for an agent.</param>
            <param name="callText">The string to use for a call upon return.</param>
            <param name="outgoingResultList">The list of results.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpArgument.BuildParameterList(EaslyCompiler.ICSharpUsingCollection,System.Collections.Generic.IList{EaslyCompiler.ICSharpParameter},System.String@,System.String@)">
            <summary>
            Builds a list of parameters, with and without their type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="parameterList">The list of parameters.</param>
            <param name="parameterListText">The list of parameters with type upon return.</param>
            <param name="parameterNameListText">The list of parameters without type upon return.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpArgument.BuildParameterList(EaslyCompiler.ICSharpUsingCollection,System.Collections.Generic.IList{EaslyCompiler.ICSharpParameter},System.Collections.Generic.IList{EaslyCompiler.ICSharpParameter},EaslyCompiler.CSharpFeatureTextTypes,System.String@,System.String@,System.String@)">
            <summary>
            Builds a list of parameters, with and without their type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="parameterList">The list of parameters.</param>
            <param name="resultList">The list of results.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="parameterListText">The list of parameters with type upon return.</param>
            <param name="parameterNameListText">The list of parameters without type upon return.</param>
            <param name="resultTypeText">The type text upon return.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpArgument.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpArgument.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpArgument.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBody.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBody.RequireList">
            <summary>
            The list of require C# assertions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBody.EnsureList">
            <summary>
            The list of ensure C# assertions.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpBody.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,EaslyCompiler.ICompiledBody)">
            <summary>
            Creates a new C# body.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpBody.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IBody)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpBody"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBody.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBody.RequireList">
            <summary>
            The list of require C# assertions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBody.EnsureList">
            <summary>
            The list of ensure C# assertions.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpDeferredBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpDeferredBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpDeferredBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpDeferredBody.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IDeferredBody)">
            <summary>
            Creates a new C# body.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpDeferredBody.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IDeferredBody)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpDeferredBody"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpDeferredBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpPrecursorBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpPrecursorBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorBody.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IPrecursorBody)">
            <summary>
            Creates a new C# body.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorBody.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IPrecursorBody)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpPrecursorBody"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpExternBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExternBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpExternBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpExternBody.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IExternBody)">
            <summary>
            Creates a new C# body.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpExternBody.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IExternBody)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpExternBody"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpExternBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpEffectiveBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEffectiveBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEffectiveBody.BodyInstructionList">
            <summary>
            The list of instructions in the body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEffectiveBody.EntityDeclarationList">
            <summary>
            The list of local variables.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpEffectiveBody.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpBodyFlags,System.String,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Writes down the body source code.
            </summary>
            <param name="writer">The stream on which to write down.</param>
            <param name="flags">Some flags.</param>
            <param name="resultType">Type of the result, if any.</param>
            <param name="skipFirstInstruction">Skip the first instruction.</param>
            <param name="initialisationStringList">List of initializations.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpEffectiveBody">
            <summary>
            A C# body.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEffectiveBody.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IEffectiveBody)">
            <summary>
            Creates a new C# body.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpEffectiveBody.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IEffectiveBody)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpEffectiveBody"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly body from which the C# body is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpEffectiveBody.Source">
            <summary>
            The Easly body from which the C# body is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpEffectiveBody.BodyInstructionList">
            <summary>
            The list of instructions in the body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpEffectiveBody.EntityDeclarationList">
            <summary>
            The list of local variables.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEffectiveBody.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpBodyFlags,System.String,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Writes down the body source code.
            </summary>
            <param name="writer">The stream on which to write down.</param>
            <param name="flags">Some flags.</param>
            <param name="resultType">Type of the result, if any.</param>
            <param name="skipFirstInstruction">Skip the first instruction.</param>
            <param name="initialisationStringList">List of initializations.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpEffectiveBody.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEffectiveBody.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpEffectiveBody.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAttachment">
            <summary>
            A C# attachment node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttachment.ParentInstruction">
            <summary>
            The parent instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttachment.AttachTypeList">
            <summary>
            The list of attaching types.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttachment.Instructions">
            <summary>
            The attachment instructions;
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpAttachment.WriteCSharpIf(EaslyCompiler.ICSharpWriter,System.Int32,System.Collections.Generic.IList{EaslyCompiler.ICSharpVariableContext},EaslyCompiler.ICSharpExpressionContext)">
            <summary>
            Writes down the C# attachment.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="index">Index of the attachment in the list.</param>
            <param name="entityNameList">The list of entities to attach.</param>
            <param name="expressionContext">The attached expression context.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpAttachment.WriteCSharpCase(EaslyCompiler.ICSharpWriter,System.String)">
            <summary>
            Writes down the C# attachment.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="destinationEntity">The entity to attach.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpAttachment">
            <summary>
            A C# attachment node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachment.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpAttachmentInstruction,CompilerNode.IAttachment)">
            <summary>
            Create a new C# attachment.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentInstruction">The parent instruction.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachment.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpAttachmentInstruction,CompilerNode.IAttachment)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAttachment"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentInstruction">The parent instruction.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachment.ParentInstruction">
            <summary>
            The parent instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachment.AttachTypeList">
            <summary>
            The list of attaching types.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachment.Instructions">
            <summary>
            The attachment instructions;
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachment.WriteCSharpIf(EaslyCompiler.ICSharpWriter,System.Int32,System.Collections.Generic.IList{EaslyCompiler.ICSharpVariableContext},EaslyCompiler.ICSharpExpressionContext)">
            <summary>
            Writes down the C# attachment.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="index">Index of the attachment in the list.</param>
            <param name="entityNameList">The list of entities to attach.</param>
            <param name="expressionContext">The attached expression context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachment.WriteCSharpCase(EaslyCompiler.ICSharpWriter,System.String)">
            <summary>
            Writes down the C# attachment.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="destinationEntity">The entity to attach.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachment.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachment.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpAttachment.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpCommandOverloadType">
            <summary>
            A C# command overload type node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandOverloadType.ParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpCommandOverloadType">
            <summary>
            A C# command overload type node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandOverloadType.Create(EaslyCompiler.ICSharpContext,CompilerNode.ICommandOverloadType,EaslyCompiler.ICSharpClass)">
            <summary>
            Create a new C# overload.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="owner">The class where the overload is declared.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandOverloadType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.ICommandOverloadType,EaslyCompiler.ICSharpClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpCommandOverloadType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="owner">The class where the overload is declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandOverloadType.ParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpQueryOverloadType">
            <summary>
            A C# query overload type node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryOverloadType.ParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryOverloadType.ResultList">
            <summary>
            The list of results.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpQueryOverloadType.GetOutputFormat(System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpQueryOverloadType">
            <summary>
            A C# query overload type node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverloadType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IQueryOverloadType,EaslyCompiler.ICSharpClass)">
            <summary>
            Create a new C# overload.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="owner">The class where the overload is declared.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverloadType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IQueryOverloadType,EaslyCompiler.ICSharpClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpQueryOverloadType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="owner">The class where the overload is declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryOverloadType.ParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryOverloadType.ResultList">
            <summary>
            The list of results.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverloadType.GetOutputFormat(System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverloadType.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,System.Boolean,System.String,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# overload of a feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="isOverride">True if the feature is an override.</param>
            <param name="nameString">The composed feature name.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isConstructor">True if the feature is a constructor.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpWith">
            <summary>
            A C# case node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpWith.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpWith.ConstantList">
            <summary>
            The list of case constants.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpWith.Instructions">
            <summary>
            The case instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpWith.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# conditional instructions.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpWith">
            <summary>
            A C# case node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWith.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IWith)">
            <summary>
            Create a new C# conditional.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpWith.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IWith)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpWith"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpWith.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpWith.ConstantList">
            <summary>
            The list of case constants.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpWith.Instructions">
            <summary>
            The conditional instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWith.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# conditional instructions.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpWith.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWith.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpWith.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpConditional">
            <summary>
            A C# conditional node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConditional.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConditional.BooleanExpression">
            <summary>
            The condition.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConditional.Instructions">
            <summary>
            The conditional instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpConditional.WriteCSharp(EaslyCompiler.ICSharpWriter,System.Boolean)">
            <summary>
            Writes down the C# conditional instructions.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="isElseIf">True if the conditional is not the first.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpConditional">
            <summary>
            A C# conditional node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpConditional.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IConditional)">
            <summary>
            Create a new C# conditional.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpConditional.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IConditional)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpConditional"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpConditional.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpConditional.BooleanExpression">
            <summary>
            The condition.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpConditional.Instructions">
            <summary>
            The conditional instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpConditional.WriteCSharp(EaslyCompiler.ICSharpWriter,System.Boolean)">
            <summary>
            Writes down the C# conditional instructions.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="isElseIf">True if the conditional is not the first.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpConditional.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpConditional.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpConditional.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpScope">
            <summary>
            A C# scope node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScope.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScope.EntityDeclarationList">
            <summary>
            The list of local variables.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScope.InstructionList">
            <summary>
            The list of instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpScope.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpCurlyBracketsInsertions,System.Boolean)">
            <summary>
            Writes down the C# scope.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="curlyBracketsInsertion">The mode to use to write the C# scope..</param>
            <param name="endWithBreak">Add a break instruction at the end.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpScope">
            <summary>
            A C# scope node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpScope.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IScope)">
            <summary>
            Create a new C# scope.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScope.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IScope)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpScope"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpScope.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpScope.EntityDeclarationList">
            <summary>
            The list of local variables.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpScope.InstructionList">
            <summary>
            The list of instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpScope.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpCurlyBracketsInsertions,System.Boolean)">
            <summary>
            Writes down the C# scope.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="curlyBracketsInsertion">The mode to use to write the C# scope..</param>
            <param name="endWithBreak">Add a break instruction at the end.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpScope.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpScope.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpScope.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpContinuation">
            <summary>
            A C# continuation node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpContinuation.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpContinuation.Instructions">
            <summary>
            The continuation instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpContinuation.CleanupList">
            <summary>
            The list of cleanup instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpContinuation.WriteCSharpInstructions(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# continuation instructions.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpContinuation.WriteCSharpCleanupInstructions(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# continuation cleanup instructions.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpContinuation">
            <summary>
            A C# continuation node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpContinuation.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IContinuation)">
            <summary>
            Create a new C# continuation.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpContinuation.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpContinuation"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpContinuation.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpContinuation.Instructions">
            <summary>
            The continuation instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpContinuation.CleanupList">
            <summary>
            The list of cleanup instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpContinuation.WriteCSharpInstructions(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# continuation instructions.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpContinuation.WriteCSharpCleanupInstructions(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# continuation cleanup instructions.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpContinuation.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpContinuation.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpContinuation.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpClass">
            <summary>
            A C# class node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.ValidClassName">
            <summary>
            The valid class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.ValidSourceName">
            <summary>
            The valid source name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.GenericList">
            <summary>
            The list of class generics.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.InheritanceList">
            <summary>
            The list of class inheritances.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.TypedefList">
            <summary>
            The list of class typedefs.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.DiscreteList">
            <summary>
            The list of class discretes.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.InvariantList">
            <summary>
            The list of class invariants.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.Type">
            <summary>
            The corresponding type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.BaseClass">
            <summary>
            The base class. Can be null if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.FeatureList">
            <summary>
            The list of class features.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.InheritedFeatureList">
            <summary>
            The list of inhrited features.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.UsingClauseList">
            <summary>
            The list of using clauses.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.DelegateTable">
            <summary>
            The table of implicit delegates.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.TypedefDelegateTable">
            <summary>
            The table of explicit delegates.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.InitializedObjectList">
            <summary>
            List of initialized objects.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.IsSharedName">
            <summary>
            True if the class shares its name with another from a different 'From' source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.HasCheckInvariantMethod">
            <summary>
            True if the class implements the method to check the class invariant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.HasCheckInvariant">
            <summary>
            True if the class implements or inherits a method to check the class invariant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.IsParameterizedSingleton">
            <summary>
            True if the class is a singleton with generic parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.IsUnparameterizedSingleton">
            <summary>
            True if the class is a singleton with no generic parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.ClassConstructorType">
            <summary>
            Gets how many contructors the class has.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.IsDotNetEventClass">
            <summary>
            True if the class is a .NET event.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.InheritFromDotNetEvent">
            <summary>
            True if the class inherits from one of the .NET events.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.HasDiscreteConstants">
            <summary>
            True if the class has some discrete, and all of them have explicit values.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClass.HasDiscreteWithUnkownValue">
            <summary>
            True if the class has some discrete, and some of them don't have an explicit value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.SetBaseClass(EaslyCompiler.ICSharpClass)">
            <summary>
            Sets the base class.
            </summary>
            <param name="baseClass">The base class.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.SetAncestorClasses(System.Collections.Generic.IDictionary{CompilerNode.IClass,EaslyCompiler.ICSharpClass})">
            <summary>
            Sets the base class.
            </summary>
            <param name="classTable">The table of all classes.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.SetFeatureList(EaslyCompiler.ICSharpContext,System.Collections.Generic.IList{EaslyCompiler.ICSharpFeature},System.Collections.Generic.IList{EaslyCompiler.ICSharpFeature})">
            <summary>
            Sets the list of class features.
            </summary>
            <param name="context">The creation context.</param>
            <param name="featureList">The list of features.</param>
            <param name="inheritedFeatureList">The list of inherited features.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.SetIsSharedName">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpClass.IsSharedName"/> property.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.CheckOverrides">
            <summary>
            Find features that are overrides and mark them as such.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.CheckForcedReadWrite(System.Collections.Generic.IDictionary{EaslyCompiler.ICompiledFeature,EaslyCompiler.ICSharpFeature},System.Boolean@)">
            <summary>
            Checks if a feature in the class must be set as both read and write.
            </summary>
            <param name="globalFeatureTable">The table of all known features.</param>
            <param name="isChanged">True if a feature was changed.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.CheckSideBySideAttributes">
            <summary>
            Checks if properties of the class should declare a side-by-side private field of the same type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.CheckInheritSideBySideAttributes(System.Collections.Generic.IDictionary{EaslyCompiler.ICompiledFeature,EaslyCompiler.ICSharpFeature})">
            <summary>
            Checks if properties of the class should declare a side-by-side private field of the same type due to inherited ancestors.
            </summary>
            <param name="globalFeatureTable">The table of all known features.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.CreateDelegates">
            <summary>
            Creates delegates needed by the class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.Write(System.String,System.String,System.String,EaslyCompiler.ICSharpFeature)">
            <summary>
            Writes down the class source code.
            </summary>
            <param name="folder">The output root folder.</param>
            <param name="defaultNamespace">Namespace for the output code.</param>
            <param name="sourceFileName">The source file name.</param>
            <param name="singledClassFeature">The singled feature. can be null.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.FullClassName2CSharpClassName(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Gets the full name of a class.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format to use.</param>
            <param name="cSharpNamespaceFormat">The namespace format to use.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpClass.BasicClassName2CSharpClassName(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Gets the name of a class.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format to use.</param>
            <param name="cSharpNamespaceFormat">The namespace format to use.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpClass">
            <summary>
            A C# class node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.Create(CompilerNode.IClass)">
            <summary>
            Creates a new C# class.
            </summary>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.#ctor(CompilerNode.IClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpClass"/> class.
            </summary>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.ValidClassName">
            <summary>
            The valid class name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.ValidSourceName">
            <summary>
            The valid source name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.GenericList">
            <summary>
            The list of class generics.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.InheritanceList">
            <summary>
            The list of class inheritances.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.TypedefList">
            <summary>
            The list of class typedefs.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.DiscreteList">
            <summary>
            The list of class discretes.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.InvariantList">
            <summary>
            The list of class invariants.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.Type">
            <summary>
            The corresponding type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.BaseClass">
            <summary>
            The base class. Can be null if none.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.FeatureList">
            <summary>
            The list of class features.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.InheritedFeatureList">
            <summary>
            The list of inhrited features.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.UsingClauseList">
            <summary>
            The list of using clauses.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.DelegateTable">
            <summary>
            The table of implicit delegates.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.TypedefDelegateTable">
            <summary>
            The table of explicit delegates.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.InitializedObjectList">
            <summary>
            List of initialized objects.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.IsSharedName">
            <summary>
            True if the class shares its name with another from a different 'From' source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.HasCheckInvariantMethod">
            <summary>
            True if the class implements the method to check the class invariant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.HasCheckInvariant">
            <summary>
            True if the class implements or inherits a method to check the class invariant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.IsParameterizedSingleton">
            <summary>
            True if the class is a singleton with generic parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.IsUnparameterizedSingleton">
            <summary>
            True if the class is a singleton with no generic parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.ClassConstructorType">
            <summary>
            Gets how many contructors the class has.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.IsDotNetEventClass">
            <summary>
            True if the class is a .NET event.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.InheritFromDotNetEvent">
            <summary>
            True if the class inherits from one of the .NET events.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.HasDiscreteConstants">
            <summary>
            True if the class has some discrete, and all of them have explicit values.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.HasDiscreteWithUnkownValue">
            <summary>
            True if the class has some discrete, and some of them don't have an explicit value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.IsLanguageClass(CompilerNode.IClass)">
            <summary>
            Checks if a class is one of the language classes.
            </summary>
            <param name="sourceClass">The class to check.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.SetBaseClass(EaslyCompiler.ICSharpClass)">
            <summary>
            Sets the base class.
            </summary>
            <param name="baseClass">The base class.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.SetAncestorClasses(System.Collections.Generic.IDictionary{CompilerNode.IClass,EaslyCompiler.ICSharpClass})">
            <summary>
            Sets the base class.
            </summary>
            <param name="classTable">The table of all classes.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.SetFeatureList(EaslyCompiler.ICSharpContext,System.Collections.Generic.IList{EaslyCompiler.ICSharpFeature},System.Collections.Generic.IList{EaslyCompiler.ICSharpFeature})">
            <summary>
            Sets the list of class features.
            </summary>
            <param name="context">The creation context.</param>
            <param name="featureList">The list of features.</param>
            <param name="inheritedFeatureList">The list of inherited features.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.SetIsSharedName">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpClass.IsSharedName"/> property.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.CheckOverrides">
            <summary>
            Find features that are overrides and mark them as such.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.CheckForcedReadWrite(System.Collections.Generic.IDictionary{EaslyCompiler.ICompiledFeature,EaslyCompiler.ICSharpFeature},System.Boolean@)">
            <summary>
            Checks if a feature in the class must be set as both read and write.
            </summary>
            <param name="globalFeatureTable">The table of all known features.</param>
            <param name="isChanged">True if a feature was changed.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.CheckSideBySideAttributes">
            <summary>
            Checks if properties of the class should declare a side-by-side private field of the same type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.CheckInheritSideBySideAttributes(System.Collections.Generic.IDictionary{EaslyCompiler.ICompiledFeature,EaslyCompiler.ICSharpFeature})">
            <summary>
            Checks if properties of the class should declare a side-by-side private field of the same type due to inherited ancestors.
            </summary>
            <param name="globalFeatureTable">The table of all known features.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.CreateDelegates">
            <summary>
            Creates delegates needed by the class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.Write(System.String,System.String,System.String,EaslyCompiler.ICSharpFeature)">
            <summary>
            Writes down the class source code.
            </summary>
            <param name="rootFolder">The output root folder.</param>
            <param name="defaultNamespace">Namespace for the output code.</param>
            <param name="sourceFileName">The source file name.</param>
            <param name="singledClassFeature">The singled feature. can be null.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.FullClassName2CSharpClassName(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Gets the full name of a class.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format to use.</param>
            <param name="cSharpNamespaceFormat">The namespace format to use.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.BasicClassName2CSharpClassName(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Gets the name of a class.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format to use.</param>
            <param name="cSharpNamespaceFormat">The namespace format to use.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.SplitUsingClause(System.String,System.String@,System.String@)">
            <summary>
            Gets elements of a using clause from a class name.
            </summary>
            <param name="className">The class name.</param>
            <param name="usingClause">The using clause.</param>
            <param name="nakedClassName">The class name to use if the using clause is set.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.Generics2CSharpName(EaslyCompiler.ICSharpUsingCollection)">
            <summary>
            Gets the string corresponding to the enumeration of C# generic parameters.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpClass.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpClass.WriteDown"/> flag.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClass.ToString">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.CSharpExports">
            <summary>
            One of the export keywords in C#
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpNamespaceFormats">
            <summary>
            The mode to use to name a C# namespace.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpNamespaceFormats.None">
            <summary>
            Ignore the namespace.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpNamespaceFormats.OneWord">
            <summary>
            Only one word.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpNamespaceFormats.FullNamespace">
            <summary>
            The full namespace path.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpTypeFormats">
            <summary>
            The mode to use to name a C# type.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpTypeFormats.Normal">
            <summary>
            Use the type name.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpTypeFormats.AsInterface">
            <summary>
            Add a 'I' to the type name.
            </summary>
        </member>
        <member name="F:EaslyCompiler.CSharpTypeFormats.AsSingleton">
            <summary>
            The type is a singleton.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpNames">
            <summary>
            Helper class to obtain C# names from various objects.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpNames.ToCSharpIdentifier(System.String)">
            <summary>
            Gets a C#-compliant name from any string.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpNames.ToDotNetIdentifier(System.String)">
            <summary>
            Gets the name of a .NET component from any string.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpNames.ComposedExportStatus(System.Boolean,System.Boolean,System.Boolean,EaslyCompiler.CSharpExports)">
            <summary>
            Returns the text of an export.
            </summary>
            <param name="isOverride">True if the feature is an override of a parent virtual feature.</param>
            <param name="isAbstract">True if the feature is abstract.</param>
            <param name="isNonVirtual">True if the feature is NOT virtual.</param>
            <param name="exportStatus">The base export status.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpWriter">
            <summary>
            An interface to write to a C# file.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpWriter.IndentLevel">
            <summary>
            Current indentation level.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpWriter.WriteEmptyLine">
            <summary>
            Writes an empty line.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpWriter.WriteIndentedLine(System.String)">
            <summary>
            Writes a line using the current indentation.
            </summary>
            <param name="line">The line to write.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpWriter.WriteDocumentation(BaseNode.INode)">
            <summary>
            Writes the documentation associated to a node.
            </summary>
            <param name="node">The documented node.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpWriter.IncreaseIndent">
            <summary>
            Increased the current indentation level by 1.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpWriter.DecreaseIndent">
            <summary>
            Decreased the current indentation level by 1.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpWriter.CommitLines">
            <summary>
            Commits all accumulated lines.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpWriter">
            <summary>
            A class to write to a C# file.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.#ctor(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpWriter"/> class.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="defaultNamespace">The default namespace.</param>
            <param name="sourceFileName">The source file name.</param>
            <param name="outputFolder">The output folder.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpWriter.DefaultNamespace">
            <summary>
            Gets the default namespace.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpWriter.SourceFileName">
            <summary>
            Gets the source file name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpWriter.OutputFolder">
            <summary>
            Gets the output folder.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpWriter.IndentLevel">
            <summary>
            Current indentation level.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpWriter.AttachmentMap">
            <summary>
            Map of attached variable names.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.WriteEmptyLine">
            <summary>
            Writes an empty line.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.WriteIndentedLine(System.String)">
            <summary>
            Writes a line using the current indentation.
            </summary>
            <param name="line">The line to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.WriteDocumentation(BaseNode.INode)">
            <summary>
            Writes the documentation associated to a node.
            </summary>
            <param name="node">The documented node.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.IncreaseIndent">
            <summary>
            Increased the current indentation level by 1.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.DecreaseIndent">
            <summary>
            Decreased the current indentation level by 1.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.AddAttachment(System.String,System.String)">
            <summary>
            Adds a name and its corresponding attached name to the attachment map.
            </summary>
            <param name="name">The name.</param>
            <param name="nameAttached">The corresponding attached name.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.RemoveAttachment(System.String)">
            <summary>
            Removes a name and its corresponding attached name from the attachment map.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.AddUsing(System.String)">
            <summary>
            Adds a using directive to write separately.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.CommitLines">
            <summary>
            Commits all accumulated lines.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.GetTemporaryName">
            <summary>
            Gets a temporary name from a source name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.GetTemporaryName(System.String)">
            <summary>
            Gets a temporary name from a source name.
            </summary>
            <param name="sourceName">The source name.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.Dispose(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.DisposeNow">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.Close">
            <summary></summary>
        </member>
        <member name="M:EaslyCompiler.CSharpWriter.Flush">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpCommandOverload">
            <summary>
            A C# command overload node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandOverload.Precursor">
            <summary>
            The precursor overload. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandOverload.Body">
            <summary>
            The overload body.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpCommandOverload.SetPrecursor(EaslyCompiler.ICSharpCommandOverload)">
            <summary>
            Sets the precursor.
            </summary>
            <param name="precursor">The precursor.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpCommandOverload">
            <summary>
            A C# command overload node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandOverload.Create(EaslyCompiler.ICSharpContext,CompilerNode.ICommandOverload,EaslyCompiler.ICSharpFeature,EaslyCompiler.ICSharpClass)">
            <summary>
            Create a new C# overload.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="owner">The class where the overload is declared.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandOverload.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.ICommandOverload,EaslyCompiler.ICSharpFeature,EaslyCompiler.ICSharpClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpCommandOverload"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="owner">The class where the overload is declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandOverload.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandOverload.ParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandOverload.Body">
            <summary>
            The overload body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandOverload.Precursor">
            <summary>
            The precursor overload. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandOverload.SetPrecursor(EaslyCompiler.ICSharpCommandOverload)">
            <summary>
            Sets the precursor.
            </summary>
            <param name="precursor">The precursor.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandOverload.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,System.Boolean,System.String,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# overload of a feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="isOverride">True if the feature is an override.</param>
            <param name="nameString">The composed feature name.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isConstructor">True if the feature is a constructor.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandOverload.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandOverload.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAssertion">
            <summary>
            A C# assertion node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssertion.Tag">
            <summary>
            The assertion tag. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssertion.BooleanExpression">
            <summary>
            The assertion expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpAssertion.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# assertion.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpAssertion">
            <summary>
            A C# assertion node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertion.Create(EaslyCompiler.ICSharpContext,CompilerNode.IAssertion)">
            <summary>
            Create a new C# assertion.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertion.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IAssertion)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAssertion"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAssertion.Tag">
            <summary>
            The assertion tag. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAssertion.BooleanExpression">
            <summary>
            The assertion expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertion.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# assertion.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertion.WriteContract(EaslyCompiler.ICSharpWriter,System.Collections.Generic.IList{EaslyCompiler.ICSharpAssertion},System.Collections.Generic.IList{EaslyCompiler.ICSharpAssertion},EaslyCompiler.CSharpContractLocations,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down a contract.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="requireList">The list of require assertions in the contract.</param>
            <param name="ensureList">The list of ensure assertions in the contract.</param>
            <param name="contractLocation">Where the contract appears in the feature.</param>
            <param name="writeEmptyContract">True if the contract must be written, even if empty.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAssertion.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertion.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpAssertion.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpQueryOverload">
            <summary>
            A C# query overload node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryOverload.Precursor">
            <summary>
            The precursor overload. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryOverload.ResultList">
            <summary>
            The list of results.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryOverload.Body">
            <summary>
            The overload body.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpQueryOverload.SetPrecursor(EaslyCompiler.ICSharpQueryOverload)">
            <summary>
            Sets the precursor.
            </summary>
            <param name="precursor">The precursor.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpQueryOverload">
            <summary>
            A C# query overload node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverload.Create(EaslyCompiler.ICSharpContext,CompilerNode.IQueryOverload,EaslyCompiler.ICSharpFeature,EaslyCompiler.ICSharpClass)">
            <summary>
            Create a new C# overload.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="owner">The class where the overload is declared.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverload.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IQueryOverload,EaslyCompiler.ICSharpFeature,EaslyCompiler.ICSharpClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpQueryOverload"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="owner">The class where the overload is declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryOverload.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryOverload.ParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryOverload.ResultList">
            <summary>
            The list of results.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryOverload.Body">
            <summary>
            The overload body.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryOverload.Precursor">
            <summary>
            The precursor overload. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverload.SetPrecursor(EaslyCompiler.ICSharpQueryOverload)">
            <summary>
            Sets the precursor.
            </summary>
            <param name="precursor">The precursor.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverload.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,System.Boolean,System.String,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# overload of a feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="isOverride">True if the feature is an override.</param>
            <param name="nameString">The composed feature name.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isConstructor">True if the feature is a constructor.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryOverload.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryOverload.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpDiscrete">
            <summary>
            A C# discrete node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpDiscrete.Name">
            <summary>
            The discrete name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpDiscrete.ExplicitValue">
            <summary>
            The explicit value. Can be null.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpDiscrete">
            <summary>
            A C# generic node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpDiscrete.Create(EaslyCompiler.ICSharpContext,CompilerNode.IDiscrete)">
            <summary>
            Create a new C# discrete.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpDiscrete.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IDiscrete)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpDiscrete"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpDiscrete.Name">
            <summary>
            The discrete name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpDiscrete.ExplicitValue">
            <summary>
            The explicit value. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpDiscrete.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpDiscrete.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpDiscrete.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpConstraint">
            <summary>
            A C# constraint node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConstraint.Type">
            <summary>
            The corresponding type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConstraint.TypeWithRename">
            <summary>
            The corresponding type with renamed features.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpConstraint">
            <summary>
            A C# constraint node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpConstraint.Create(EaslyCompiler.ICSharpContext,CompilerNode.IConstraint)">
            <summary>
            Create a new C# constraint.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpConstraint.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpConstraint"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpConstraint.Type">
            <summary>
            The corresponding type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpConstraint.TypeWithRename">
            <summary>
            The corresponding type with renamed features.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpParameter">
            <summary>
            A C# parameter node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpParameter.Feature">
            <summary>
            The corresponding attribute.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpParameter.Name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpParameter">
            <summary>
            A C# parameter node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpParameter.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.IParameter,EaslyCompiler.ICSharpClass)">
            <summary>
            Create a new C# parameter.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="owner">The class where the parameter is declared.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpParameter.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.IParameter,EaslyCompiler.ICSharpClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpParameter"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="owner">The class where the parameter is declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpParameter.Feature">
            <summary>
            The corresponding attribute.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpParameter.Name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpQualifiedName">
            <summary>
            A C# qualified name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQualifiedName.Feature">
            <summary>
            The feature called. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQualifiedName.Discrete">
            <summary>
            The discrete read. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQualifiedName.InheritBySideAttribute">
            <summary>
            Inherit the side-by-side attribute.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQualifiedName.ClassPath">
            <summary>
            The list of classes involved along the path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQualifiedName.IsAttributeWithContract">
            <summary>
            True if the final feature is an attribute with ensure clauses.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQualifiedName.IsSimple">
            <summary>
            True if the qualified name is simple.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQualifiedName.SimpleName">
            <summary>
            Te qualified name if simple.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpQualifiedName.CSharpText(EaslyCompiler.ICSharpUsingCollection,System.Int32)">
            <summary>
            Gets the source code corresponding to the qualified name.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="skippedAtEnd">Number of identifiers to skip at the end.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpQualifiedName.DecoratedCSharpText(EaslyCompiler.ICSharpUsingCollection,System.Int32)">
            <summary>
            Gets the source code corresponding to the qualified name.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="skippedAtEnd">Number of identifiers to skip at the end.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpQualifiedName.CSharpSetter(EaslyCompiler.ICSharpUsingCollection)">
            <summary>
            Gets the source code corresponding to the qualified name setter.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpQualifiedName">
            <summary>
            A C# qualified name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQualifiedName.Create(EaslyCompiler.ICSharpContext,CompilerNode.IQualifiedName,EaslyCompiler.ICSharpFeature,EaslyCompiler.ICSharpDiscrete,System.Boolean)">
            <summary>
            Create a new C# qualified name.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="feature">The feature at the end of the path. Can be null.</param>
            <param name="discrete">The discrete at the end of the path. Can be null.</param>
            <param name="inheritBySideAttribute">Inherit the side-by-side attribute.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQualifiedName.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IQualifiedName,EaslyCompiler.ICSharpFeature,EaslyCompiler.ICSharpDiscrete,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpQualifiedName"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="feature">The feature at the end of the path. Can be null.</param>
            <param name="discrete">The discrete at the end of the path. Can be null.</param>
            <param name="inheritBySideAttribute">Inherit the side-by-side attribute.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpQualifiedName.Feature">
            <summary>
            The feature called. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQualifiedName.Discrete">
            <summary>
            The discrete read. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQualifiedName.InheritBySideAttribute">
            <summary>
            Inherit the side-by-side attribute.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQualifiedName.ClassPath">
            <summary>
            The list of classes involved along the path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQualifiedName.IsAttributeWithContract">
            <summary>
            True if the final feature is an attribute with ensure clauses.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQualifiedName.IsSimple">
            <summary>
            True if the qualified name is simple.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQualifiedName.SimpleName">
            <summary>
            True if the qualified name is simple.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQualifiedName.CSharpText(EaslyCompiler.ICSharpUsingCollection,System.Int32)">
            <summary>
            Gets the source code corresponding to the qualified name.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="skippedAtEnd">Number of identifiers to skip at the end.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQualifiedName.DecoratedCSharpText(EaslyCompiler.ICSharpUsingCollection,System.Int32)">
            <summary>
            Gets the source code corresponding to the qualified name.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="skippedAtEnd">Number of identifiers to skip at the end.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQualifiedName.CSharpSetter(EaslyCompiler.ICSharpUsingCollection)">
            <summary>
            Gets the source code corresponding to the qualified name setter.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpTypedef">
            <summary>
            A C# typedef.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpTypedef.Name">
            <summary>
            The typedef name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpTypedef.Type">
            <summary>
            The associated type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpTypedef">
            <summary>
            A C# typedef.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpTypedef.Create(EaslyCompiler.ICSharpContext,CompilerNode.ITypedef,EaslyCompiler.ICSharpClass)">
            <summary>
            Create a new C# typedef.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="embeddingClass">The class where the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpTypedef.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.ITypedef,EaslyCompiler.ICSharpClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpTypedef"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="embeddingClass">The class where the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpTypedef.Name">
            <summary>
            The typedef name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpTypedef.Type">
            <summary>
            The associated type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpGeneric">
            <summary>
            A C# generic node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpGeneric.Name">
            <summary>
            The generic name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpGeneric.Type">
            <summary>
            The corresponding type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpGeneric.IsUsedToCreate">
            <summary>
            True if the generic is used to create at least one object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpGeneric.ConstraintList">
            <summary>
            The list of constraints.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpGeneric.Init(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the C# generic.
            </summary>
            <param name="context">The creation context.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpGeneric">
            <summary>
            A C# generic node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpGeneric.Create(CompilerNode.IGeneric)">
            <summary>
            Create a new C# generic.
            </summary>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpGeneric.#ctor(CompilerNode.IGeneric)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpGeneric"/> class.
            </summary>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpGeneric.Name">
            <summary>
            The generic name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpGeneric.Type">
            <summary>
            The corresponding type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpGeneric.IsUsedToCreate">
            <summary>
            True if the generic is used to create at least one object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpGeneric.ConstraintList">
            <summary>
            The list of constraints.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpGeneric.Init(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the C# generic.
            </summary>
            <param name="context">The creation context.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpKeywordEntityExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpKeywordEntityExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpKeywordEntityExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordEntityExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IKeywordEntityExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordEntityExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IKeywordEntityExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpKeywordEntityExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpKeywordEntityExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordEntityExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpKeywordEntityExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordEntityExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpUnaryOperatorExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUnaryOperatorExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUnaryOperatorExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUnaryOperatorExpression.Operator">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUnaryOperatorExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUnaryOperatorExpression.SelectedOverloadType">
            <summary>
            The selected overload type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpUnaryOperatorExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryOperatorExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IUnaryOperatorExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryOperatorExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IUnaryOperatorExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpUnaryOperatorExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryOperatorExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryOperatorExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryOperatorExpression.Operator">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryOperatorExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryOperatorExpression.SelectedOverloadType">
            <summary>
            The selected overload type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryOperatorExpression.IsCallingNumberFeature">
            <summary>
            True if calling a feature of the Number class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryOperatorExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryOperatorExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryOperatorExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryOperatorExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryOperatorExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpUnaryNotExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUnaryNotExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpUnaryNotExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpUnaryNotExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryNotExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IUnaryNotExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryNotExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IUnaryNotExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpUnaryNotExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryNotExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryNotExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryNotExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryNotExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpUnaryNotExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryNotExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpUnaryNotExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpResultOfExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpResultOfExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpResultOfExpression.SourceExpression">
            <summary>
            The source expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpResultOfExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpResultOfExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IResultOfExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpResultOfExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IResultOfExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpResultOfExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpResultOfExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpResultOfExpression.SourceExpression">
            <summary>
            The source expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpResultOfExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpResultOfExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpResultOfExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpResultOfExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpResultOfExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpQueryExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryExpression.Feature">
            <summary>
            The feature called. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryExpression.Discrete">
            <summary>
            The discrete read. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryExpression.DiscreteOwner">
            <summary>
            The class where the discrete is defined. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryExpression.Query">
            <summary>
            The query.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpQueryExpression.SelectedOverloadType">
            <summary>
            The selected overload type. Can be null.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpQueryExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IQueryExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IQueryExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpQueryExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.Feature">
            <summary>
            The feature called. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.Discrete">
            <summary>
            The discrete read. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.DiscreteOwner">
            <summary>
            The class where the discrete is defined. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.Query">
            <summary>
            The query.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.SelectedOverloadType">
            <summary>
            The selected overload type. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.IsAgent">
            <summary>
            True if calling an agent.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpQueryExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryExpression.ComputeQueryResult(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpFeatureWithName,EaslyCompiler.ICSharpFeatureCall)">
            <summary>
            Computes the result of a call with constant arguments.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="feature">The feature called.</param>
            <param name="featureCall">Arguments of the call.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpQueryExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpPrecursorIndexExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorIndexExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorIndexExpression.ParentFeature">
            <summary>
            The feature whose precursor is being called.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorIndexExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpPrecursorIndexExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IPrecursorIndexExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IPrecursorIndexExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpPrecursorIndexExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorIndexExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorIndexExpression.ParentFeature">
            <summary>
            The feature whose precursor is being called.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorIndexExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorIndexExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorIndexExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpPrecursorExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorExpression.PrecursorFeature">
            <summary>
            The precursor feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorExpression.ParentFeature">
            <summary>
            The feature whose precursor is being called.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorExpression.SelectedOverloadType">
            <summary>
            The selected overload type. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpPrecursorExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IPrecursorExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IPrecursorExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpPrecursorExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorExpression.PrecursorFeature">
            <summary>
            The precursor feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorExpression.ParentFeature">
            <summary>
            The feature whose precursor is being called.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorExpression.SelectedOverloadType">
            <summary>
            The selected overload type. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpOldExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOldExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpOldExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpOldExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IOldExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpOldExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IOldExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpOldExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpOldExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpOldExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpOldExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpNewExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpNewExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpNewExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpNewExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.INewExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpNewExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.INewExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpNewExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpNewExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpNewExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpNewExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpManifestStringExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpManifestStringExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpManifestStringExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestStringExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IManifestStringExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestStringExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IManifestStringExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpManifestStringExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpManifestStringExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestStringExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpManifestStringExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestStringExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpManifestNumberExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpManifestNumberExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpManifestNumberExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestNumberExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IManifestNumberExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestNumberExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IManifestNumberExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpManifestNumberExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpManifestNumberExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestNumberExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpManifestNumberExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestNumberExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpManifestCharacterExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpManifestCharacterExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpManifestCharacterExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestCharacterExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IManifestCharacterExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestCharacterExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IManifestCharacterExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpManifestCharacterExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpManifestCharacterExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestCharacterExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpManifestCharacterExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpManifestCharacterExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpKeywordExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpKeywordExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpKeywordExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IKeywordExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IKeywordExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpKeywordExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpKeywordExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpKeywordExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpInitializedObjectExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInitializedObjectExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInitializedObjectExpression.Class">
            <summary>
            Class of the initialized object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInitializedObjectExpression.AssignmentList">
            <summary>
            The list of assignments.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpInitializedObjectExpression.WriteCSharpAsConstant(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpInitializedObjectExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInitializedObjectExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IInitializedObjectExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpInitializedObjectExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IInitializedObjectExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpInitializedObjectExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpInitializedObjectExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpInitializedObjectExpression.Class">
            <summary>
            Class of the initialized object.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpInitializedObjectExpression.AssignmentList">
            <summary>
            The list of assignments.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInitializedObjectExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpInitializedObjectExpression.WriteCSharpAsConstant(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpInitializedObjectExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInitializedObjectExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpIndexQueryExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexQueryExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexQueryExpression.IndexedExpression">
            <summary>
            The indexed expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexQueryExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpIndexQueryExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexQueryExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IIndexQueryExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexQueryExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IIndexQueryExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpIndexQueryExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexQueryExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexQueryExpression.IndexedExpression">
            <summary>
            The indexed expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexQueryExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexQueryExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexQueryExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexQueryExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexQueryExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexQueryExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpEqualityExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEqualityExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEqualityExpression.LeftExpression">
            <summary>
            The left expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEqualityExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpEqualityExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEqualityExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IEqualityExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpEqualityExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IEqualityExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpEqualityExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpEqualityExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpEqualityExpression.LeftExpression">
            <summary>
            The left expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpEqualityExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEqualityExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpEqualityExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpEqualityExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEqualityExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpEqualityExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpEntityExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEntityExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEntityExpression.Feature">
            <summary>
            The source feature for which an entity object is obtained. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEntityExpression.Discrete">
            <summary>
            The source discrete for which an entity object is obtained. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpEntityExpression.Query">
            <summary>
            The query.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpEntityExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEntityExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IEntityExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpEntityExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IEntityExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpEntityExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpEntityExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpEntityExpression.Feature">
            <summary>
            The source feature for which an entity object is obtained. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpEntityExpression.Discrete">
            <summary>
            The source discrete for which an entity object is obtained. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpEntityExpression.Query">
            <summary>
            The query.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEntityExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpEntityExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpEntityExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpCloneOfExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCloneOfExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCloneOfExpression.SourceExpression">
            <summary>
            The source expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCloneOfExpression.TypeList">
            <summary>
            The list of cloned object types.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpCloneOfExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCloneOfExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.ICloneOfExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCloneOfExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.ICloneOfExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpCloneOfExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpCloneOfExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCloneOfExpression.SourceExpression">
            <summary>
            The source expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCloneOfExpression.TypeList">
            <summary>
            The list of cloned object types.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCloneOfExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCloneOfExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpClassConstantExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClassConstantExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClassConstantExpression.Feature">
            <summary>
            The constant feature. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClassConstantExpression.ConstantExpression">
            <summary>
            The constant value as an expression. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClassConstantExpression.Discrete">
            <summary>
            The constant discrete. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClassConstantExpression.Class">
            <summary>
            The feature class.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpClassConstantExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClassConstantExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IClassConstantExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClassConstantExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IClassConstantExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpClassConstantExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpClassConstantExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassConstantExpression.Feature">
            <summary>
            The constant feature. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassConstantExpression.ConstantExpression">
            <summary>
            The constant value as an expression. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassConstantExpression.Discrete">
            <summary>
            The constant discrete. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassConstantExpression.Class">
            <summary>
            The feature class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClassConstantExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpClassConstantExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassConstantExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClassConstantExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClassConstantExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpBinaryOperatorExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryOperatorExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryOperatorExpression.LeftExpression">
            <summary>
            The left expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryOperatorExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryOperatorExpression.Operator">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryOperatorExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryOperatorExpression.SelectedOverloadType">
            <summary>
            The selected overload type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpBinaryOperatorExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryOperatorExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IBinaryOperatorExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryOperatorExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IBinaryOperatorExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpBinaryOperatorExpression"/> class.
            </summary>
            <param name="source">The Easly expression from which the C# expression is created.</param>
            <param name="context">The creation context.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.LeftExpression">
            <summary>
            The left expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.Operator">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.SelectedOverloadType">
            <summary>
            The selected overload type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.IsCallingNumberFeature">
            <summary>
            True if calling a feature of the Number class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryOperatorExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryOperatorExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryOperatorExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryOperatorExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpBinaryConditionalExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryConditionalExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryConditionalExpression.LeftExpression">
            <summary>
            The left expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpBinaryConditionalExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpBinaryConditionalExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryConditionalExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IBinaryConditionalExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryConditionalExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IBinaryConditionalExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpBinaryConditionalExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryConditionalExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryConditionalExpression.LeftExpression">
            <summary>
            The left expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryConditionalExpression.RightExpression">
            <summary>
            The right expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryConditionalExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryConditionalExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpBinaryConditionalExpression.ComputedValue">
            <summary>
            The expression computed constant value.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryConditionalExpression.Compute(EaslyCompiler.ICSharpWriter)">
            <summary>
            Runs the compiler to compute the value as a string.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpBinaryConditionalExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAssertionTagExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssertionTagExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssertionTagExpression.BooleanExpression">
            <summary>
            The target expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpAssertionTagExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertionTagExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IAssertionTagExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertionTagExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IAssertionTagExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAssertionTagExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAssertionTagExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAssertionTagExpression.BooleanExpression">
            <summary>
            The target expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertionTagExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAssertionTagExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAgentExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAgentExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAgentExpression.BaseType">
            <summary>
            The base type. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAgentExpression.EffectiveBaseType">
            <summary>
            The effective base type if different than <see cref="P:EaslyCompiler.ICSharpAgentExpression.BaseType"/>. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAgentExpression.Delegated">
            <summary>
            The feature referenced.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpAgentExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAgentExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IAgentExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAgentExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IAgentExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAgentExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAgentExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAgentExpression.BaseType">
            <summary>
            The base type. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAgentExpression.EffectiveBaseType">
            <summary>
            The effective base type if different than <see cref="P:EaslyCompiler.CSharpAgentExpression.BaseType"/>. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAgentExpression.Delegated">
            <summary>
            The feature referenced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAgentExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Gets the source code corresponding to the expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAgentExpression.IsDirectConstant">
            <summary>
            True if the expression can provide its constant value directly.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAgentExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpression.IsSingleResult">
            <summary>
            True if the expression returns only one result.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpression.IsEventExpression">
            <summary>
            True if the condition is on events.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpExpression.NumberType">
            <summary>
            The number type if the result is a single number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpExpression">
            <summary>
            A C# expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpExpression.Create(EaslyCompiler.ICSharpContext,CompilerNode.IExpression)">
            <summary>
            Creates a new C# expression.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpExpression.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpExpression"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly expression from which the C# expression is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpExpression.Source">
            <summary>
            The Easly expression from which the C# expression is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpression.IsSingleResult">
            <summary>
            True if the expression returns only one result.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpression.IsEventExpression">
            <summary>
            True if the condition is on events.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpExpression.NumberType">
            <summary>
            The number type if the result is a single number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpExpression.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpressionContext,System.Int32)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expressionContext">The context.</param>
            <param name="skippedIndex">Index of a destination to skip.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpExpression.SingleResultExpressionText(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpression)">
            <summary>
            Gets the return value of an expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpExpression.ComputeNestedExpression(EaslyCompiler.ICSharpWriter,EaslyCompiler.ICSharpExpression)">
            <summary>
            Computes the constant value of a nested expression.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="expression">The expression to compute.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpExpression.UpdateNumberType(EaslyCompiler.ICSharpType,System.Boolean@)">
            <summary>
            Updates the number type of the expression from a type.
            </summary>
            <param name="type">The type that may be a number.</param>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpExpression.UpdateNumberType(EaslyCompiler.ICSharpExpression,System.Boolean@)">
            <summary>
            Updates the number type of the expression from an expression.
            </summary>
            <param name="expression">The expression that may be a number.</param>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpExpression.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpExpression.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpExpression.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpFeatureWithName">
            <summary>
            A C# feature with a name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeatureWithName.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpOverload">
            <summary>
            A C# overload (query or command).
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverload.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverload.ParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverload.Precursor">
            <summary>
            The precursor overload. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpOverload.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,System.Boolean,System.String,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# overload of a feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="isOverride">True if the feature is an override.</param>
            <param name="nameString">The composed feature name.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isConstructor">True if the feature is a constructor.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpThrowInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpThrowInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpThrowInstruction.ExceptionType">
            <summary>
            The exception type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpThrowInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpThrowInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpThrowInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IThrowInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpThrowInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IThrowInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpThrowInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpThrowInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpThrowInstruction.ExceptionType">
            <summary>
            The exception type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpThrowInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpThrowInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpThrowInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpReleaseInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpReleaseInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpReleaseInstruction.ReleasedEntity">
            <summary>
            The released entity.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpReleaseInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpReleaseInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IReleaseInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpReleaseInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IReleaseInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpReleaseInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpReleaseInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpReleaseInstruction.ReleasedEntity">
            <summary>
            The released entity.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpReleaseInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpReleaseInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpRaiseEventInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpRaiseEventInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpRaiseEventInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpRaiseEventInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IRaiseEventInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpRaiseEventInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IRaiseEventInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpRaiseEventInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpRaiseEventInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpRaiseEventInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpRaiseEventInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpPrecursorInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorInstruction.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpPrecursorInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IPrecursorInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IPrecursorInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpPrecursorInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorInstruction.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpPrecursorIndexAssignmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorIndexAssignmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorIndexAssignmentInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPrecursorIndexAssignmentInstruction.SourceExpression">
            <summary>
            The assignment source.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IPrecursorIndexAssignmentInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IPrecursorIndexAssignmentInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction.SourceExpression">
            <summary>
            The assignment source.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPrecursorIndexAssignmentInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpOverLoopInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverLoopInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverLoopInstruction.OverList">
            <summary>
            The loop source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverLoopInstruction.IndexerList">
            <summary>
            The list of indexers.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverLoopInstruction.LoopInstructions">
            <summary>
            Loop instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverLoopInstruction.ExitEntityName">
            <summary>
            The exit entity. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpOverLoopInstruction.InvariantList">
            <summary>
            The list of loop invariants.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpOverLoopInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpOverLoopInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IOverLoopInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpOverLoopInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IOverLoopInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpOverLoopInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpOverLoopInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpOverLoopInstruction.OverList">
            <summary>
            The loop source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpOverLoopInstruction.IndexerList">
            <summary>
            The list of indexers.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpOverLoopInstruction.LoopInstructions">
            <summary>
            Loop instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpOverLoopInstruction.ExitEntityName">
            <summary>
            The exit entity. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpOverLoopInstruction.InvariantList">
            <summary>
            The list of loop invariants.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpOverLoopInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpOverLoopInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpKeywordAssignmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpKeywordAssignmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpKeywordAssignmentInstruction.SourceExpression">
            <summary>
            The assignment source.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpKeywordAssignmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordAssignmentInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IKeywordAssignmentInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordAssignmentInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IKeywordAssignmentInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpKeywordAssignmentInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpKeywordAssignmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpKeywordAssignmentInstruction.SourceExpression">
            <summary>
            The assignment source.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordAssignmentInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpKeywordAssignmentInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpInspectInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInspectInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInspectInstruction.SourceExpression">
            <summary>
            The inspect source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInspectInstruction.WithList">
            <summary>
            The list of cases.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInspectInstruction.ElseInstructions">
            <summary>
            Instructions for the else case. Can be null.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpInspectInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInspectInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IInspectInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpInspectInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IInspectInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpInspectInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpInspectInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpInspectInstruction.SourceExpression">
            <summary>
            The inspect source.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpInspectInstruction.WithList">
            <summary>
            The list of cases.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpInspectInstruction.ElseInstructions">
            <summary>
            Instructions for the else case. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInspectInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpInspectInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpIndexAssignmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexAssignmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexAssignmentInstruction.Destination">
            <summary>
            The assignment destination.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexAssignmentInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexAssignmentInstruction.SourceExpression">
            <summary>
            The assignment source.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpIndexAssignmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexAssignmentInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IIndexAssignmentInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexAssignmentInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IIndexAssignmentInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpIndexAssignmentInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexAssignmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexAssignmentInstruction.Destination">
            <summary>
            The assignment destination.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexAssignmentInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexAssignmentInstruction.SourceExpression">
            <summary>
            The assignment source.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexAssignmentInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexAssignmentInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpIfThenElseInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIfThenElseInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIfThenElseInstruction.ConditionalList">
            <summary>
            The list of conditions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIfThenElseInstruction.ElseInstructions">
            <summary>
            Instructions for the else case. Can be null.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpIfThenElseInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIfThenElseInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IIfThenElseInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIfThenElseInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IIfThenElseInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpIfThenElseInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpIfThenElseInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIfThenElseInstruction.ConditionalList">
            <summary>
            The list of conditions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIfThenElseInstruction.ElseInstructions">
            <summary>
            Instructions for the else case. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIfThenElseInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIfThenElseInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpForLoopInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpForLoopInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpForLoopInstruction.EntityDeclarationList">
            <summary>
            The list of local entities.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpForLoopInstruction.InitInstructionList">
            <summary>
            The list of initialization instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpForLoopInstruction.WhileCondition">
            <summary>
            The loop condition.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpForLoopInstruction.LoopInstructionList">
            <summary>
            The list of loop instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpForLoopInstruction.IterationInstructionList">
            <summary>
            The list of iteration instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpForLoopInstruction.VariantExpression">
            <summary>
            The loop variant. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpForLoopInstruction.InvariantList">
            <summary>
            The list of loop invariants.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpForLoopInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpForLoopInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IForLoopInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpForLoopInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IForLoopInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpForLoopInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpForLoopInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpForLoopInstruction.EntityDeclarationList">
            <summary>
            The list of local entities.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpForLoopInstruction.InitInstructionList">
            <summary>
            The list of initialization instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpForLoopInstruction.WhileCondition">
            <summary>
            The loop condition.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpForLoopInstruction.LoopInstructionList">
            <summary>
            The list of loop instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpForLoopInstruction.IterationInstructionList">
            <summary>
            The list of iteration instructions.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpForLoopInstruction.VariantExpression">
            <summary>
            The loop variant. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpForLoopInstruction.InvariantList">
            <summary>
            The list of loop invariants.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpForLoopInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpForLoopInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpDebugInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpDebugInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpDebugInstruction.Instructions">
            <summary>
            The debugged instructions.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpDebugInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpDebugInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IDebugInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpDebugInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IDebugInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpDebugInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpDebugInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpDebugInstruction.Instructions">
            <summary>
            The debugged instructions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpDebugInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpDebugInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpCreateInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreateInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreateInstruction.EntityType">
            <summary>
            The created object type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreateInstruction.CreatedObjectName">
            <summary>
            The created object name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreateInstruction.CreationRoutineName">
            <summary>
            The creation routine name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreateInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpCreateInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCreateInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.ICreateInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCreateInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.ICreateInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpCreateInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpCreateInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCreateInstruction.EntityType">
            <summary>
            The created object type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCreateInstruction.CreatedObjectName">
            <summary>
            The created object name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCreateInstruction.CreationRoutineName">
            <summary>
            The creation routine name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCreateInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCreateInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCreateInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpCommandInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandInstruction.Command">
            <summary>
            The path to the called feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandInstruction.FinalFeature">
            <summary>
            The feature at the end of the path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandInstruction.FinalType">
            <summary>
            The type of the end of the path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCommandInstruction.SkipLastInPath">
            <summary>
            True if the call should skip the last identifier in the path.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpCommandInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.ICommandInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.ICommandInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpCommandInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandInstruction.Command">
            <summary>
            The path to the called feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandInstruction.FeatureCall">
            <summary>
            The feature call.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandInstruction.FinalFeature">
            <summary>
            The feature at the end of the path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandInstruction.FinalType">
            <summary>
            The type of the end of the path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandInstruction.SkipLastInPath">
            <summary>
            True if the call should skip the last identifier in the path.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCommandInstruction.IsCallingNumberFeature">
            <summary>
            True if calling a feature of the Number class.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCommandInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpCheckInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCheckInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCheckInstruction.BooleanExpression">
            <summary>
            The checked expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpCheckInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCheckInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.ICheckInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCheckInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.ICheckInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpCheckInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpCheckInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCheckInstruction.BooleanExpression">
            <summary>
            The checked expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCheckInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCheckInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAttachmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttachmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttachmentInstruction.SourceExpression">
            <summary>
            The expression source to the attachment.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttachmentInstruction.EntityNameList">
            <summary>
            List of attached entities.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttachmentInstruction.AttachmentList">
            <summary>
            List of attachments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttachmentInstruction.ElseInstructions">
            <summary>
            Instructions for the else case. Can be null.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpAttachmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachmentInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IAttachmentInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachmentInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IAttachmentInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAttachmentInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachmentInstruction.SourceExpression">
            <summary>
            The expression source to the attachment.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachmentInstruction.EntityNameList">
            <summary>
            List of attached entities.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachmentInstruction.AttachmentList">
            <summary>
            List of attachments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAttachmentInstruction.ElseInstructions">
            <summary>
            Instructions for the else case. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachmentInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttachmentInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAssignmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssignmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssignmentInstruction.DestinationList">
            <summary>
            The list of assignment destinations.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAssignmentInstruction.SourceExpression">
            <summary>
            The expression source of the assignment.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpAssignmentInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAssignmentInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IAssignmentInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAssignmentInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IAssignmentInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAssignmentInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAssignmentInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAssignmentInstruction.DestinationList">
            <summary>
            The list of assignment destinations.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAssignmentInstruction.SourceExpression">
            <summary>
            The expression source of the assignment.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAssignmentInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAssignmentInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAsLongAsInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAsLongAsInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAsLongAsInstruction.ContinueCondition">
            <summary>
            The loop condition expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAsLongAsInstruction.ContinuationList">
            <summary>
            The list of C# continuations.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAsLongAsInstruction.ElseInstructions">
            <summary>
            Instructions for the else case. Can be null.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpAsLongAsInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAsLongAsInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IAsLongAsInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAsLongAsInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IAsLongAsInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAsLongAsInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAsLongAsInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAsLongAsInstruction.ContinueCondition">
            <summary>
            The loop condition expression.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAsLongAsInstruction.ContinuationList">
            <summary>
            The list of C# continuations.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAsLongAsInstruction.ElseInstructions">
            <summary>
            Instructions for the else case. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAsLongAsInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAsLongAsInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInstruction.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpInstruction">
            <summary>
            A C# instruction.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInstruction.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IInstruction)">
            <summary>
            Creates a new C# instruction.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpInstruction.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpFeature,CompilerNode.IInstruction)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpInstruction"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="parentFeature">The parent feature.</param>
            <param name="source">The Easly instruction from which the C# instruction is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpInstruction.ParentFeature">
            <summary>
            The parent feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpInstruction.Source">
            <summary>
            The Easly instruction from which the C# instruction is created.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInstruction.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# instruction.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpInstruction.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInstruction.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpInstruction.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpTupleType">
            <summary>
            A C# function type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpTupleType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpTupleType">
            <summary>
            A C# function type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpTupleType.Create(EaslyCompiler.ICSharpContext,CompilerNode.ITupleType)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpTupleType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.ITupleType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpTupleType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpTupleType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpTupleType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpTupleType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpTupleType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpPropertyType">
            <summary>
            A C# property type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyType.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyType.EntityType">
            <summary>
            The entity type.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpPropertyType">
            <summary>
            A C# property type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IPropertyType)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IPropertyType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpPropertyType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyType.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyType.EntityType">
            <summary>
            The entity type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpIndexerType">
            <summary>
            A C# indexer type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpIndexerType">
            <summary>
            A C# indexer type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IIndexerType)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IIndexerType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpIndexerType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpProcedureType">
            <summary>
            A C# procedure type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpProcedureType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpProcedureType.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpProcedureType.OverloadTypeList">
            <summary>
            The list of overloads.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpProcedureType">
            <summary>
            A C# procedure type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IProcedureType)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IProcedureType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpProcedureType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IProcedureType,EaslyCompiler.ICSharpTypedef)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
            <param name="originatingTypedef">The typedef where this type is declared.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IProcedureType,EaslyCompiler.ICSharpTypedef)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpProcedureType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
            <param name="originatingTypedef">The typedef where this type is declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpProcedureType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpProcedureType.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpProcedureType.OverloadTypeList">
            <summary>
            The list of overloads.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpProcedureType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpProcedureType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpFunctionType">
            <summary>
            A C# function type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFunctionType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFunctionType.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFunctionType.OverloadTypeList">
            <summary>
            The list of overloads.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpFunctionType">
            <summary>
            A C# function type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IFunctionType)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IFunctionType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpFunctionType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IFunctionType,EaslyCompiler.ICSharpTypedef)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
            <param name="originatingTypedef">The typedef where this type is declared.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IFunctionType,EaslyCompiler.ICSharpTypedef)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpFunctionType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
            <param name="originatingTypedef">The typedef where this type is declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpFunctionType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFunctionType.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFunctionType.OverloadTypeList">
            <summary>
            The list of overloads.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFunctionType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFunctionType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpFormalGenericType">
            <summary>
            A C# formal generic type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFormalGenericType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFormalGenericType.Generic">
            <summary>
            The associated generic.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpFormalGenericType">
            <summary>
            A C# formal generic type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFormalGenericType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IFormalGenericType)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFormalGenericType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IFormalGenericType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpFormalGenericType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpFormalGenericType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFormalGenericType.Generic">
            <summary>
            The associated generic.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFormalGenericType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFormalGenericType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFormalGenericType.ConformingClassTypeList">
            <summary>
            The list of class types this type conforms to.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFormalGenericType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpClassType">
            <summary>
            A C# class type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClassType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClassType.TypeArgumentList">
            <summary>
            The list of generic arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpClassType.Class">
            <summary>
            The class on which this type is based.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpClassType">
            <summary>
            A C# class type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClassType.Create(EaslyCompiler.ICSharpContext,CompilerNode.IClassType)">
            <summary>
            Create a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClassType.#ctor(EaslyCompiler.ICSharpContext,CompilerNode.IClassType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpClassType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpClassType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassType.TypeArgumentList">
            <summary>
            The list of generic arguments.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassType.Class">
            <summary>
            The class on which this type is based.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpClassType.ConformingClassTypeList">
            <summary>
            The list of class types this type conforms to.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpClassType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClassType.GetSingletonString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats,System.String@)">
            <summary>
            Gets the singleton text corresponding to this type, if any.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
            <param name="text">The singleton text upon return, if successful.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpClassType.ToString">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpType">
            <summary>
            A C# type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpType.OriginatingTypedef">
            <summary>
            The typedef where this type is declared. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpType.IsUsedInCode">
            <summary>
            True if the type is used in output source code.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpType.NumberType">
            <summary>
            The number type if a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpType.SetUsedInCode">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpType.IsUsedInCode"/> property.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpType.GetSingletonString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats,System.String@)">
            <summary>
            Gets the singleton text corresponding to this type, if any.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
            <param name="text">The singleton text upon return, if successful.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpType">
            <summary>
            A C# type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpType.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICompiledType)">
            <summary>
            Creates a new C# type.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpType.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICompiledType,EaslyCompiler.ICSharpTypedef)">
            <summary>
            Creates a new C# type associated to a typedef.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
            <param name="typedef">The typedef.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpType.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpType.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICompiledType,EaslyCompiler.ICSharpTypedef)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpType"/> class.
            </summary>
            <param name="context">The creation context.</param>
            <param name="source">The Easly type from which the C# type is created.</param>
            <param name="originatingTypedef">The typedef where this type is declared.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpType.Source">
            <summary>
            The Easly type from which the C# type is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpType.OriginatingTypedef">
            <summary>
            The typedef where this type is declared. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpType.IsUsedInCode">
            <summary>
            True if the type is used in output source code.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpType.HasInterfaceText">
            <summary>
            True if the type can be used in the interface 'I' text format.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpType.IsNumberType">
            <summary>
            True if the type is a number.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpType.NumberType">
            <summary>
            The number type if a number.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpType.Type2CSharpString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats)">
            <summary>
            Get the name of a type.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpType.SetUsedInCode">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpType.IsUsedInCode"/> property.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpType.GetSingletonString(EaslyCompiler.ICSharpUsingCollection,EaslyCompiler.CSharpTypeFormats,EaslyCompiler.CSharpNamespaceFormats,System.String@)">
            <summary>
            Gets the singleton text corresponding to this type, if any.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="cSharpTypeFormat">The type format.</param>
            <param name="cSharpNamespaceFormat">The namespace format.</param>
            <param name="text">The singleton text upon return, if successful.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpType.TypeArguments2CSharpName(EaslyCompiler.ICSharpUsingCollection,System.Collections.Generic.IList{EaslyCompiler.ICSharpType},System.Boolean,System.Boolean)">
            <summary>
            Gets the string corresponding to the enumeration of C# generic arguments.
            </summary>
            <param name="usingCollection">The collection of using directives.</param>
            <param name="typeArgumentList">The list of arguments.</param>
            <param name="isWithInterface">If true, include the interface type.</param>
            <param name="isWithImplementation">If true, include the implementation type.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpSource`1">
            <summary>
            A C# node.
            </summary>
            <typeparam name="T">The corresponding compiler node.</typeparam>
        </member>
        <member name="P:EaslyCompiler.ICSharpSource`1.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpSource`1">
            <summary>
            A C# node.
            </summary>
            <typeparam name="T">The corresponding compiler node.</typeparam>
        </member>
        <member name="M:EaslyCompiler.CSharpSource`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpSource`1"/> class.
            </summary>
            <param name="source">The Easly node from which the C# node is created.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpSource`1.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpInheritance">
            <summary>
            A C# inheritance node.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpInheritance.AncestorClass">
            <summary>
            The class associated to this inheritance clause.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpInheritance">
            <summary>
            A C# inheritance node.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpInheritance.Create(CompilerNode.IInheritance,EaslyCompiler.ICSharpClass)">
            <summary>
            Create a new C# inheritance.
            </summary>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="ancestorClass">The ancestor class.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpInheritance.#ctor(CompilerNode.IInheritance,EaslyCompiler.ICSharpClass)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpInheritance"/> class.
            </summary>
            <param name="source">The Easly node from which the C# node is created.</param>
            <param name="ancestorClass">The ancestor class.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpInheritance.AncestorClass">
            <summary>
            The class associated to this inheritance clause.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpCreationFeature">
            <summary>
            A C# constructor.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreationFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreationFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreationFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpCreationFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpCreationFeature">
            <summary>
            A C# constructor.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCreationFeature.Create(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.ICreationFeature)">
            <summary>
            Create a new C# constructor.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCreationFeature.#ctor(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.ICreationFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpCreationFeature"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpCreationFeature.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpCreationFeature.OverloadList">
            <summary>
            The list of overloads.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpCreationFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCreationFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCreationFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCreationFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpCreationFeature.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpProcedureFeature">
            <summary>
            A C# procedure.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpProcedureFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpProcedureFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpProcedureFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpProcedureFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpProcedureFeature.OriginalPrecursor">
            <summary>
            The precursor if any. Can be null.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpProcedureFeature">
            <summary>
            A C# procedure.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureFeature.Create(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IProcedureFeature)">
            <summary>
            Create a new C# procedure.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureFeature.#ctor(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IProcedureFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpProcedureFeature"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpProcedureFeature.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpProcedureFeature.OverloadList">
            <summary>
            The list of overloads.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpProcedureFeature.OriginalPrecursor">
            <summary>
            The precursor if any. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpProcedureFeature.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpFunctionFeature">
            <summary>
            A C# function.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFunctionFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFunctionFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFunctionFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFunctionFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFunctionFeature.OriginalPrecursor">
            <summary>
            The precursor if any. Can be null.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpFunctionFeature">
            <summary>
            A C# function.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionFeature.Create(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IFunctionFeature)">
            <summary>
            Create a new C# function.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionFeature.#ctor(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IFunctionFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpFunctionFeature"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpFunctionFeature.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFunctionFeature.OverloadList">
            <summary>
            The list of overloads.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFunctionFeature.OriginalPrecursor">
            <summary>
            The precursor if any. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFunctionFeature.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpScopeAttributeFeature">
            <summary>
            A C# local attribute.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScopeAttributeFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScopeAttributeFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScopeAttributeFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScopeAttributeFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScopeAttributeFeature.DefaultValue">
            <summary>
            The default value. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpScopeAttributeFeature.Type">
            <summary>
            The attribute type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpScopeAttributeFeature.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpScopeAttributeFeature">
            <summary>
            A C# local attribute.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.Create(EaslyCompiler.ICSharpClass,CompilerNode.IScopeAttributeFeature)">
            <summary>
            Create a new C# local attribute.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.#ctor(EaslyCompiler.ICSharpClass,CompilerNode.IScopeAttributeFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpScopeAttributeFeature"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.Create(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpClass,CompilerNode.IScopeAttributeFeature)">
            <summary>
            Create a new C# local attribute.
            </summary>
            <param name="context">The initialization context.</param>
            <param name="owner">The class where the feature is declared.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.#ctor(EaslyCompiler.ICSharpContext,EaslyCompiler.ICSharpClass,CompilerNode.IScopeAttributeFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpScopeAttributeFeature"/> class.
            </summary>
            <param name="context">The initialization context.</param>
            <param name="owner">The class where the feature is declared.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpScopeAttributeFeature.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpScopeAttributeFeature.DefaultValue">
            <summary>
            The default value. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpScopeAttributeFeature.Type">
            <summary>
            The attribute type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.WriteCSharp(EaslyCompiler.ICSharpWriter)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpScopeAttributeFeature.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpConstantFeature">
            <summary>
            A C# constant.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConstantFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConstantFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConstantFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConstantFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConstantFeature.Type">
            <summary>
            The constant type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpConstantFeature.ConstantExpression">
            <summary>
            The constant value as an expression.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpConstantFeature">
            <summary>
            A C# constant.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpConstantFeature.Create(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IConstantFeature)">
            <summary>
            Create a new C# constant.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpConstantFeature.#ctor(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IConstantFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpConstantFeature"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpConstantFeature.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpConstantFeature.Type">
            <summary>
            The constant type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpConstantFeature.ConstantExpression">
            <summary>
            The constant value as an expression.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpConstantFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpConstantFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpConstantFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpConstantFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpConstantFeature.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpIndexerFeature">
            <summary>
            A C# indexer.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.IsForcedReadWrite">
            <summary>
            True if this feature must be both read and write.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.EntityType">
            <summary>
            Type of the entity returned by the indexer.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.IndexParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.GetterBody">
            <summary>
            Body of the getter. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.SetterBody">
            <summary>
            Body of the setter. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpIndexerFeature.OriginalPrecursor">
            <summary>
            The precursor if any. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpIndexerFeature.MarkAsForcedReadWrite">
            <summary>
            Mark this feature as both read and write.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpIndexerFeature">
            <summary>
            A C# indexer.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerFeature.Create(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IIndexerFeature)">
            <summary>
            Create a new C# indexer.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerFeature.#ctor(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IIndexerFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpIndexerFeature"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerFeature.IsForcedReadWrite">
            <summary>
            True if this feature must be both read and write.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerFeature.EntityType">
            <summary>
            Type of the entity returned by the indexer.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerFeature.IndexParameterList">
            <summary>
            The list of parameters.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerFeature.GetterBody">
            <summary>
            Body of the getter. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerFeature.SetterBody">
            <summary>
            Body of the setter. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpIndexerFeature.OriginalPrecursor">
            <summary>
            The precursor if any. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerFeature.MarkAsForcedReadWrite">
            <summary>
            Mark this feature as both read and write.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpIndexerFeature.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpPropertyFeature">
            <summary>
            A C# property.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.IsForcedReadWrite">
            <summary>
            True if this feature must be both read and write.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.HasSideBySideAttribute">
            <summary>
            The property should declare a side-by-side private field of the same type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.EntityType">
            <summary>
            Type of the entity returned by the property.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.GetterBody">
            <summary>
            Body of the getter. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.SetterBody">
            <summary>
            Body of the setter. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpPropertyFeature.OriginalPrecursor">
            <summary>
            The precursor if any. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpPropertyFeature.MarkAsForcedReadWrite">
            <summary>
            Mark this feature as both read and write.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpPropertyFeature.CheckSideBySideAttribute">
            <summary>
            Checks if a property should declare a side-by-side private field of the same type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpPropertyFeature.CheckInheritSideBySideAttribute(System.Collections.Generic.IDictionary{EaslyCompiler.ICompiledFeature,EaslyCompiler.ICSharpFeature})">
            <summary>
            Checks if a property should declare a side-by-side private field of the same type due to inherited ancestors.
            </summary>
            <param name="globalFeatureTable">The table of all known features.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpPropertyFeature">
            <summary>
            A C# property.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.Create(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IPropertyFeature)">
            <summary>
            Create a new C# property.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.#ctor(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IPropertyFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpPropertyFeature"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyFeature.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyFeature.IsForcedReadWrite">
            <summary>
            True if this feature must be both read and write.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyFeature.HasSideBySideAttribute">
            <summary>
            The property should declare a side-by-side private field of the same type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyFeature.EntityType">
            <summary>
            Type of the entity returned by the property.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyFeature.GetterBody">
            <summary>
            Body of the getter. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyFeature.SetterBody">
            <summary>
            Body of the setter. Can be null.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpPropertyFeature.OriginalPrecursor">
            <summary>
            The precursor if any. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.MarkAsForcedReadWrite">
            <summary>
            Mark this feature as both read and write.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.CheckSideBySideAttribute">
            <summary>
            Checks if a property should declare a side-by-side private field of the same type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.CheckInheritSideBySideAttribute(System.Collections.Generic.IDictionary{EaslyCompiler.ICompiledFeature,EaslyCompiler.ICSharpFeature})">
            <summary>
            Checks if a property should declare a side-by-side private field of the same type due to inherited ancestors.
            </summary>
            <param name="globalFeatureTable">The table of all known features.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpPropertyFeature.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpRoutineFeature">
            <summary>
            A C# routine.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpRoutineFeature.OverloadList">
            <summary>
            The list of overloads.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpAttributeFeature">
            <summary>
            A C# attribute.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttributeFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttributeFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttributeFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttributeFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttributeFeature.Type">
            <summary>
            The attribute type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpAttributeFeature.EnsureList">
            <summary>
            The list of ensure C# assertions.
            </summary>
        </member>
        <member name="T:EaslyCompiler.CSharpAttributeFeature">
            <summary>
            A C# attribute.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAttributeFeature.Create(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IAttributeFeature)">
            <summary>
            Create a new C# attribute.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttributeFeature.#ctor(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,CompilerNode.IAttributeFeature)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpAttributeFeature"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpAttributeFeature.Name">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAttributeFeature.Type">
            <summary>
            The attribute type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpAttributeFeature.EnsureList">
            <summary>
            The list of ensure C# assertions.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpAttributeFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttributeFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttributeFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttributeFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpAttributeFeature.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpOutputNode.WriteDown"/> flag.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ICSharpFeature">
            <summary>
            A C# feature.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature.Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature.CoexistingPrecursorName">
            <summary>
            The name of the precursor if it's implemented as a separate feature in the same class. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature.MarkAsOverride">
            <summary>
            Mark this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature.GetExportStatus(EaslyCompiler.ICSharpClass)">
            <summary>
            Gets the export status of a feature in the class that implements it.
            </summary>
            <param name="sourceClass">The class implementing the feature.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature.MarkPrecursorAsCoexisting(System.String)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpFeature.CoexistingPrecursorName"/> property.
            </summary>
            <param name="coexistingPrecursorName">The name of the precursor.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="T:EaslyCompiler.ICSharpFeature`1">
            <summary>
            A C# feature.
            </summary>
            <typeparam name="T">The corresponding compiler node.</typeparam>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature`1.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature`1.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature`1.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ICSharpFeature`1.CoexistingPrecursorName">
            <summary>
            The name of the precursor if it's implemented as a separate feature in the same class. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature`1.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature`1.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature`1.MarkAsOverride">
            <summary>
            Mark this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature`1.GetExportStatus(EaslyCompiler.ICSharpClass)">
            <summary>
            Gets the export status of a feature in the class that implements it.
            </summary>
            <param name="sourceClass">The class implementing the feature.</param>
        </member>
        <member name="M:EaslyCompiler.ICSharpFeature`1.MarkPrecursorAsCoexisting(System.String)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.ICSharpFeature`1.CoexistingPrecursorName"/> property.
            </summary>
            <param name="coexistingPrecursorName">The name of the precursor.</param>
        </member>
        <member name="T:EaslyCompiler.CSharpFeature`1">
            <summary>
            A C# feature.
            </summary>
            <typeparam name="T">The corresponding compiler node.</typeparam>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.#ctor(EaslyCompiler.ICSharpClass,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpFeature`1"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.#ctor(EaslyCompiler.ICSharpClass,EaslyCompiler.IFeatureInstance,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.CSharpFeature`1"/> class.
            </summary>
            <param name="owner">The class where the feature is declared.</param>
            <param name="instance">The source feature instance.</param>
            <param name="source">The source Easly feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpFeature`1.EaslyCompiler#ICSharpFeature#Source">
            <summary>
            The Easly node from which the C# node is created.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeature`1.Owner">
            <summary>
            The class where the feature is declared.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeature`1.Instance">
            <summary>
            The source feature instance.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeature`1.IsOverride">
            <summary>
            True if this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="P:EaslyCompiler.CSharpFeature`1.CoexistingPrecursorName">
            <summary>
            The name of the precursor if it's implemented as a separate feature in the same class. Can be null.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.InitOverloadsAndBodies(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature overloads and bodies.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.InitHierarchy(EaslyCompiler.ICSharpContext)">
            <summary>
            Initializes the feature precursor hierarchy.
            </summary>
            <param name="context">The initialization context.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.GetOutputFormat(EaslyCompiler.ICSharpQueryOverloadType,System.Int32@,System.Int32@)">
            <summary>
            Gets the feature output format.
            </summary>
            <param name="selectedOverloadType">The selected overload type.</param>
            <param name="outgoingParameterCount">The number of 'out' parameters upon return.</param>
            <param name="returnValueIndex">Index of the return value if the feature returns a value, -1 otherwise.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.WriteCSharp(EaslyCompiler.ICSharpWriter,EaslyCompiler.CSharpFeatureTextTypes,EaslyCompiler.CSharpExports,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Writes down the C# feature.
            </summary>
            <param name="writer">The stream on which to write.</param>
            <param name="featureTextType">The write mode.</param>
            <param name="exportStatus">The feature export status.</param>
            <param name="isLocal">True if the feature is local to the class.</param>
            <param name="isFirstFeature">True if the feature is the first in a list.</param>
            <param name="isMultiline">True if there is a separating line above.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.MarkAsOverride">
            <summary>
            Mark this feature as an override of a virtual parent.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.MarkPrecursorAsCoexisting(System.String)">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpFeature`1.CoexistingPrecursorName"/> property.
            </summary>
            <param name="coexistingPrecursorName">The name of the precursor.</param>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.GetExportStatus(EaslyCompiler.ICSharpClass)">
            <summary>
            Gets the export status of a feature in the class that implements it.
            </summary>
            <param name="sourceClass">The class implementing the feature.</param>
        </member>
        <member name="P:EaslyCompiler.CSharpFeature`1.WriteDown">
            <summary>
            True if the node should be produced.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.SetWriteDown">
            <summary>
            Sets the <see cref="P:EaslyCompiler.CSharpFeature`1.WriteDown"/> flag.
            </summary>
        </member>
        <member name="M:EaslyCompiler.CSharpFeature`1.ToString">
            <summary></summary>
        </member>
        <member name="T:EaslyCompiler.IUsingClause">
            <summary>
            A 'using' clause at the top of a namespace.
            </summary>
        </member>
        <member name="T:EaslyCompiler.UsingClause">
            <summary>
            A 'using' clause at the top of a namespace.
            </summary>
        </member>
        <member name="M:EaslyCompiler.UsingClause.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.UsingClause"/> class.
            </summary>
            <param name="name">The using clause name.</param>
        </member>
        <member name="P:EaslyCompiler.UsingClause.Name">
            <summary>
            The using clause name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITargetCSharp">
            <summary>
            An interface to write down C# source code from compiled Easly nodes.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITargetCSharp.Namespace">
            <summary>
            Namespace for the output code.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITargetCSharp.SourceFileName">
            <summary>
            The source file name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TargetCSharp">
            <summary>
            A class to write down C# source code from compiled Easly nodes.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TargetCSharp.#ctor(EaslyCompiler.ICompiler,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.TargetCSharp"/> class.
            </summary>
            <param name="compiler">The compiler object to translate.</param>
            <param name="outputNamespace">Namespace for the output code.</param>
        </member>
        <member name="P:EaslyCompiler.TargetCSharp.Namespace">
            <summary>
            Namespace for the output code.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TargetCSharp.SourceFileName">
            <summary>
            The source file name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TargetCSharp.Translate">
            <summary>
            Translates nodes from the compiler to the target language.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITargetLanguage">
            <summary>
            An interface to write down source code from compiled Easly nodes.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITargetLanguage.Compiler">
            <summary>
            The compiler object to translate.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITargetLanguage.OutputRootFolder">
            <summary>
            Folder where to output the result.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITargetLanguage.SingledGuid">
            <summary>
            Guid of the class where to single out a feature. Can be <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITargetLanguage.SingledName">
            <summary>
            Name of the class where to single out a feature. Null for the indexer.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITargetLanguage.ErrorList">
            <summary>
            Errors in last translation.
            </summary>
        </member>
        <member name="M:EaslyCompiler.ITargetLanguage.Translate">
            <summary>
            Translates nodes from the compiler to the target language.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TargetLanguage">
            <summary>
            A class to write down source code from compiled Easly nodes.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TargetLanguage.#ctor(EaslyCompiler.ICompiler)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.TargetLanguage"/> class.
            </summary>
            <param name="compiler">The compiler object to translate.</param>
        </member>
        <member name="P:EaslyCompiler.TargetLanguage.Compiler">
            <summary>
            The compiler object to translate.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TargetLanguage.ErrorList">
            <summary>
            Errors in last translation.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TargetLanguage.OutputRootFolder">
            <summary>
            Folder where to output the result.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TargetLanguage.SingledGuid">
            <summary>
            Guid of the class where to single out a feature. Can be <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="P:EaslyCompiler.TargetLanguage.SingledName">
            <summary>
            Name of the class where to single out a feature. Null for the indexer.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TargetLanguage.Translate">
            <summary>
            Translates nodes from the compiler to the target language.
            </summary>
        </member>
        <member name="T:EaslyCompiler.ITypeName">
            <summary>
            Name of a unique type.
            </summary>
        </member>
        <member name="P:EaslyCompiler.ITypeName.Name">
            <summary>
            The unique type name.
            </summary>
        </member>
        <member name="T:EaslyCompiler.TypeName">
            <summary>
            Name of a unique type.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TypeName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyCompiler.TypeName"/> class.
            </summary>
            <param name="name">The type name, not unique.</param>
        </member>
        <member name="P:EaslyCompiler.TypeName.Name">
            <summary>
            The unique type name.
            </summary>
        </member>
        <member name="M:EaslyCompiler.TypeName.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="T:CompilerNode.IKeywordEntityExpression">
            <summary>
            Compiler IKeywordEntityExpression.
            </summary>
        </member>
        <member name="T:CompilerNode.KeywordEntityExpression">
            <summary>
            Compiler IKeywordEntityExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.IsExpressionEqual(CompilerNode.IKeywordEntityExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.ResolveCompilerReferences(CompilerNode.IKeywordEntityExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@,EaslyCompiler.ICompiledFeature@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IKeywordEntityExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
            <param name="resolvedFinalFeature">The feature if the end of the path is a feature.</param>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.KeywordEntityExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordEntityExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IFeatureWithNumberType">
            <summary>
            Compiler IFeature if it can be of a number type.
            </summary>
        </member>
        <member name="P:CompilerNode.IFeatureWithNumberType.NumberKind">
            <summary>
            The number kind if the type is a number.
            </summary>
        </member>
        <member name="T:CompilerNode.IFeatureWithPrecursor">
            <summary>
            Compiler IFeature that can have a precursor.
            </summary>
        </member>
        <member name="P:CompilerNode.IFeatureWithPrecursor.IsCallingPrecursor">
            <summary>
            True if the feature is calling a precursor.
            </summary>
        </member>
        <member name="M:CompilerNode.IFeatureWithPrecursor.MarkAsCallingPrecursor">
            <summary>
            Sets the <see cref="P:CompilerNode.IFeatureWithPrecursor.IsCallingPrecursor"/> property.
            </summary>
        </member>
        <member name="T:CompilerNode.IArgument">
            <summary>
            Compiler IArgument.
            </summary>
        </member>
        <member name="P:CompilerNode.IArgument.ArgumentToString">
            <summary>
            Gets a string representation of the argument.
            </summary>
        </member>
        <member name="P:CompilerNode.IArgument.ResolvedResult">
            <summary>
            Types of expression results for the argument.
            </summary>
        </member>
        <member name="P:CompilerNode.IArgument.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.IArgument.ExpressionConstant">
            <summary>
            The constant expression, if assigned.
            </summary>
        </member>
        <member name="P:CompilerNode.IArgument.ResolvedException">
            <summary>
            List of exceptions the argument can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.IArgument.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IArgument.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IArgument.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Argument">
            <summary>
            Argument helper class.
            </summary>
        </member>
        <member name="M:CompilerNode.Argument.IsArgumentListEqual(System.Collections.Generic.IList{CompilerNode.IArgument},System.Collections.Generic.IList{CompilerNode.IArgument})">
            <summary>
            Compares two lists of arguments.
            </summary>
            <param name="argumentList1">The first list.</param>
            <param name="argumentList2">The second list.</param>
        </member>
        <member name="M:CompilerNode.Argument.IsArgumentEqual(CompilerNode.IArgument,CompilerNode.IArgument)">
            <summary>
            Compares two arguments.
            </summary>
            <param name="argument1">The first argument.</param>
            <param name="argument2">The second argument.</param>
        </member>
        <member name="M:CompilerNode.Argument.ArgumentListToString(System.Collections.IEnumerable)">
            <summary>
            Gets a string representation of a list of arguments.
            </summary>
            <param name="argumentList">The list of arguments.</param>
        </member>
        <member name="M:CompilerNode.Argument.Validate(System.Collections.Generic.IList{CompilerNode.IArgument},System.Collections.Generic.List{EaslyCompiler.IExpressionType},EaslyCompiler.TypeArgumentStyles@,EaslyCompiler.IErrorList)">
            <summary>
            Validate and merge a list of arguments.
            </summary>
            <param name="argumentList">The list of arguments.</param>
            <param name="mergedArgumentList">The merged result.</param>
            <param name="argumentStyle">The validated style.</param>
            <param name="errorList">List of errors found.</param>
        </member>
        <member name="M:CompilerNode.Argument.ArgumentsConformToParameters(System.Collections.Generic.IList{Easly.ISealableList{EaslyCompiler.IParameter}},System.Collections.Generic.IReadOnlyList{EaslyCompiler.IExpressionType},EaslyCompiler.TypeArgumentStyles,EaslyCompiler.IErrorList,EaslyCompiler.ISource,System.Int32@)">
            <summary>
            Checks if actual arguments of a call conform to expected parameters.
            </summary>
            <param name="parameterTableList">The list of expected parameters.</param>
            <param name="arguments">The list of arguments.</param>
            <param name="argumentStyle">The argument-passing style.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="source">The source to use for errors.</param>
            <param name="selectedIndex">The selected index in the list of overloads upon return.</param>
        </member>
        <member name="M:CompilerNode.Argument.CheckAssignmentConformance(System.Collections.Generic.IList{Easly.ISealableList{EaslyCompiler.IParameter}},System.Collections.Generic.IList{Easly.ISealableList{EaslyCompiler.IParameter}},System.Collections.Generic.IList{CompilerNode.IArgument},CompilerNode.IExpression,EaslyCompiler.ICompiledType,EaslyCompiler.IErrorList,EaslyCompiler.ISource,EaslyCompiler.IFeatureCall@)">
            <summary>
            Checks the validity of an assignment of a source to a destination, with arguments.
            </summary>
            <param name="parameterTableList">The list of expected parameters.</param>
            <param name="resultTableList">The list of results.</param>
            <param name="argumentList">The list of actual arguments.</param>
            <param name="sourceExpression">Expression in the assignment.</param>
            <param name="destinationType">The expected type for the expression.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="source">The source to use when reporting errors.</param>
            <param name="featureCall">Details of the feature call.</param>
        </member>
        <member name="M:CompilerNode.Argument.AddConstantArguments(CompilerNode.IExpression,EaslyCompiler.IResultType,System.Collections.Generic.IList{CompilerNode.IArgument},Easly.ISealableList{CompilerNode.IExpression},EaslyCompiler.ILanguageConstant@)">
            <summary>
            Adds to a list of constant sources from a list of arguments.
            </summary>
            <param name="expression">The source expression.</param>
            <param name="resultType">The expression result type.</param>
            <param name="argumentList">The list of arguments.</param>
            <param name="constantSourceList">The list of constant sources.</param>
            <param name="expressionConstant">The constant if there are no arguments upon return.</param>
        </member>
        <member name="M:CompilerNode.Argument.AddConstantArguments(System.Collections.Generic.IList{CompilerNode.IArgument},Easly.ISealableList{CompilerNode.IExpression})">
            <summary>
            Adds to a list of constant sources from a list of arguments.
            </summary>
            <param name="argumentList">The list of arguments.</param>
            <param name="constantSourceList">The list of constant sources.</param>
        </member>
        <member name="T:CompilerNode.IAssignmentArgument">
            <summary>
            Compiler IAssignmentArgument.
            </summary>
        </member>
        <member name="P:CompilerNode.IAssignmentArgument.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AssignmentArgument.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.AssignmentArgument">
            <summary>
            Compiler IAssignmentArgument.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AssignmentArgument.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.ResolvedResult">
            <summary>
            Types of expression results for the argument.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.ResolvedException">
            <summary>
            List of exceptions the argument can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.ExpressionConstant">
            <summary>
            The constant expression, if assigned.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.IsAssignmentArgumentEqual(CompilerNode.IAssignmentArgument,CompilerNode.IAssignmentArgument)">
            <summary>
            Compares two assignment arguments.
            </summary>
            <param name="argument1">The first argument.</param>
            <param name="argument2">The second argument.</param>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.AssignmentArgument.ArgumentToString">
            <summary>
            Gets a string representation of the argument.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentArgument.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPositionalArgument">
            <summary>
            Compiler IPositionalArgument.
            </summary>
        </member>
        <member name="T:CompilerNode.PositionalArgument">
            <summary>
            Compiler IPositionalArgument.
            </summary>
        </member>
        <member name="M:CompilerNode.PositionalArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.PositionalArgument"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.PositionalArgument.#ctor(CompilerNode.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.PositionalArgument"/> class.
            </summary>
            <param name="source">The source expression</param>
        </member>
        <member name="P:CompilerNode.PositionalArgument.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalArgument.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalArgument.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalArgument.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalArgument.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalArgument.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PositionalArgument.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PositionalArgument.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PositionalArgument.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PositionalArgument.ResolvedResult">
            <summary>
            Types of expression results for the argument.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalArgument.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalArgument.ExpressionConstant">
            <summary>
            The constant expression, if assigned.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalArgument.ResolvedException">
            <summary>
            List of exceptions the argument can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.PositionalArgument.IsPositionalArgumentEqual(CompilerNode.IPositionalArgument,CompilerNode.IPositionalArgument)">
            <summary>
            Compares two positional arguments.
            </summary>
            <param name="argument1">The first argument.</param>
            <param name="argument2">The second argument.</param>
        </member>
        <member name="M:CompilerNode.PositionalArgument.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.PositionalArgument.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.PositionalArgument.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.PositionalArgument.ArgumentToString">
            <summary>
            Gets a string representation of the argument.
            </summary>
        </member>
        <member name="M:CompilerNode.PositionalArgument.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IAssertion">
            <summary>
            Compiler IAssertion.
            </summary>
        </member>
        <member name="P:CompilerNode.IAssertion.ResolvedContract">
            <summary>
            The resolved contract with the associated tag.
            </summary>
        </member>
        <member name="P:CompilerNode.IAssertion.ResolvedException">
            <summary>
            List of exceptions the assertion can throw.
            </summary>
        </member>
        <member name="T:CompilerNode.Assertion">
            <summary>
            Compiler IAssertion.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Assertion.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Assertion.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Assertion.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Assertion.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.ResolvedContract">
            <summary>
            The resolved contract with the associated tag.
            </summary>
        </member>
        <member name="P:CompilerNode.Assertion.ResolvedException">
            <summary>
            List of exceptions the assertion can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.Assertion.IsAssertionListEqual(System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion})">
            <summary>
            Checks that two lists of assertions are equal.
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
        </member>
        <member name="M:CompilerNode.Assertion.IsAssertionEqual(CompilerNode.IAssertion,CompilerNode.IAssertion)">
            <summary>
            Checks that two assertions are equal.
            </summary>
            <param name="assertion1">The first assertion.</param>
            <param name="assertion2">The second assertion.</param>
        </member>
        <member name="T:CompilerNode.IAttachment">
            <summary>
            Compiler IAttachment.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttachment.AttachTypeList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Attachment.AttachTypeBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttachment.ResolvedResult">
            <summary>
            Types of results of the attachment.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttachment.ResolvedException">
            <summary>
            List of exceptions the attachment can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttachment.ResolvedLocalEntitiesList">
            <summary>
            List of resolved features for each attached entity.
            </summary>
        </member>
        <member name="M:CompilerNode.IAttachment.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IAttachment.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IAttachment.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Attachment">
            <summary>
            Compiler IAttachment.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.AttachTypeList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Attachment.AttachTypeBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Attachment.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Attachment.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Attachment.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Attachment.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Attachment.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Attachment.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.ResolvedResult">
            <summary>
            Types of results of the attachment.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.ResolvedException">
            <summary>
            List of exceptions the attachment can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.Attachment.ResolvedLocalEntitiesList">
            <summary>
            List of resolved features for each attached entity.
            </summary>
        </member>
        <member name="M:CompilerNode.Attachment.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.Attachment.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.Attachment.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IBlock`2">
            <summary>
            Compiler IBlock.
            </summary>
            <typeparam name="TINode">Items interface type.</typeparam>
            <typeparam name="TNode">Items type.</typeparam>
        </member>
        <member name="T:CompilerNode.Block`2">
            <summary>
            Compiler IBlock.
            </summary>
            <typeparam name="TINode">Items interface type.</typeparam>
            <typeparam name="TNode">Items type.</typeparam>
        </member>
        <member name="T:CompilerNode.IBlockList`2">
            <summary>
            Compiler IBlockList.
            </summary>
            <typeparam name="TINode">Items interface type.</typeparam>
            <typeparam name="TNode">Items type.</typeparam>
        </member>
        <member name="T:CompilerNode.BlockList`2">
            <summary>
            Compiler IBlockList.
            </summary>
            <typeparam name="TINode">Items interface type.</typeparam>
            <typeparam name="TNode">Items type.</typeparam>
        </member>
        <member name="T:CompilerNode.IBody">
            <summary>
            Compiler IBody.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.ResolvedTagTable">
            <summary>
            Tags for tag expressions.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.ResolvedResult">
            <summary>
            Types of results.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.ResolvedRequireList">
            <summary>
            Resolved list of require assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.ResolvedEnsureList">
            <summary>
            Resolved list of ensure assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.ResolvedExceptionIdentifierList">
            <summary>
            Resolved list of exceptions the body can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.IBody.ResolvedInstructionList">
            <summary>
            Resolved list of instructions in the body.
            </summary>
        </member>
        <member name="M:CompilerNode.IBody.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IBody.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IBody.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IDeferredBody">
            <summary>
            Compiler IDeferredBody.
            </summary>
        </member>
        <member name="T:CompilerNode.DeferredBody">
            <summary>
            Compiler IDeferredBody.
            </summary>
        </member>
        <member name="M:CompilerNode.DeferredBody.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.DeferredBody"/> class.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.DeferredBody.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.DeferredBody.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.DeferredBody.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.DeferredBody.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.DeferredBody.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.DeferredBody.ResolvedTagTable">
            <summary>
            Tags for tag expressions.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.ResolvedResult">
            <summary>
            Types of results.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.ResolvedRequireList">
            <summary>
            Resolved list of require assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.ResolvedEnsureList">
            <summary>
            Resolved list of ensure assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.ResolvedExceptionIdentifierList">
            <summary>
            Resolved list of exceptions the body can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.ResolvedInstructionList">
            <summary>
            Resolved list of instructions in the body.
            </summary>
        </member>
        <member name="P:CompilerNode.DeferredBody.IsDeferredBody">
            <summary>
            Indicates if the body is deferred in another class.
            </summary>
        </member>
        <member name="M:CompilerNode.DeferredBody.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.DeferredBody.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.DeferredBody.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.DeferredBody.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="T:CompilerNode.IGetterDeferredBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IDeferredBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.GetterDeferredBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IDeferredBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IOverloadDeferredBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IDeferredBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.OverloadDeferredBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IDeferredBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ISetterDeferredBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IDeferredBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.SetterDeferredBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IDeferredBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IGetterEffectiveBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IEffectiveBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.GetterEffectiveBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IEffectiveBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IOverloadEffectiveBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IEffectiveBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.OverloadEffectiveBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IEffectiveBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ISetterEffectiveBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IEffectiveBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.SetterEffectiveBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IEffectiveBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IEffectiveBody">
            <summary>
            Compiler IEffectiveBody.
            </summary>
        </member>
        <member name="P:CompilerNode.IEffectiveBody.EntityDeclarationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.EffectiveBody.EntityDeclarationBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IEffectiveBody.BodyInstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.EffectiveBody.BodyInstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IEffectiveBody.ExceptionHandlerList">
            <summary>
            Replicated list from <see cref="P:BaseNode.EffectiveBody.ExceptionHandlerBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.EffectiveBody">
            <summary>
            Compiler IEffectiveBody.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.EntityDeclarationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.EffectiveBody.EntityDeclarationBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.BodyInstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.EffectiveBody.BodyInstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ExceptionHandlerList">
            <summary>
            Replicated list from <see cref="P:BaseNode.EffectiveBody.ExceptionHandlerBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.EffectiveBody.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.EffectiveBody.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.EffectiveBody.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.EffectiveBody.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ResolvedTagTable">
            <summary>
            Tags for tag expressions.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ResolvedResult">
            <summary>
            Types of results.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ResolvedRequireList">
            <summary>
            Resolved list of require assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ResolvedEnsureList">
            <summary>
            Resolved list of ensure assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ResolvedExceptionIdentifierList">
            <summary>
            Resolved list of exceptions the body can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.ResolvedInstructionList">
            <summary>
            Resolved list of instructions in the body.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.IsDeferredBody">
            <summary>
            Indicates if the body is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.EffectiveBody.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.EffectiveBody.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.EffectiveBody.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.EffectiveBody.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IExternBody">
            <summary>
            Compiler IExternBody.
            </summary>
        </member>
        <member name="T:CompilerNode.ExternBody">
            <summary>
            Compiler IExternBody.
            </summary>
        </member>
        <member name="M:CompilerNode.ExternBody.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ExternBody"/> class.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ExternBody.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.ExternBody.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ExternBody.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ExternBody.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ExternBody.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ExternBody.ResolvedTagTable">
            <summary>
            Tags for tag expressions.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.ResolvedResult">
            <summary>
            Types of results.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.ResolvedRequireList">
            <summary>
            Resolved list of require assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.ResolvedEnsureList">
            <summary>
            Resolved list of ensure assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.ResolvedExceptionIdentifierList">
            <summary>
            Resolved list of exceptions the body can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.ResolvedInstructionList">
            <summary>
            Resolved list of instructions in the body.
            </summary>
        </member>
        <member name="P:CompilerNode.ExternBody.IsDeferredBody">
            <summary>
            Indicates if the body is deferred in another class.
            </summary>
        </member>
        <member name="M:CompilerNode.ExternBody.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ExternBody.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ExternBody.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ExternBody.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="T:CompilerNode.IGetterExternBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IExternBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.GetterExternBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IExternBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IOverloadExternBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IExternBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.OverloadExternBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IExternBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ISetterExternBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IExternBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.SetterExternBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IExternBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IGetterPrecursorBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IPrecursorBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.GetterPrecursorBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IPrecursorBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IOverloadPrecursorBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IPrecursorBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.OverloadPrecursorBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IPrecursorBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IPrecursorBody">
            <summary>
            Compiler IPrecursorBody.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorBody.ResolvedAncestorTypeName">
            <summary>
            The resolved precursor type name.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorBody.ResolvedAncestorType">
            <summary>
            The resolved precursor type name.
            </summary>
        </member>
        <member name="T:CompilerNode.PrecursorBody">
            <summary>
            Compiler IPrecursorBody.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorBody.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.PrecursorBody"/> class.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Body.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorBody.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorBody.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PrecursorBody.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PrecursorBody.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ResolvedTagTable">
            <summary>
            Tags for tag expressions.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ResolvedResult">
            <summary>
            Types of results.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ResolvedRequireList">
            <summary>
            Resolved list of require assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ResolvedEnsureList">
            <summary>
            Resolved list of ensure assertions.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ResolvedExceptionIdentifierList">
            <summary>
            Resolved list of exceptions the body can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ResolvedInstructionList">
            <summary>
            Resolved list of instructions in the body.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.IsDeferredBody">
            <summary>
            Indicates if the body is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ResolvedAncestorTypeName">
            <summary>
            The resolved precursor type name.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorBody.ResolvedAncestorType">
            <summary>
            The resolved precursor type name.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorBody.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorBody.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.PrecursorBody.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.ISetterPrecursorBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IPrecursorBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.SetterPrecursorBody">
            <summary>
            Specialization of <see cref="T:CompilerNode.IPrecursorBody"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IClass">
            <summary>
            Compiler IClass.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.FullClassPath">
            <summary>
            The class path with replication info.
            </summary>
        </member>
        <member name="M:CompilerNode.IClass.SetFullClassPath">
            <summary>
            Initializes the class path.
            </summary>
        </member>
        <member name="M:CompilerNode.IClass.SetFullClassPath(System.String,System.String)">
            <summary>
            Initializes the class path with replication info.
            </summary>
            <param name="replicationPattern">The replication pattern used.</param>
            <param name="source">The source text.</param>
        </member>
        <member name="P:CompilerNode.IClass.ClassCounter">
            <summary>
            The class-specific counter, for the <see cref="F:BaseNode.PreprocessorMacro.Counter"/> macro.
            </summary>
        </member>
        <member name="M:CompilerNode.IClass.IncrementClassCounter">
            <summary>
            Increments <see cref="P:CompilerNode.IClass.ClassCounter"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ResolvedAsCompiledType">
            <summary>
            The type for a pre-compiled class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.InvariantList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.InvariantBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ConversionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.ConversionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.FeatureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.FeatureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ClassReplicateList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.ClassReplicateBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.DiscreteList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.DiscreteBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.InheritanceList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.InheritanceBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.TypedefList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.TypedefBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ExportList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.ExportBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ImportList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.ImportBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.GenericList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.GenericBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ValidClassName">
            <summary>
            The class name, verified as valid.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ValidSourceName">
            <summary>
            The class source name, verified as valid.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ImportedLibraryList">
            <summary>
            The list of imported libraries.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ImportedClassTable">
            <summary>
            The table of imported classes.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.IsEnumeration">
            <summary>
            True if the class is an enumeration (inherits from one of the enumeration language classes).
            </summary>
        </member>
        <member name="M:CompilerNode.IClass.CheckClassNames(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},System.Collections.Generic.IList{CompilerNode.IClass},EaslyCompiler.IErrorList)">
            <summary>
            Validates the class name and class source name, and update <see cref="P:CompilerNode.IClass.ValidClassName"/> and <see cref="P:CompilerNode.IClass.ValidSourceName"/>.
            </summary>
            <param name="classTable">Table of valid class names and their sources, updated upon return.</param>
            <param name="validatedClassList">List of classes with valid names, updated upon return.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if class names are valid.</returns>
        </member>
        <member name="M:CompilerNode.IClass.CheckClassConsistency(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.ILibrary}},Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},EaslyCompiler.IErrorList)">
            <summary>
            Validate a class import clauses.
            </summary>
            <param name="libraryTable">Imported libraries.</param>
            <param name="classTable">Imported classes.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if imports are valid.</returns>
        </member>
        <member name="P:CompilerNode.IClass.LocalGenericTable">
            <summary>
            The table of resolved generics arguments for this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.GenericTable">
            <summary>
            Table of all resolved generics in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.LocalDiscreteTable">
            <summary>
            Table of resolved discretes defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.DiscreteTable">
            <summary>
            Table of all resolved discretes in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.DiscreteWithValueTable">
            <summary>
            Table of all resolved discretes in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.LocalTypedefTable">
            <summary>
            Table of resolved typedefs defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.TypedefTable">
            <summary>
            Table of all resolved typedefs in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.LocalFeatureTable">
            <summary>
            Table of resolved features defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.FeatureTable">
            <summary>
            Table of all resolved features in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.InheritedClassTypeTable">
            <summary>
            Table of inherited types by their class type.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.LocalNamespaceTable">
            <summary>
            Table of resolved namespaces defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.LocalExportTable">
            <summary>
            Table of resolved exports defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ExportTable">
            <summary>
            Table of all resolved exports in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ConversionFromTable">
            <summary>
            Table of all resolved conversion procedures in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ConversionToTable">
            <summary>
            Table of all resolved conversion queries in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ResolvedClassTypeName">
            <summary>
            The type name for this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ResolvedClassType">
            <summary>
            The type from this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.GenericInstanceList">
            <summary>
            List of types corresponding to each generic argument.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.TypeTable">
            <summary>
            Table of all types used in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ClassIndexer">
            <summary>
            The class indexer, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ClassGroupList">
            <summary>
            List of single classes accumulated as inheritance clauses are processed.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ClassGroup">
            <summary>
            Combined list of all classes in the same group.
            </summary>
        </member>
        <member name="M:CompilerNode.IClass.UpdateClassGroup(System.Collections.Generic.IList{CompilerNode.IClass})">
            <summary>
            Adds one or more classes to a group.
            </summary>
            <param name="inheritedSingleClassList">The list of classes added.</param>
        </member>
        <member name="P:CompilerNode.IClass.InheritanceTable">
            <summary>
            Table of inherited types.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ResolvedImportedClassTable">
            <summary>
            The resolved table of imported classes.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.BodyList">
            <summary>
            List of resolved bodies.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.CommandOverloadList">
            <summary>
            List of resolved command overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.QueryOverloadList">
            <summary>
            List of resolved query overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.NodeWithDefaultList">
            <summary>
            List of expressions that are default values of features of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.NodeWithNumberConstantList">
            <summary>
            List of expressions that are constant numbers in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ImportedLanguageTypeTable">
            <summary>
            Table of imported language types.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.NamespaceTable">
            <summary>
            All resolved names.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ResolvedBodyTagList">
            <summary>
            All resolved bodies.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ResolvedNodeWithDefaultList">
            <summary>
            List of resolved expressions that are default values of features of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ResolvedNodeWithNumberConstantList">
            <summary>
            List of resolved expressions that are constant numbers in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.InheritedBodyTagListTable">
            <summary>
            Table of inherited bodies.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.ResolvedBodyList">
            <summary>
            List of bodies with resolved instructions
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.AssignedDiscreteTable">
            <summary>
            Table of computer-assigned discrete values.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.HasExternBody">
            <summary>
            True if the class contains at least one extern body.
            </summary>
        </member>
        <member name="P:CompilerNode.IClass.InitializedObjectList">
            <summary>
            List of initialized objects of this class.
            </summary>
        </member>
        <member name="M:CompilerNode.IClass.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IClass.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IClass.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Class">
            <summary>
            Compiler IClass.
            </summary>
        </member>
        <member name="F:CompilerNode.Class.CompilerPathGuid">
            <summary>
            Guid to use int the path of compiler classes.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ClassAny">
            <summary>
            Compiler class 'Any'.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ClassAnyReference">
            <summary>
            Compiler class 'Any Reference'.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ClassAnyValue">
            <summary>
            Compiler class 'Any Value'.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.Class"/> class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.FullClassPath">
            <summary>
            The class path with replication info.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.SetFullClassPath">
            <summary>
            Initializes the class path.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.SetFullClassPath(System.String,System.String)">
            <summary>
            Initializes the class path with replication info.
            </summary>
            <param name="replicationPattern">The replication pattern used.</param>
            <param name="source">The source text.</param>
        </member>
        <member name="P:CompilerNode.Class.ClassCounter">
            <summary>
            The class-specific counter, for the <see cref="F:BaseNode.PreprocessorMacro.Counter"/> macro.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.IncrementClassCounter">
            <summary>
            Increments <see cref="P:CompilerNode.Class.ClassCounter"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.IsEnumeration">
            <summary>
            True if the class is an enumeration (inherits from one of the enumeration language classes).
            </summary>
        </member>
        <member name="P:CompilerNode.Class.InvariantList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.InvariantBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ConversionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.ConversionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.FeatureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.FeatureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ClassReplicateList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.ClassReplicateBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.DiscreteList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.DiscreteBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.InheritanceList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.InheritanceBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.TypedefList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.TypedefBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ExportList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.ExportBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ImportList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.ImportBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.GenericList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Class.GenericBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Class.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Class.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Class.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Class.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ValidClassName">
            <summary>
            The class name, verified as valid.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ValidSourceName">
            <summary>
            The class source name, verified as valid.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ImportedLibraryList">
            <summary>
            The list of imported libraries.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ImportedClassTable">
            <summary>
            The table of imported classes.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.CheckClassNames(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},System.Collections.Generic.IList{CompilerNode.IClass},EaslyCompiler.IErrorList)">
            <summary>
            Validates the class name and class source name, and update <see cref="P:CompilerNode.Class.ValidClassName"/> and <see cref="P:CompilerNode.Class.ValidSourceName"/>.
            </summary>
            <param name="classTable">Table of valid class names and their sources, updated upon return.</param>
            <param name="validatedClassList">List of classes with valid names, updated upon return.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if class names are valid.</returns>
        </member>
        <member name="M:CompilerNode.Class.CheckClassConsistency(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.ILibrary}},Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},EaslyCompiler.IErrorList)">
            <summary>
            Validates a class import clauses.
            </summary>
            <param name="libraryTable">Imported libraries.</param>
            <param name="classTable">Imported classes.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if imports are valid.</returns>
        </member>
        <member name="M:CompilerNode.Class.MergeClassTables(Easly.ISealableDictionary{System.String,EaslyCompiler.IImportedClass},Easly.ISealableDictionary{System.String,EaslyCompiler.IImportedClass},CompilerNode.IImport,BaseNode.ImportType,EaslyCompiler.IErrorList)">
            <summary>
            Merges a class import with previous imports.
            </summary>
            <param name="importedClassTable">The already resolved imports.</param>
            <param name="mergedClassTable">The new classes to import.</param>
            <param name="importLocation">The import location.</param>
            <param name="mergedImportType">The import specification for all <paramref name="mergedClassTable"/>.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if the merge is successful.</returns>
        </member>
        <member name="P:CompilerNode.Class.LocalGenericTable">
            <summary>
            The table of resolved generics arguments for this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.GenericTable">
            <summary>
            Table of all resolved generics in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.LocalDiscreteTable">
            <summary>
            Table of resolved discretes defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.DiscreteTable">
            <summary>
            Table of all resolved discretes in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.DiscreteWithValueTable">
            <summary>
            Table of all resolved discretes in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.LocalTypedefTable">
            <summary>
            Table of resolved typedefs defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.TypedefTable">
            <summary>
            Table of all resolved typedefs in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.LocalFeatureTable">
            <summary>
            Table of resolved features defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.FeatureTable">
            <summary>
            Table of all resolved features in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.InheritedClassTypeTable">
            <summary>
            Table of inherited types by their class type.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.LocalNamespaceTable">
            <summary>
            Table of resolved namespaces defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.LocalExportTable">
            <summary>
            Table of resolved exports defined in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ExportTable">
            <summary>
            Table of all resolved exports in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ConversionFromTable">
            <summary>
            Table of all resolved conversion procedures in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ConversionToTable">
            <summary>
            Table of all resolved conversion queries in this class, direct or inherited.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ResolvedClassTypeName">
            <summary>
            The type name for this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ResolvedClassType">
            <summary>
            The type from this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.GenericInstanceList">
            <summary>
            List of types corresponding to each generic argument.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.TypeTable">
            <summary>
            Table of all types used in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ClassIndexer">
            <summary>
            The class indexer, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ClassGroupList">
            <summary>
            List of single classes accumulated as inheritance clauses are processed.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ClassGroup">
            <summary>
            Combined list of all classes in the same group.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.UpdateClassGroup(System.Collections.Generic.IList{CompilerNode.IClass})">
            <summary>
            Adds one or more classes to a group.
            </summary>
            <param name="inheritedSingleClassList">The list of classes added.</param>
        </member>
        <member name="P:CompilerNode.Class.InheritanceTable">
            <summary>
            Table of inherited types.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ResolvedImportedClassTable">
            <summary>
            The resolved table of imported classes.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ResolvedAsCompiledType">
            <summary>
            The type for a pre-compiled class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.BodyList">
            <summary>
            List of resolved bodies.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.CommandOverloadList">
            <summary>
            List of resolved command overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.QueryOverloadList">
            <summary>
            List of resolved query overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.NodeWithDefaultList">
            <summary>
            List of resolved expressions that are default values of features of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.NodeWithNumberConstantList">
            <summary>
            List of resolved expressions that are constant numbers in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ImportedLanguageTypeTable">
            <summary>
            Table of imported language types.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.NamespaceTable">
            <summary>
            All resolved names.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ResolvedBodyTagList">
            <summary>
            All resolved bodies.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ResolvedNodeWithDefaultList">
            <summary>
            List of resolved expressions that are default values of features of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ResolvedNodeWithNumberConstantList">
            <summary>
            List of resolved expressions that are constant numbers in this class.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.InheritedBodyTagListTable">
            <summary>
            Table of inherited bodies.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.ResolvedBodyList">
            <summary>
            List of bodies with resolved instructions
            </summary>
        </member>
        <member name="P:CompilerNode.Class.AssignedDiscreteTable">
            <summary>
            Table of computer-assigned discrete values.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.HasExternBody">
            <summary>
            True if the class contains at least one extern body.
            </summary>
        </member>
        <member name="P:CompilerNode.Class.InitializedObjectList">
            <summary>
            List of initialized objects of this class.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.Class.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.Class.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.Class.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ICommandOverload">
            <summary>
            Compiler ICommandOverload.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverload.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverload.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverload.IsDeferredOverload">
            <summary>
            Indicates if the overload is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverload.HasExternBody">
            <summary>
            True if the overload contains an extern body.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverload.HasPrecursorBody">
            <summary>
            True if the overload contains a precursor body.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverload.ParameterTable">
            <summary>
            List of overload parameters.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverload.ResolvedAssociatedType">
            <summary>
            The resolved associated type.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverload.ResolvedBody">
            <summary>
            The resolved body.
            </summary>
        </member>
        <member name="M:CompilerNode.ICommandOverload.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ICommandOverload.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ICommandOverload.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.CommandOverload">
            <summary>
            Compiler ICommandOverload.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverload.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverload.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.CommandOverload.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverload.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.CommandOverload.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.CommandOverload.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.CommandOverload.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.IsDeferredOverload">
            <summary>
            Indicates if the overload is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.HasExternBody">
            <summary>
            True if the overload contains an extern body.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.HasPrecursorBody">
            <summary>
            True if the overload contains a precursor body.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.ParameterTable">
            <summary>
            List of overload parameters.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.ResolvedAssociatedType">
            <summary>
            The resolved associated type.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverload.ResolvedBody">
            <summary>
            The resolved body.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverload.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverload.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.CommandOverload.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.CommandOverload.CommandOverloadToString">
            <summary>
            Gets a string representation of the overload.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverload.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ICommandOverloadType">
            <summary>
            Compiler ICommandOverloadType.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverloadType.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverloadType.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverloadType.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverloadType.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverloadType.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverloadType.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverloadType.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverloadType.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverloadType.TypeName">
            <summary>
            Type name associated to this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandOverloadType.ParameterTable">
            <summary>
            Table of parameters for this overload.
            </summary>
        </member>
        <member name="T:CompilerNode.CommandOverloadType">
            <summary>
            Compiler ICommandOverloadType.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverloadType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.CommandOverloadType"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverloadType.#ctor(System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.ParameterEndStatus,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.CommandOverloadType"/> class.
            </summary>
            <param name="parameterList">The list of parameters.</param>
            <param name="parameterEnd">The closed or open status.</param>
            <param name="requireList">The list of require assertions.</param>
            <param name="ensureList">The list of ensure assertions.</param>
            <param name="exceptionIdentifierList">The list of exceptions this overload can throw.</param>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverloadType.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverloadType.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverloadType.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandOverloadType.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverloadType.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverloadType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.CommandOverloadType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.CommandOverloadType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.TypeName">
            <summary>
            Type name associated to this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandOverloadType.ParameterTable">
            <summary>
            Table of parameters for this overload.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandOverloadType.InstanciateCommandOverloadType(EaslyCompiler.ICompiledTypeWithFeature,CompilerNode.ICommandOverloadType@)">
            <summary>
            Finds or creates an overload type with the corresponding parameters.
            </summary>
            <param name="instancingClassType">The type attempting to find the overload type.</param>
            <param name="instancedOverload">The new overload type upon return if not found.</param>
        </member>
        <member name="M:CompilerNode.CommandOverloadType.CommandOverloadsHaveIdenticalSignature(CompilerNode.ICommandOverloadType,CompilerNode.ICommandOverloadType)">
            <summary>
            Compares two overloads.
            </summary>
            <param name="overload1">The first overload.</param>
            <param name="overload2">The second overload.</param>
        </member>
        <member name="T:CompilerNode.IConditional">
            <summary>
            Compiler IConditional.
            </summary>
        </member>
        <member name="P:CompilerNode.IConditional.ResolvedResult">
            <summary>
            Types of results of the conditional.
            </summary>
        </member>
        <member name="P:CompilerNode.IConditional.ResolvedException">
            <summary>
            List of exceptions the conditional can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.IConditional.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IConditional.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IConditional.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Conditional">
            <summary>
            Compiler IConditional.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Conditional.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Conditional.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Conditional.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Conditional.ResolvedResult">
            <summary>
            Types of results of the conditional.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.ResolvedException">
            <summary>
            List of exceptions the conditional can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Conditional.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.Conditional.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.Conditional.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.Conditional.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IConstraint">
            <summary>
            Compiler IConstraint.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstraint.RenameList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Constraint.RenameBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstraint.ResolvedParentTypeName">
            <summary>
            The resolved parent type name.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstraint.ResolvedParentType">
            <summary>
            The resolved parent type.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstraint.ResolvedConformingTypeName">
            <summary>
            The resolved conforming type name.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstraint.ResolvedConformingType">
            <summary>
            The resolved conforming type.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstraint.RenameTable">
            <summary>
            Table of resolved renames.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstraint.ResolvedTypeWithRename">
            <summary>
            The resolved type after rename.
            </summary>
        </member>
        <member name="T:CompilerNode.Constraint">
            <summary>
            Compiler IConstraint.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.RenameList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Constraint.RenameBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Constraint.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Constraint.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Constraint.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Constraint.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Constraint.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Constraint.ResolvedParentTypeName">
            <summary>
            The resolved parent type name.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.ResolvedParentType">
            <summary>
            The resolved parent type.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.ResolvedConformingTypeName">
            <summary>
            The resolved conforming type name.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.ResolvedConformingType">
            <summary>
            The resolved conforming type.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.RenameTable">
            <summary>
            Table of resolved renames.
            </summary>
        </member>
        <member name="P:CompilerNode.Constraint.ResolvedTypeWithRename">
            <summary>
            The resolved type after rename.
            </summary>
        </member>
        <member name="T:CompilerNode.IContinuation">
            <summary>
            Compiler IContinuation.
            </summary>
        </member>
        <member name="P:CompilerNode.IContinuation.CleanupList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Continuation.CleanupBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IContinuation.ResolvedResult">
            <summary>
            Types of results of the continuation.
            </summary>
        </member>
        <member name="P:CompilerNode.IContinuation.ResolvedException">
            <summary>
            List of exceptions the continuation can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.IContinuation.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IContinuation.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IContinuation.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Continuation">
            <summary>
            Compiler IContinuation.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.CleanupList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Continuation.CleanupBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Continuation.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Continuation.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Continuation.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Continuation.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Continuation.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Continuation.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.ResolvedResult">
            <summary>
            Types of results of the continuation.
            </summary>
        </member>
        <member name="P:CompilerNode.Continuation.ResolvedException">
            <summary>
            List of exceptions the continuation can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.Continuation.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.Continuation.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.Continuation.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IDiscrete">
            <summary>
            Compiler IDiscrete.
            </summary>
        </member>
        <member name="P:CompilerNode.IDiscrete.ValidDiscreteName">
            <summary>
            The valid discrete name.
            </summary>
        </member>
        <member name="T:CompilerNode.Discrete">
            <summary>
            Compiler IDiscrete.
            </summary>
        </member>
        <member name="P:CompilerNode.Discrete.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Discrete.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Discrete.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Discrete.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Discrete.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Discrete.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Discrete.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Discrete.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Discrete.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Discrete.ValidDiscreteName">
            <summary>
            The valid discrete name.
            </summary>
        </member>
        <member name="T:CompilerNode.IDocument">
            <summary>
            Compiler IDocument.
            </summary>
        </member>
        <member name="T:CompilerNode.Document">
            <summary>
            Compiler IDocument.
            </summary>
        </member>
        <member name="T:CompilerNode.IEntityDeclaration">
            <summary>
            Compiler IEntityDeclaration.
            </summary>
        </member>
        <member name="P:CompilerNode.IEntityDeclaration.ResolvedEntityTypeName">
            <summary>
            The resolved type name of this declaration.
            </summary>
        </member>
        <member name="P:CompilerNode.IEntityDeclaration.ResolvedEntityType">
            <summary>
            The resolved type of this declaration.
            </summary>
        </member>
        <member name="P:CompilerNode.IEntityDeclaration.ValidEntityName">
            <summary>
            The entity name as an atribute feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.IEntityDeclaration.ValidEntityInstance">
            <summary>
            The entity instance as an atribute feature instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IEntityDeclaration.ValidEntity">
            <summary>
            The entity as an atribute feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IEntityDeclaration.EntityDeclarationToString">
            <summary>
            Gets a string representation of the entity declaration.
            </summary>
        </member>
        <member name="M:CompilerNode.IEntityDeclaration.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IEntityDeclaration.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IEntityDeclaration.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.EntityDeclaration">
            <summary>
            Compiler IEntityDeclaration.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.EntityDeclaration"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.#ctor(CompilerNode.IEntityDeclaration,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.EntityDeclaration"/> class.
            </summary>
            <param name="source">The source object.</param>
            <param name="resolvedTypeName">The resolved entity type name.</param>
            <param name="resolvedType">The resolved entity type.</param>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.ResolvedEntityTypeName">
            <summary>
            The resolved type name of this declaration.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.ResolvedEntityType">
            <summary>
            The resolved type of this declaration.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.ValidEntityName">
            <summary>
            The entity name as an atribute feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.ValidEntityInstance">
            <summary>
            The entity instance as an atribute feature instance.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.ValidEntity">
            <summary>
            The entity as an atribute feature.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.EntityDeclarationListToString(System.Collections.IEnumerable)">
            <summary>
            Gets a string representation of a list of entity declarations.
            </summary>
            <param name="entityDeclarationList">The list of entity declarations.</param>
        </member>
        <member name="P:CompilerNode.EntityDeclaration.EntityDeclarationToString">
            <summary>
            Gets a string representation of the entity declaration.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityDeclaration.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IExceptionHandler">
            <summary>
            Compiler IExceptionHandler.
            </summary>
        </member>
        <member name="T:CompilerNode.ExceptionHandler">
            <summary>
            Compiler IExceptionHandler.
            </summary>
        </member>
        <member name="P:CompilerNode.ExceptionHandler.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ExceptionHandler.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExceptionHandler.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExceptionHandler.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExceptionHandler.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExceptionHandler.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ExceptionHandler.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ExceptionHandler.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ExceptionHandler.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="M:CompilerNode.ExceptionHandler.IdenticalExceptionSignature(System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IIdentifier})">
            <summary>
            Compares two lists of exception handler identifiers.
            </summary>
            <param name="exceptionIdentifierList1">The first list.</param>
            <param name="exceptionIdentifierList2">The second list.</param>
        </member>
        <member name="T:CompilerNode.IExport">
            <summary>
            Compiler IExport.
            </summary>
        </member>
        <member name="P:CompilerNode.IExport.ClassIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Export.ClassIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IExport.ValidExportName">
            <summary>
            The resolved export name.
            </summary>
        </member>
        <member name="P:CompilerNode.IExport.ExportClassTable">
            <summary>
            The table of resolved class identifiers.
            </summary>
        </member>
        <member name="T:CompilerNode.Export">
            <summary>
            Compiler IExport.
            </summary>
        </member>
        <member name="P:CompilerNode.Export.ClassIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Export.ClassIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Export.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Export.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Export.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Export.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Export.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Export.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Export.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Export.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Export.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Export.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Export.ValidExportName">
            <summary>
            The resolved export name.
            </summary>
        </member>
        <member name="P:CompilerNode.Export.ExportClassTable">
            <summary>
            The table of resolved class identifiers.
            </summary>
        </member>
        <member name="T:CompilerNode.IExportChange">
            <summary>
            Compiler IExportChange.
            </summary>
        </member>
        <member name="P:CompilerNode.IExportChange.IdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ExportChange.IdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IExportChange.IdentifierTable">
            <summary>
            Table of valid identifiers.
            </summary>
        </member>
        <member name="P:CompilerNode.IExportChange.ValidExportIdentifier">
            <summary>
            Valid export identifier.
            </summary>
        </member>
        <member name="M:CompilerNode.IExportChange.ApplyChange(Easly.ISealableDictionary{System.String,EaslyCompiler.IImportedClass},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},EaslyCompiler.IErrorList)">
            <summary>
            Apply changes in this instance to arguments.
            </summary>
            <param name="importedClassTable">The table of imported classes</param>
            <param name="exportTable">The list of exports to change.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.ExportChange">
            <summary>
            Compiler IExportChange.
            </summary>
        </member>
        <member name="P:CompilerNode.ExportChange.IdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ExportChange.IdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ExportChange.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.ExportChange.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ExportChange.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExportChange.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExportChange.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExportChange.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ExportChange.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ExportChange.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ExportChange.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ExportChange.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ExportChange.IdentifierTable">
            <summary>
            Table of valid identifiers.
            </summary>
        </member>
        <member name="P:CompilerNode.ExportChange.ValidExportIdentifier">
            <summary>
            Valid export identifier.
            </summary>
        </member>
        <member name="M:CompilerNode.ExportChange.ApplyChange(Easly.ISealableDictionary{System.String,EaslyCompiler.IImportedClass},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},EaslyCompiler.IErrorList)">
            <summary>
            Apply changes in this instance to arguments.
            </summary>
            <param name="importedClassTable">The table of imported classes</param>
            <param name="exportTable">The list of exports to change.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IAgentExpression">
            <summary>
            Compiler IAgentExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IAgentExpression.ResolvedAgentTypeName">
            <summary>
            The resolved type name of the feature providing the expression result.
            </summary>
        </member>
        <member name="P:CompilerNode.IAgentExpression.ResolvedAgentType">
            <summary>
            The resolved type of the feature providing the expression result.
            </summary>
        </member>
        <member name="P:CompilerNode.IAgentExpression.ResolvedFeature">
            <summary>
            The resolved feature providing the expression result.
            </summary>
        </member>
        <member name="T:CompilerNode.AgentExpression">
            <summary>
            Compiler IAgentExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AgentExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AgentExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AgentExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AgentExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.ResolvedAgentTypeName">
            <summary>
            The resolved type name of the feature providing the expression result.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.ResolvedAgentType">
            <summary>
            The resolved type of the feature providing the expression result.
            </summary>
        </member>
        <member name="P:CompilerNode.AgentExpression.ResolvedFeature">
            <summary>
            The resolved feature providing the expression result.
            </summary>
        </member>
        <member name="M:CompilerNode.AgentExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.AgentExpression.IsExpressionEqual(CompilerNode.IAgentExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.AgentExpression.ResolveCompilerReferences(CompilerNode.IAgentExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@,EaslyCompiler.ICompiledFeature@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IAgentExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The constant value upon return, if any.</param>
            <param name="resolvedFeature">The feature found upon return.</param>
        </member>
        <member name="P:CompilerNode.AgentExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.AgentExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.AgentExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.AgentExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.AgentExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.AgentExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IAssertionTagExpression">
            <summary>
            Compiler IAssertionTagExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IAssertionTagExpression.ResolvedAssertion">
            <summary>
            The resolved embedding assertion.
            </summary>
        </member>
        <member name="P:CompilerNode.IAssertionTagExpression.ResolvedBooleanExpression">
            <summary>
            The resolved expression.
            </summary>
        </member>
        <member name="T:CompilerNode.AssertionTagExpression">
            <summary>
            Compiler IAssertionTagExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.ResolvedBooleanExpression">
            <summary>
            The resolved expression.
            </summary>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.ResolvedAssertion">
            <summary>
            The resolved embedding body.
            </summary>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.IsExpressionEqual(CompilerNode.IAssertionTagExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.ResolveCompilerReferences(CompilerNode.IAssertionTagExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IAssertionTagExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The constant value upon return, if any.</param>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.AssertionTagExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.AssertionTagExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IBinaryConditionalExpression">
            <summary>
            Compiler IBinaryConditionalExpression.
            </summary>
        </member>
        <member name="T:CompilerNode.BinaryConditionalExpression">
            <summary>
            Compiler IBinaryConditionalExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.IsExpressionEqual(CompilerNode.IBinaryConditionalExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.ResolveCompilerReferences(CompilerNode.IBinaryConditionalExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IBinaryConditionalExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The constant value upon return, if any.</param>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.BinaryConditionalExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryConditionalExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IBinaryOperatorExpression">
            <summary>
            Compiler IBinaryOperatorExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IBinaryOperatorExpression.SelectedFeature">
            <summary>
            The resolved operator feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IBinaryOperatorExpression.SelectedOverload">
            <summary>
            The resolved operator feature overload.
            </summary>
        </member>
        <member name="P:CompilerNode.IBinaryOperatorExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="T:CompilerNode.BinaryOperatorExpression">
            <summary>
            Compiler IBinaryOperatorExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.SelectedFeature">
            <summary>
            The resolved operator feature.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.SelectedOverload">
            <summary>
            The resolved operator feature overload.
            </summary>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.IsExpressionEqual(CompilerNode.IBinaryOperatorExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.ResolveCompilerReferences(CompilerNode.IBinaryOperatorExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@,CompilerNode.IFunctionFeature@,CompilerNode.IQueryOverload@,EaslyCompiler.IFeatureCall@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IBinaryOperatorExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The constant value upon return, if any.</param>
            <param name="selectedFeature">The matching feature upon return.</param>
            <param name="selectedOverload">The matching overload in <paramref name="selectedFeature"/> upon return.</param>
            <param name="featureCall">Details of the feature call.</param>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.BinaryOperatorExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.BinaryOperatorExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IClassConstantExpression">
            <summary>
            Compiler IClassConstantExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IClassConstantExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IClassConstantExpression.ResolvedFinalDiscrete">
            <summary>
            The resolved discrete.
            </summary>
        </member>
        <member name="P:CompilerNode.IClassConstantExpression.ResolvedClassTypeName">
            <summary>
            The class type name.
            </summary>
        </member>
        <member name="P:CompilerNode.IClassConstantExpression.ResolvedClassType">
            <summary>
            The class type.
            </summary>
        </member>
        <member name="T:CompilerNode.ClassConstantExpression">
            <summary>
            Compiler IClassConstantExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ResolvedFinalDiscrete">
            <summary>
            The resolved discrete.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ResolvedClassTypeName">
            <summary>
            The class type name.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ResolvedClassType">
            <summary>
            The class type.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.IsExpressionEqual(CompilerNode.IClassConstantExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.ResolveCompilerReferences(CompilerNode.IClassConstantExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@,CompilerNode.IConstantFeature@,CompilerNode.IDiscrete@,EaslyCompiler.ITypeName@,CompilerNode.IClassType@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IClassConstantExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
            <param name="resolvedFinalFeature">The feature if the end of the path is a feature.</param>
            <param name="resolvedFinalDiscrete">The discrete if the end of the path is a discrete.</param>
            <param name="resolvedClassTypeName">The class type name upon return.</param>
            <param name="resolvedClassType">The class name upon return.</param>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ClassConstantExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassConstantExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ICloneOfExpression">
            <summary>
            Compiler ICloneOfExpression.
            </summary>
        </member>
        <member name="T:CompilerNode.CloneOfExpression">
            <summary>
            Compiler ICloneOfExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.IsExpressionEqual(CompilerNode.ICloneOfExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.ResolveCompilerReferences(CompilerNode.ICloneOfExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.ICloneOfExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.CloneOfExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.CloneOfExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IEntityExpression">
            <summary>
            Compiler IEntityExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IEntityExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IEntityExpression.ResolvedFinalDiscrete">
            <summary>
            The resolved discrete.
            </summary>
        </member>
        <member name="T:CompilerNode.EntityExpression">
            <summary>
            Compiler IEntityExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.EntityExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.EntityExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.EntityExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.EntityExpression.ResolvedFinalDiscrete">
            <summary>
            The resolved discrete.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.EntityExpression.IsExpressionEqual(CompilerNode.IEntityExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.EntityExpression.ResolveCompilerReferences(CompilerNode.IEntityExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@,EaslyCompiler.ICompiledFeature@,CompilerNode.IDiscrete@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IEntityExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
            <param name="resolvedFinalFeature">The feature if the end of the path is a feature.</param>
            <param name="resolvedFinalDiscrete">The discrete if the end of the path is a discrete.</param>
        </member>
        <member name="P:CompilerNode.EntityExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.EntityExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.EntityExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.EntityExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IEqualityExpression">
            <summary>
            Compiler IEqualityExpression.
            </summary>
        </member>
        <member name="T:CompilerNode.EqualityExpression">
            <summary>
            Compiler IEqualityExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.EqualityExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.EqualityExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.EqualityExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.EqualityExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.EqualityExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="M:CompilerNode.EqualityExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.EqualityExpression.IsExpressionEqual(CompilerNode.IEqualityExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.EqualityExpression.ResolveCompilerReferences(CompilerNode.IEqualityExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IEqualityExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The constant value upon return, if any.</param>
        </member>
        <member name="P:CompilerNode.EqualityExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.EqualityExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.EqualityExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.EqualityExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.EqualityExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.EqualityExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IExpression">
            <summary>
            Compiler IExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.IExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="P:CompilerNode.IExpression.ResolvedResult">
            <summary>
            Types of results of the expression.
            </summary>
        </member>
        <member name="P:CompilerNode.IExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.IExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.IExpression.ExpressionConstant">
            <summary>
            The constant expression, if assigned.
            </summary>
        </member>
        <member name="P:CompilerNode.IExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.IExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Expression">
            <summary>
            Expression helper class.
            </summary>
        </member>
        <member name="M:CompilerNode.Expression.IsExpressionEqual(CompilerNode.IExpression,CompilerNode.IExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="expression1">The first expression.</param>
            <param name="expression2">The second expression.</param>
        </member>
        <member name="M:CompilerNode.Expression.IsLanguageTypeAvailable(System.Guid,EaslyCompiler.ISource,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Checks if a built-in language type is imported, and return the corresponding name and type.
            </summary>
            <param name="guid">The language type guid.</param>
            <param name="source">The location where the language type is needed.</param>
            <param name="resultTypeName">The type name upon return.</param>
            <param name="resultType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.Expression.GetClassTypeOfExpression(CompilerNode.IExpression,EaslyCompiler.IErrorList,CompilerNode.IClassType@)">
            <summary>
            Gets the class type of an expression, if any.
            </summary>
            <param name="booleanOrEventExpression">A boolean or event expression.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="expressionClassType">The class type upon return, if successful.</param>
        </member>
        <member name="M:CompilerNode.Expression.CheckForBooleanOrEventType(CompilerNode.IExpression,CompilerNode.IClassType,EaslyCompiler.IErrorList)">
            <summary>
            Checks that the expected type, either boolean or event, is available.
            </summary>
            <param name="booleanOrEventExpression">The expression to check.</param>
            <param name="expectedType">The expected type.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.Expression.FinalConstant(CompilerNode.IExpression)">
            <summary>
            Gets the final constant in a chain of expressions.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:CompilerNode.Expression.GetDefaultConstant(CompilerNode.IExpression,EaslyCompiler.IResultType)">
            <summary>
            Gets the default constant result of any expression.
            </summary>
            <param name="expression">The source expression.</param>
            <param name="resultType">The expression result type.</param>
        </member>
        <member name="T:CompilerNode.IIndexQueryExpression">
            <summary>
            Compiler IIndexQueryExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexQueryExpression.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexQueryExpression.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexQueryExpression.ResolvedIndexer">
            <summary>
            The resolved indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexQueryExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="T:CompilerNode.IndexQueryExpression">
            <summary>
            Compiler IIndexQueryExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexQueryExpression.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.ResolvedIndexer">
            <summary>
            The resolved indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.IsExpressionEqual(CompilerNode.IIndexQueryExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.ResolveCompilerReferences(CompilerNode.IIndexQueryExpression,EaslyCompiler.IErrorList,EaslyCompiler.ResolvedExpression@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IIndexQueryExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedExpression">The result of the search.</param>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.IndexQueryExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexQueryExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IInitializedObjectExpression">
            <summary>
            Compiler IInitializedObjectExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IInitializedObjectExpression.AssignmentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.InitializedObjectExpression.AssignmentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IInitializedObjectExpression.ResolvedClassTypeName">
            <summary>
            The resolved class type name.
            </summary>
        </member>
        <member name="P:CompilerNode.IInitializedObjectExpression.ResolvedClassType">
            <summary>
            The resolved class type.
            </summary>
        </member>
        <member name="P:CompilerNode.IInitializedObjectExpression.AssignedFeatureTable">
            <summary>
            The list of features assigned in the resolved type.
            </summary>
        </member>
        <member name="T:CompilerNode.InitializedObjectExpression">
            <summary>
            Compiler IInitializedObjectExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.AssignmentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.InitializedObjectExpression.AssignmentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.ResolvedClassTypeName">
            <summary>
            The resolved class type name.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.ResolvedClassType">
            <summary>
            The resolved class type.
            </summary>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.AssignedFeatureTable">
            <summary>
            The list of features assigned in the resolved type.
            </summary>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.IsExpressionEqual(CompilerNode.IInitializedObjectExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.ResolveCompilerReferences(CompilerNode.IInitializedObjectExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@,EaslyCompiler.ITypeName@,CompilerNode.IClassType@,Easly.ISealableDictionary{System.String,EaslyCompiler.ICompiledFeature}@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IInitializedObjectExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
            <param name="initializedObjectTypeName">The initialized object type name upon return.</param>
            <param name="initializedObjectType">The initialized object type upon return.</param>
            <param name="assignedFeatureTable">The table of assigned values upon return.</param>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.InitializedObjectExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.InitializedObjectExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IKeywordExpression">
            <summary>
            Compiler IKeywordExpression.
            </summary>
        </member>
        <member name="T:CompilerNode.KeywordExpression">
            <summary>
            Compiler IKeywordExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.KeywordExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.KeywordExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.KeywordExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.KeywordExpression.IsExpressionEqual(CompilerNode.IKeywordExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.KeywordExpression.IsKeywordAvailable(BaseNode.Keyword,EaslyCompiler.ISource,EaslyCompiler.IErrorList,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Checks that a keyword is available in the context of the source.
            </summary>
            <param name="keyword">The keyword to check.</param>
            <param name="source">The source node.</param>
            <param name="errorList">The list of errors found if not available.</param>
            <param name="resultTypeName">The resulting type name upon return if available.</param>
            <param name="resultType">The resulting type upon return if available.</param>
        </member>
        <member name="M:CompilerNode.KeywordExpression.ResolveCompilerReferences(CompilerNode.IKeywordExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IKeywordExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
        </member>
        <member name="P:CompilerNode.KeywordExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.KeywordExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.KeywordExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IManifestCharacterExpression">
            <summary>
            Compiler IManifestCharacterExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IManifestCharacterExpression.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IManifestCharacterExpression.Text"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ManifestCharacterExpression">
            <summary>
            Compiler IManifestCharacterExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IManifestCharacterExpression.Text"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.IsExpressionEqual(CompilerNode.IManifestCharacterExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.ResolveCompilerReferences(CompilerNode.IManifestCharacterExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IManifestCharacterExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ManifestCharacterExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestCharacterExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IManifestNumberExpression">
            <summary>
            Compiler IManifestNumberExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IManifestNumberExpression.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IManifestNumberExpression.Text"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ManifestNumberExpression">
            <summary>
            Compiler IManifestNumberExpression.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ManifestNumberExpression"/> class.
            This constructor is needed to allow deserialization of objects.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ManifestNumberExpression"/> class.
            </summary>
            <param name="value">Initial value.</param>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ManifestNumberExpression"/> class.
            </summary>
            <param name="text">Initial value.</param>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IManifestNumberExpression.Text"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.IsExpressionEqual(CompilerNode.IManifestNumberExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.ResolveCompilerReferences(CompilerNode.IManifestNumberExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IManifestNumberExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The constant type upon return.</param>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ManifestNumberExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestNumberExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IManifestStringExpression">
            <summary>
            Compiler IManifestStringExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IManifestStringExpression.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IManifestStringExpression.Text"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ManifestStringExpression">
            <summary>
            Compiler IManifestStringExpression.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ManifestStringExpression"/> class.
            This constructor is needed to allow deserialization of objects.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ManifestStringExpression"/> class.
            </summary>
            <param name="text">Initial value.</param>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IManifestStringExpression.Text"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.IsExpressionEqual(CompilerNode.IManifestStringExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.ResolveCompilerReferences(CompilerNode.IManifestStringExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IManifestStringExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ManifestStringExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.ManifestStringExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.INewExpression">
            <summary>
            Compiler INewExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.INewExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="T:CompilerNode.NewExpression">
            <summary>
            Compiler INewExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.NewExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.NewExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.NewExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.NewExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.NewExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="M:CompilerNode.NewExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.NewExpression.IsExpressionEqual(CompilerNode.INewExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.NewExpression.ResolveCompilerReferences(CompilerNode.INewExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@,EaslyCompiler.ICompiledFeature@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.INewExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
            <param name="resolvedFinalFeature">The matching feature upon return.</param>
        </member>
        <member name="P:CompilerNode.NewExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.NewExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.NewExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.NewExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.NewExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.NewExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IOldExpression">
            <summary>
            Compiler IOldExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IOldExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="T:CompilerNode.OldExpression">
            <summary>
            Compiler IOldExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.OldExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.OldExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.OldExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.OldExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.OldExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="M:CompilerNode.OldExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.OldExpression.IsExpressionEqual(CompilerNode.IOldExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.OldExpression.ResolveCompilerReferences(CompilerNode.IOldExpression,EaslyCompiler.IErrorList,EaslyCompiler.ResolvedExpression@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IOldExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedExpression">The result of the search.</param>
        </member>
        <member name="P:CompilerNode.OldExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.OldExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.OldExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.OldExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.OldExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.OldExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPrecursorExpression">
            <summary>
            Compiler IPrecursorExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorExpression.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PrecursorExpression.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorExpression.ResolvedPrecursor">
            <summary>
            The resolved precursor.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorExpression.SelectedOverload">
            <summary>
            The selected overload, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorExpression.SelectedOverloadType">
            <summary>
            The selected overload, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="T:CompilerNode.PrecursorExpression">
            <summary>
            Compiler IPrecursorExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PrecursorExpression.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.ResolvedPrecursor">
            <summary>
            The resolved precursor.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.SelectedOverload">
            <summary>
            The selected overload, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.SelectedOverloadType">
            <summary>
            The selected overload, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.IsExpressionEqual(CompilerNode.IPrecursorExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.ResolveCompilerReferences(CompilerNode.IPrecursorExpression,EaslyCompiler.IErrorList,EaslyCompiler.ResolvedExpression@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IPrecursorExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedExpression">The result of the search.</param>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.PrecursorExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPrecursorIndexExpression">
            <summary>
            Compiler IPrecursorIndexExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorIndexExpression.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PrecursorIndexExpression.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorIndexExpression.ResolvedPrecursor">
            <summary>
            The resolved precursor.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorIndexExpression.ResolvedIndexer">
            <summary>
            The resolved indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorIndexExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="T:CompilerNode.PrecursorIndexExpression">
            <summary>
            Compiler IPrecursorIndexExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PrecursorIndexExpression.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ResolvedPrecursor">
            <summary>
            The resolved precursor.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ResolvedIndexer">
            <summary>
            The resolved indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.ResolveCompilerReferences(CompilerNode.IPrecursorIndexExpression,EaslyCompiler.IErrorList,EaslyCompiler.ResolvedExpression@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IPrecursorIndexExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedExpression">The result of the search.</param>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.PrecursorIndexExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPreprocessorExpression">
            <summary>
            Compiler IPreprocessorExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IPreprocessorExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="T:CompilerNode.PreprocessorExpression">
            <summary>
            Compiler IPreprocessorExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.PreprocessorExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.PreprocessorExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IQueryExpression">
            <summary>
            Compiler IQueryExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryExpression.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryExpression.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature at the end of the path.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryExpression.ResolvedFinalDiscrete">
            <summary>
            The resolved discrete at the end of the path.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryExpression.SelectedResultList">
            <summary>
            List of results from the selected overload.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryExpression.SelectedOverload">
            <summary>
            The selected overload, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryExpression.SelectedOverloadType">
            <summary>
            The selected overload type, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryExpression.InheritBySideAttribute">
            <summary>
            Inherit the side-by-side attribute.
            </summary>
        </member>
        <member name="T:CompilerNode.QueryExpression">
            <summary>
            Compiler IQueryExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryExpression.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryExpression.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.QueryExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.QueryExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.QueryExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.QueryExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.ResolvedFinalFeature">
            <summary>
            The resolved feature at the end of the path.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.ResolvedFinalDiscrete">
            <summary>
            The resolved discrete at the end of the path.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.SelectedResultList">
            <summary>
            List of results from the selected overload.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.SelectedOverload">
            <summary>
            The selected overload, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.SelectedOverloadType">
            <summary>
            The selected overload, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryExpression.InheritBySideAttribute">
            <summary>
            Inherit the side-by-side attribute.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.QueryExpression.IsExpressionEqual(CompilerNode.IQueryExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.QueryExpression.ResolveCompilerReferences(CompilerNode.IQueryExpression,EaslyCompiler.IErrorList,EaslyCompiler.ResolvedExpression@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IQueryExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedExpression">The result of the search.</param>
        </member>
        <member name="P:CompilerNode.QueryExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.QueryExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.QueryExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IResultOfExpression">
            <summary>
            Compiler IResultOfExpression.
            </summary>
        </member>
        <member name="T:CompilerNode.ResultOfExpression">
            <summary>
            Compiler IResultOfExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.IsExpressionEqual(CompilerNode.IResultOfExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.ResolveCompilerReferences(CompilerNode.IResultOfExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IResultOfExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The expression constant upon return.</param>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ResultOfExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.ResultOfExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IUnaryNotExpression">
            <summary>
            Compiler IUnaryNotExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IUnaryNotExpression.IsEventExpression">
            <summary>
            True if the condition is on events.
            </summary>
        </member>
        <member name="M:CompilerNode.IUnaryNotExpression.SetIsEventExpression(System.Boolean)">
            <summary>
            Sets the <see cref="P:CompilerNode.IUnaryNotExpression.IsEventExpression"/> property.
            </summary>
        </member>
        <member name="T:CompilerNode.UnaryNotExpression">
            <summary>
            Compiler IUnaryNotExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.IsEventExpression">
            <summary>
            True if the condition is on events.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.IsExpressionEqual(CompilerNode.IUnaryNotExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.SetIsEventExpression(System.Boolean)">
            <summary>
            Sets the <see cref="P:CompilerNode.UnaryNotExpression.IsEventExpression"/> property.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.ResolveCompilerReferences(CompilerNode.IUnaryNotExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IUnaryNotExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The constant value upon return, if any.</param>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.UnaryNotExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryNotExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IUnaryOperatorExpression">
            <summary>
            Compiler IUnaryOperatorExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.IUnaryOperatorExpression.SelectedFeature">
            <summary>
            The resolved operator feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IUnaryOperatorExpression.SelectedOverload">
            <summary>
            The resolved operator feature overload.
            </summary>
        </member>
        <member name="P:CompilerNode.IUnaryOperatorExpression.SelectedOverloadType">
            <summary>
            Type of the resolved operator feature overload.
            </summary>
        </member>
        <member name="T:CompilerNode.UnaryOperatorExpression">
            <summary>
            Compiler IUnaryOperatorExpression.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.IsComplex">
            <summary>
            True if the expression is complex (and requires to be surrounded with parenthesis).
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.ResolvedResult">
            <summary>
            Types of expression results.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.ResolvedException">
            <summary>
            List of exceptions the expression can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.ConstantSourceList">
            <summary>
            The list of sources for a constant, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.ExpressionConstant">
            <summary>
            Specific constant number.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.SelectedFeature">
            <summary>
            The resolved operator feature.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.SelectedOverload">
            <summary>
            The resolved operator feature overload.
            </summary>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.SelectedOverloadType">
            <summary>
            Type of the resolved operator feature overload.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.IsExpressionEqual(EaslyCompiler.IComparableExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.IsExpressionEqual(CompilerNode.IUnaryOperatorExpression)">
            <summary>
            Compares two expressions.
            </summary>
            <param name="other">The other expression.</param>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.ResolveCompilerReferences(CompilerNode.IUnaryOperatorExpression,EaslyCompiler.IErrorList,EaslyCompiler.IResultType@,EaslyCompiler.IResultException@,Easly.ISealableList{CompilerNode.IExpression}@,EaslyCompiler.ILanguageConstant@,CompilerNode.IFunctionFeature@,CompilerNode.IQueryOverload@,CompilerNode.IQueryOverloadType@)">
            <summary>
            Finds the matching nodes of a <see cref="T:CompilerNode.IUnaryOperatorExpression"/>.
            </summary>
            <param name="node">The agent expression to check.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="resolvedResult">The expression result types upon return.</param>
            <param name="resolvedException">Exceptions the expression can throw upon return.</param>
            <param name="constantSourceList">Sources of the constant expression upon return, if any.</param>
            <param name="expressionConstant">The constant value upon return, if any.</param>
            <param name="selectedFeature">The matching feature upon return.</param>
            <param name="selectedOverload">The matching overload in <paramref name="selectedFeature"/> upon return.</param>
            <param name="selectedOverloadType">The matching overload type upon return.</param>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.UnaryOperatorExpression.ExpressionToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.UnaryOperatorExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IScopeAttributeFeature">
            <summary>
            Compiler IScopeAttributeFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IScopeAttributeFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.IScopeAttributeFeature.DefaultValue">
            <summary>
            The default value, if any.
            </summary>
        </member>
        <member name="M:CompilerNode.IScopeAttributeFeature.IsGroupAssigned(System.Collections.Generic.IList{CompilerNode.IClass},EaslyCompiler.ISource,EaslyCompiler.IErrorList)">
            <summary>
            Checks if this attribute conflicts with another from the same class group.
            </summary>
            <param name="assignedSingleClassList">The list of already single class attributes.</param>
            <param name="source">The location where to report errors.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.IScopeAttributeFeature.FixFeatureType(EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType)">
            <summary>
            Sets the associated type.
            </summary>
            <param name="attributeTypeName">The associated type name.</param>
            <param name="attributeType">The associated type.</param>
        </member>
        <member name="T:CompilerNode.ScopeAttributeFeature">
            <summary>
            Compiler IScopeAttributeFeature.
            </summary>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.Create(EaslyCompiler.ISource,System.String)">
            <summary>
            Creates a <see cref="T:CompilerNode.IScopeAttributeFeature"/>.
            </summary>
            <param name="location">The location associated to this attribute.</param>
            <param name="attributeName">The attribute name.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ScopeAttributeFeature"/> class.
            </summary>
            <param name="location">The location associated to this attribute.</param>
            <param name="attributeName">The attribute name.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.Create(EaslyCompiler.ISource,System.String,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType)">
            <summary>
            Creates a <see cref="T:CompilerNode.IScopeAttributeFeature"/>.
            </summary>
            <param name="location">The location associated to this attribute.</param>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeTypeName">Resolved type name of the attribute.</param>
            <param name="attributeType">Resolved type of the attribute.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.#ctor(EaslyCompiler.ISource,System.String,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ScopeAttributeFeature"/> class.
            </summary>
            <param name="location">The location associated to this attribute.</param>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeTypeName">Resolved type name of the attribute.</param>
            <param name="attributeType">Resolved type of the attribute.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.Create(EaslyCompiler.ISource,System.String,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,CompilerNode.IExpression,EaslyCompiler.IErrorList,CompilerNode.IScopeAttributeFeature@)">
            <summary>
            Creates a <see cref="T:CompilerNode.IScopeAttributeFeature"/>.
            </summary>
            <param name="location">The location associated to this attribute.</param>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeTypeName">Resolved type name of the attribute.</param>
            <param name="attributeType">Resolved type of the attribute.</param>
            <param name="initialDefaultValue">Default value, if any.</param>
            <param name="errorList">List of errors found.</param>
            <param name="feature">The created feature if successful.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.#ctor(EaslyCompiler.ISource,System.String,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,CompilerNode.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ScopeAttributeFeature"/> class.
            </summary>
            <param name="location">The location associated to this attribute.</param>
            <param name="attributeName">The attribute name.</param>
            <param name="agentTypeName">Resolved agent type name of the attribute.</param>
            <param name="agentType">Resolved agent type of the attribute.</param>
            <param name="attributeTypeName">Resolved effective type name of the attribute.</param>
            <param name="attributeType">Resolved effective type of the attribute.</param>
            <param name="initialDefaultValue">Default value, if any.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.IsGroupAssigned(System.Collections.Generic.IList{CompilerNode.IClass},EaslyCompiler.ISource,EaslyCompiler.IErrorList)">
            <summary>
            Checks if this attribute conflicts with another from the same class group.
            </summary>
            <param name="assignedSingleClassList">The list of already single class attributes.</param>
            <param name="source">The location where to report errors.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.CreateResultFeature(CompilerNode.IObjectType,CompilerNode.IClass,EaslyCompiler.ISource)">
            <summary>
            Creates a feature called 'Result' with the provided type.
            </summary>
            <param name="resultType">The feature type.</param>
            <param name="embeddingClass">The class where the feature is created.</param>
            <param name="location">The location to use when reporting errors.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.CreateValueFeature(CompilerNode.IObjectType,CompilerNode.IClass,EaslyCompiler.ISource)">
            <summary>
            Creates a feature called 'Value' with the provided type.
            </summary>
            <param name="resultType">The feature type.</param>
            <param name="embeddingClass">The class where the feature is created.</param>
            <param name="location">The location to use when reporting errors.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.FixFeatureType(EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType)">
            <summary>
            Sets the associated type.
            </summary>
            <param name="attributeTypeName">The associated type name.</param>
            <param name="attributeType">The associated type.</param>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.DefaultValue">
            <summary>
            The default value, if any.
            </summary>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ScopeAttributeFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ScopeAttributeFeature.EntityName">
            <summary>
            The generated attribute name.
            </summary>
        </member>
        <member name="T:CompilerNode.IAttributeFeature">
            <summary>
            Compiler IAttributeFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttributeFeature.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AttributeFeature.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttributeFeature.ResolvedEntityTypeName">
            <summary>
            The name of the resolved attribute type.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttributeFeature.ResolvedEntityType">
            <summary>
            The resolved attribute type.
            </summary>
        </member>
        <member name="T:CompilerNode.AttributeFeature">
            <summary>
            Compiler IAttributeFeature.
            </summary>
        </member>
        <member name="M:CompilerNode.AttributeFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.AttributeFeature"/> class.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AttributeFeature.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.AttributeFeature.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AttributeFeature.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AttributeFeature.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AttributeFeature.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AttributeFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ResolvedFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ResolvedEntityTypeName">
            <summary>
            The name of the resolved attribute type.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ResolvedEntityType">
            <summary>
            The resolved attribute type.
            </summary>
        </member>
        <member name="P:CompilerNode.AttributeFeature.ResolvedEventType">
            <summary>
            The resolved event type.
            </summary>
        </member>
        <member name="M:CompilerNode.AttributeFeature.SetEventType(BaseNode.EventType,System.Boolean@)">
            <summary>
            Sets the <see cref="P:CompilerNode.AttributeFeature.ResolvedEventType"/> property.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="isConflicting">True upon return if <paramref name="eventType"/> is conflicting with a previous call.</param>
        </member>
        <member name="M:CompilerNode.AttributeFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.AttributeFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.AttributeFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.AttributeFeature.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IConstantFeature">
            <summary>
            Compiler IConstantFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstantFeature.ResolvedEntityTypeName">
            <summary>
            The name of the resolved constant type.
            </summary>
        </member>
        <member name="P:CompilerNode.IConstantFeature.ResolvedEntityType">
            <summary>
            The resolved constant type.
            </summary>
        </member>
        <member name="T:CompilerNode.ConstantFeature">
            <summary>
            Compiler IConstantFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ConstantFeature.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ConstantFeature.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ConstantFeature.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ResolvedFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.IsCallingPrecursor">
            <summary>
            True if the feature is calling a precursor.
            </summary>
        </member>
        <member name="M:CompilerNode.ConstantFeature.MarkAsCallingPrecursor">
            <summary>
            Sets the <see cref="P:CompilerNode.ConstantFeature.IsCallingPrecursor"/> property.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ResolvedEntityTypeName">
            <summary>
            The name of the resolved constant type.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.ResolvedEntityType">
            <summary>
            The resolved constant type.
            </summary>
        </member>
        <member name="P:CompilerNode.ConstantFeature.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.ConstantFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ConstantFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ConstantFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.ConstantFeature.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ICreationFeature">
            <summary>
            Compiler ICreationFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.ICreationFeature.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CreationFeature.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.CreationFeature">
            <summary>
            Compiler ICreationFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CreationFeature.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.CreationFeature.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.CreationFeature.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.CreationFeature.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.CreationFeature.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.CreationFeature.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.CreationFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.ResolvedFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="P:CompilerNode.CreationFeature.IsCallingPrecursor">
            <summary>
            True if the feature is calling a precursor.
            </summary>
        </member>
        <member name="M:CompilerNode.CreationFeature.MarkAsCallingPrecursor">
            <summary>
            Sets the <see cref="P:CompilerNode.CreationFeature.IsCallingPrecursor"/> property.
            </summary>
        </member>
        <member name="M:CompilerNode.CreationFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.CreationFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.CreationFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.CreationFeature.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IFeature">
            <summary>
            Compiler IFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.IFeature.ResolvedFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="M:CompilerNode.IFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Feature">
            <summary>
            Helper class for features.
            </summary>
        </member>
        <member name="M:CompilerNode.Feature.DisjoinedParameterCheck(System.Collections.Generic.IList{CompilerNode.ICommandOverloadType},EaslyCompiler.IErrorList)">
            <summary>
            Checks that all overloads in a list have parameters that allow them to be distinguished in a caller.
            </summary>
            <param name="overloadList">The list of overloads.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.Feature.DisjoinedParameterCheck(System.Collections.Generic.IList{CompilerNode.IQueryOverloadType},EaslyCompiler.IErrorList)">
            <summary>
            Checks that all overloads in a list have parameters that allow them to be distinguished in a caller.
            </summary>
            <param name="overloadList">The list of overloads.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.Feature.CommonResultType(System.Collections.Generic.IList{CompilerNode.IQueryOverloadType})">
            <summary>
            Gets the most common type of all overloads.
            </summary>
            <param name="overloadList">The list of overloads.</param>
        </member>
        <member name="M:CompilerNode.Feature.JoinedResultCheck(System.Collections.Generic.IList{CompilerNode.IQueryOverloadType},System.Int32,EaslyCompiler.ICompiledType,EaslyCompiler.ISource,EaslyCompiler.IErrorList)">
            <summary>
            Checks that a result of a list of overloads conform to a base type.
            </summary>
            <param name="overloadList">The list of overloads.</param>
            <param name="index">Index of the result in the possible results.</param>
            <param name="baseType">The base type.</param>
            <param name="location">The location where to report errors.</param>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IFeatureWithName">
            <summary>
            Compiler IFeature for all but indexers.
            </summary>
        </member>
        <member name="P:CompilerNode.IFeatureWithName.EntityName">
            <summary>
            The feature name.
            </summary>
        </member>
        <member name="T:CompilerNode.IFunctionFeature">
            <summary>
            Compiler IFunctionFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IFunctionFeature.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.FunctionFeature.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IFunctionFeature.MostCommonResult">
            <summary>
            The resolved function type processing all overloads.
            </summary>
        </member>
        <member name="T:CompilerNode.FunctionFeature">
            <summary>
            Compiler IFunctionFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.FunctionFeature.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionFeature.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.FunctionFeature.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionFeature.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.FunctionFeature.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.FunctionFeature.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.FunctionFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.ResolvedFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.IsCallingPrecursor">
            <summary>
            True if the feature is calling a precursor.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionFeature.MarkAsCallingPrecursor">
            <summary>
            Sets the <see cref="P:CompilerNode.FunctionFeature.IsCallingPrecursor"/> property.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionFeature.MostCommonResult">
            <summary>
            The resolved function type processing all overloads.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.FunctionFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.FunctionFeature.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IIndexerFeature">
            <summary>
            Compiler IIndexerFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerFeature.IndexParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerFeature.IndexParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerFeature.ModifiedQueryList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerFeature.ModifiedQueryBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerFeature.ResolvedEntityTypeName">
            <summary>
            The name of the resolved indexer type.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerFeature.ResolvedEntityType">
            <summary>
            The resolved indexer type.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerFeature.ParameterTable">
            <summary>
            Table of resolved parameters.
            </summary>
        </member>
        <member name="T:CompilerNode.IndexerFeature">
            <summary>
            Compiler IIndexerFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.IndexParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerFeature.IndexParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ModifiedQueryList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerFeature.ModifiedQueryBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerFeature.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerFeature.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.IndexerFeature.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.IndexerFeature.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.IsCallingPrecursor">
            <summary>
            True if the feature is calling a precursor.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerFeature.MarkAsCallingPrecursor">
            <summary>
            Sets the <see cref="P:CompilerNode.IndexerFeature.IsCallingPrecursor"/> property.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.LocalGetScope">
            <summary>
            Entities local to a scope, getter only.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.LocalSetScope">
            <summary>
            Entities local to a scope, setter only.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.InnerGetScopes">
            <summary>
            List of scopes containing the current instance, getter only.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.InnerSetScopes">
            <summary>
            List of scopes containing the current instance, setter only.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.FullGetScope">
            <summary>
            All reachable entities, getter only.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.FullSetScope">
            <summary>
            All reachable entities, setter only.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedEntityTypeName">
            <summary>
            The name of the resolved indexer type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedEntityType">
            <summary>
            The resolved indexer type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ParameterTable">
            <summary>
            Table of resolved parameters.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedResultTypeName">
            <summary>
            The name of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.ResolvedResultType">
            <summary>
            The resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerFeature.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IndexerFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.IndexerFeature.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IProcedureFeature">
            <summary>
            Compiler IProcedureFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IProcedureFeature.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ProcedureFeature.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ProcedureFeature">
            <summary>
            Compiler IProcedureFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ProcedureFeature.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.ResolvedFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureFeature.IsCallingPrecursor">
            <summary>
            True if the feature is calling a precursor.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.MarkAsCallingPrecursor">
            <summary>
            Sets the <see cref="P:CompilerNode.ProcedureFeature.IsCallingPrecursor"/> property.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.ProcedureFeature.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPropertyFeature">
            <summary>
            Compiler IPropertyFeature.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyFeature.ResolvedEntityTypeName">
            <summary>
            The name of the resolved property type.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyFeature.ResolvedEntityType">
            <summary>
            The resolved property type.
            </summary>
        </member>
        <member name="T:CompilerNode.PropertyFeature">
            <summary>
            Compiler IPropertyFeature.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.PropertyFeature"/> class.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ModifiedQueryList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyFeature.ModifiedQueryBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyFeature.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyFeature.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PropertyFeature.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PropertyFeature.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ValidFeatureName">
            <summary>
            The resolved feature name.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedFeature">
            <summary>
            The resolved feature.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.IsDeferredFeature">
            <summary>
            Indicates if the feature is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.HasExternBody">
            <summary>
            True if the feature contains extern bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.HasPrecursorBody">
            <summary>
            True if the feature contains precursor bodies in its overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedAgentTypeName">
            <summary>
            Name of the agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedAgentType">
            <summary>
            The agent type associated to the feature.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedEffectiveTypeName">
            <summary>
            The name of the type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedEffectiveType">
            <summary>
            The type to use, as source or destination, for the purpose of path searching, assignment and query.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.EntityGuid">
            <summary>
            Guid of the language type corresponding to the entity object for an instance of this class.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.Location">
            <summary>
            The source node associated to this instance.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.IsCallingPrecursor">
            <summary>
            True if the feature is calling a precursor.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyFeature.MarkAsCallingPrecursor">
            <summary>
            Sets the <see cref="P:CompilerNode.PropertyFeature.IsCallingPrecursor"/> property.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.LocalGetScope">
            <summary>
            Entities local to a scope, getter only.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.LocalSetScope">
            <summary>
            Entities local to a scope, setter only.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.InnerGetScopes">
            <summary>
            List of scopes containing the current instance, getter only.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.InnerSetScopes">
            <summary>
            List of scopes containing the current instance, setter only.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.FullGetScope">
            <summary>
            All reachable entities, getter only.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.FullSetScope">
            <summary>
            All reachable entities, setter only.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedEntityTypeName">
            <summary>
            The name of the resolved property type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedEntityType">
            <summary>
            The resolved property type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedResultTypeName">
            <summary>
            The name of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedResultType">
            <summary>
            The resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyFeature.ResolvedEventType">
            <summary>
            The resolved event type.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyFeature.SetEventType(BaseNode.EventType,System.Boolean@)">
            <summary>
            Sets the <see cref="P:CompilerNode.PropertyFeature.ResolvedEventType"/> property.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="isConflicting">True upon return if <paramref name="eventType"/> is conflicting with a previous call.</param>
        </member>
        <member name="P:CompilerNode.PropertyFeature.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyFeature.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyFeature.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.PropertyFeature.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.PropertyFeature.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IGeneric">
            <summary>
            Compiler IGeneric.
            </summary>
        </member>
        <member name="P:CompilerNode.IGeneric.ConstraintList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Generic.ConstraintBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IGeneric.ResolvedGenericTypeName">
            <summary>
            The resolved, unique type name for this generic.
            </summary>
        </member>
        <member name="P:CompilerNode.IGeneric.ResolvedGenericType">
            <summary>
            The corresponding resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.IGeneric.ResolvedDefaultType">
            <summary>
            Resolved type for the default value of the generic.
            </summary>
        </member>
        <member name="P:CompilerNode.IGeneric.ResolvedConformanceTable">
            <summary>
            Table of resolved conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.IGeneric.TypeTable">
            <summary>
            Table of all types used in this class.
            </summary>
        </member>
        <member name="T:CompilerNode.Generic">
            <summary>
            Compiler IGeneric.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.ConstraintList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Generic.ConstraintBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Generic.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Generic.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Generic.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Generic.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Generic.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Generic.ResolvedGenericTypeName">
            <summary>
            The resolved, unique type name for this generic.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.ResolvedGenericType">
            <summary>
            The corresponding resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.ResolvedDefaultType">
            <summary>
            Resolved type for the default value of the generic.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.ResolvedConformanceTable">
            <summary>
            Table of resolved conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.Generic.TypeTable">
            <summary>
            Table of all types used in this class.
            </summary>
        </member>
        <member name="T:CompilerNode.IClassIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ClassIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IClassOrExportIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ClassOrExportIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IClassOrFeatureIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ClassOrFeatureIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IExportIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ExportIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IFeatureIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.FeatureIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IIdentifier">
            <summary>
            Compiler IIdentifier.
            </summary>
        </member>
        <member name="P:CompilerNode.IIdentifier.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IIdentifier.Text"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.Identifier">
            <summary>
            Compiler IIdentifier.
            </summary>
        </member>
        <member name="M:CompilerNode.Identifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.Identifier"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.Identifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.Identifier"/> class.
            </summary>
            <param name="text">The identifier text.</param>
        </member>
        <member name="P:CompilerNode.Identifier.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Identifier.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Identifier.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Identifier.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Identifier.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Identifier.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Identifier.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Identifier.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Identifier.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Identifier.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IIdentifier.Text"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Identifier.IdentifierListToString(System.Collections.Generic.IList{CompilerNode.IIdentifier})">
            <summary>
            Gets a string representation of a list of identifiers.
            </summary>
            <param name="identifierList">The list of identifiers.</param>
        </member>
        <member name="M:CompilerNode.Identifier.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ILibraryIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.LibraryIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IReplicateIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ReplicateIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ISourceIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.SourceIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ITypeIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.TypeIdentifier">
            <summary>
            Specialization of <see cref="T:CompilerNode.IIdentifier"/> used to ensure a separate static constructor for <see cref="T:EaslyCompiler.IRuleTemplate"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IImport">
            <summary>
            Compiler IImport.
            </summary>
        </member>
        <member name="P:CompilerNode.IImport.RenameList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Import.RenameBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.IImport.CheckImportConsistency(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.ILibrary}},CompilerNode.ILibrary@,EaslyCompiler.IErrorList)">
            <summary>
            Validates an import and return the matching library.
            </summary>
            <param name="libraryTable">Table of valid library names and their sources, updated upon return.</param>
            <param name="matchingLibrary">The matching library upon return.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if library names are valid.</returns>
        </member>
        <member name="M:CompilerNode.IImport.CheckRenames(Easly.ISealableDictionary{System.String,EaslyCompiler.IImportedClass},EaslyCompiler.IErrorList)">
            <summary>
            Check all rename clauses separately.
            </summary>
            <param name="importedClassTable">Table of imported classes.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if all rename clauses are valid.</returns>
        </member>
        <member name="T:CompilerNode.Import">
            <summary>
            Compiler IImport.
            </summary>
        </member>
        <member name="P:CompilerNode.Import.RenameList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Import.RenameBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Import.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Import.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Import.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Import.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Import.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Import.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Import.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Import.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Import.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Import.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="M:CompilerNode.Import.CheckImportConsistency(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.ILibrary}},CompilerNode.ILibrary@,EaslyCompiler.IErrorList)">
            <summary>
            Validates an import and return the matching library.
            </summary>
            <param name="libraryTable">Table of valid library names and their sources, updated upon return.</param>
            <param name="matchingLibrary">The matching library upon return.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if library names are valid.</returns>
        </member>
        <member name="M:CompilerNode.Import.CheckRenames(Easly.ISealableDictionary{System.String,EaslyCompiler.IImportedClass},EaslyCompiler.IErrorList)">
            <summary>
            Check all rename clauses separately.
            </summary>
            <param name="importedClassTable">Table of imported classes.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if all rename clauses are valid.</returns>
        </member>
        <member name="M:CompilerNode.Import.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IInheritance">
            <summary>
            Compiler IInheritance.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.RenameList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.RenameBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ForgetList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.ForgetBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.KeepList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.KeepBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.DiscontinueList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.DiscontinueBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ExportChangeList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.ExportChangeBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ResolvedTypeName">
            <summary>
            Type name of the resolved inherited type.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ResolvedType">
            <summary>
            Resolved inherited type.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ResolvedParentTypeName">
            <summary>
            Name of the resolved parent type.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ResolvedParentType">
            <summary>
            The resolved parent type.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ResolvedClassParentTypeName">
            <summary>
            Name of the resolved parent class type.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ResolvedClassParentType">
            <summary>
            The resolved parent class type.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.DiscreteTable">
            <summary>
            Table of association of discrete names to their instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.TypedefTable">
            <summary>
            Table of association of typedef names to their instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.FeatureTable">
            <summary>
            Table of association of feature names to their instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ExportTable">
            <summary>
            Table of association of export names to their instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ClassGroup">
            <summary>
            The class inherited, if not cloneable.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.ResolvedBodyTagList">
            <summary>
            Bodies inherited from the parent.
            </summary>
        </member>
        <member name="P:CompilerNode.IInheritance.AssignedDiscreteTable">
            <summary>
            Table of computer-assigned discrete values.
            </summary>
        </member>
        <member name="T:CompilerNode.Inheritance">
            <summary>
            Compiler IInheritance.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.RenameList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.RenameBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ForgetList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.ForgetBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.KeepList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.KeepBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.DiscontinueList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.DiscontinueBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ExportChangeList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Inheritance.ExportChangeBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Inheritance.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Inheritance.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Inheritance.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Inheritance.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Inheritance.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Inheritance.ResolvedTypeName">
            <summary>
            Type name of the resolved inherited type.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ResolvedType">
            <summary>
            Resolved inherited type.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ResolvedParentTypeName">
            <summary>
            Name of the resolved parent type.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ResolvedParentType">
            <summary>
            The resolved parent type.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ResolvedClassParentTypeName">
            <summary>
            Name of the resolved parent class type.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ResolvedClassParentType">
            <summary>
            The resolved parent class type.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.DiscreteTable">
            <summary>
            Table of association of discrete names to their instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.TypedefTable">
            <summary>
            Table of association of typedef names to their instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.FeatureTable">
            <summary>
            Table of association of feature names to their instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ExportTable">
            <summary>
            Table of association of export names to their instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ClassGroup">
            <summary>
            The class inherited, if not cloneable.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.ResolvedBodyTagList">
            <summary>
            Bodies inherited from the parent.
            </summary>
        </member>
        <member name="P:CompilerNode.Inheritance.AssignedDiscreteTable">
            <summary>
            Table of computer-assigned discrete values.
            </summary>
        </member>
        <member name="T:CompilerNode.IAsLongAsInstruction">
            <summary>
            Compiler IAsLongAsInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IAsLongAsInstruction.ContinuationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AsLongAsInstruction.ContinuationBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.AsLongAsInstruction">
            <summary>
            Compiler IAsLongAsInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.ContinuationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AsLongAsInstruction.ContinuationBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.AsLongAsInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AsLongAsInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AsLongAsInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AsLongAsInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.AsLongAsInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.AsLongAsInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.AsLongAsInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.AsLongAsInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.AsLongAsInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IAssignmentInstruction">
            <summary>
            Compiler IAssignmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IAssignmentInstruction.DestinationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AssignmentInstruction.DestinationBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IAssignmentInstruction.FinalFeatureTable">
            <summary>
            Table of resolved final features.
            </summary>
        </member>
        <member name="T:CompilerNode.AssignmentInstruction">
            <summary>
            Compiler IAssignmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.DestinationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AssignmentInstruction.DestinationBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AssignmentInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AssignmentInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.FinalFeatureTable">
            <summary>
            Table of resolved final features.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.AssignmentInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.AssignmentInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IAttachmentInstruction">
            <summary>
            Compiler IAttachmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttachmentInstruction.EntityNameList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AttachmentInstruction.EntityNameBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttachmentInstruction.AttachmentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AttachmentInstruction.AttachmentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IAttachmentInstruction.ResolvedInitResult">
            <summary>
            Types of results of init instructions.
            </summary>
        </member>
        <member name="T:CompilerNode.AttachmentInstruction">
            <summary>
            Compiler IAttachmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.EntityNameList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AttachmentInstruction.EntityNameBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.AttachmentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.AttachmentInstruction.AttachmentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.AttachmentInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AttachmentInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AttachmentInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AttachmentInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.ResolvedInitResult">
            <summary>
            Types of results of init instructions.
            </summary>
        </member>
        <member name="M:CompilerNode.AttachmentInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.AttachmentInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.AttachmentInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.AttachmentInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.AttachmentInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ICheckInstruction">
            <summary>
            Compiler ICheckInstruction.
            </summary>
        </member>
        <member name="T:CompilerNode.CheckInstruction">
            <summary>
            Compiler ICheckInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.CheckInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.CheckInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.CheckInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.CheckInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.CheckInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.CheckInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.CheckInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.CheckInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.CheckInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.CheckInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ICommandInstruction">
            <summary>
            Compiler ICommandInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandInstruction.SelectedFeature">
            <summary>
            The resolved called feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandInstruction.SelectedOverload">
            <summary>
            The selected overload in the called feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:CompilerNode.ICommandInstruction.CommandFinalType">
            <summary>
            The resolved type corresponding to the called feature.
            </summary>
        </member>
        <member name="T:CompilerNode.CommandInstruction">
            <summary>
            Compiler ICommandInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CommandInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.CommandInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.CommandInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.CommandInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.CommandInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.SelectedFeature">
            <summary>
            The resolved called feature.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.SelectedOverload">
            <summary>
            The selected overload in the called feature.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:CompilerNode.CommandInstruction.CommandFinalType">
            <summary>
            The resolved type corresponding to the called feature.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.CommandInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.CommandInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.CommandInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ICreateInstruction">
            <summary>
            Compiler ICreateInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.ICreateInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CreateInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ICreateInstruction.SelectedOverload">
            <summary>
            The selected overload in the called feature.
            </summary>
        </member>
        <member name="P:CompilerNode.ICreateInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:CompilerNode.ICreateInstruction.ResolvedEntityTypeName">
            <summary>
            The created object type name.
            </summary>
        </member>
        <member name="P:CompilerNode.ICreateInstruction.ResolvedEntityType">
            <summary>
            The created object type.
            </summary>
        </member>
        <member name="T:CompilerNode.CreateInstruction">
            <summary>
            Compiler ICreateInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.CreateInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.CreateInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.CreateInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.CreateInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.CreateInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.CreateInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.CreateInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.SelectedOverload">
            <summary>
            The selected overload in the called feature.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.ResolvedEntityTypeName">
            <summary>
            The created object type name.
            </summary>
        </member>
        <member name="P:CompilerNode.CreateInstruction.ResolvedEntityType">
            <summary>
            The created object type.
            </summary>
        </member>
        <member name="M:CompilerNode.CreateInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.CreateInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.CreateInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.CreateInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.CreateInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IDebugInstruction">
            <summary>
            Compiler IDebugInstruction.
            </summary>
        </member>
        <member name="T:CompilerNode.DebugInstruction">
            <summary>
            Compiler IDebugInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.DebugInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.DebugInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.DebugInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.DebugInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.DebugInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.DebugInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.DebugInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.DebugInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.DebugInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.DebugInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IForLoopInstruction">
            <summary>
            Compiler IForLoopInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IForLoopInstruction.EntityDeclarationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.EntityDeclarationBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IForLoopInstruction.InitInstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.InitInstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IForLoopInstruction.LoopInstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.LoopInstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IForLoopInstruction.IterationInstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.IterationInstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IForLoopInstruction.InvariantList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.InvariantBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.ForLoopInstruction">
            <summary>
            Compiler IForLoopInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.EntityDeclarationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.EntityDeclarationBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.InitInstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.InitInstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.LoopInstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.LoopInstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.IterationInstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.IterationInstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.InvariantList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ForLoopInstruction.InvariantBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ForLoopInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyEntityDeclaration">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ForLoopInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ForLoopInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ForLoopInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.ForLoopInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ForLoopInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ForLoopInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ForLoopInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.ForLoopInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IIfThenElseInstruction">
            <summary>
            Compiler IIfThenElseInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IIfThenElseInstruction.ConditionalList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IfThenElseInstruction.ConditionalBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.IfThenElseInstruction">
            <summary>
            Compiler IIfThenElseInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.ConditionalList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IfThenElseInstruction.ConditionalBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.IfThenElseInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyConditional">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.IfThenElseInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.IfThenElseInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.IfThenElseInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.IfThenElseInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IfThenElseInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IfThenElseInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.IfThenElseInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.IfThenElseInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IIndexAssignmentInstruction">
            <summary>
            Compiler IIndexAssignmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexAssignmentInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexAssignmentInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexAssignmentInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="T:CompilerNode.IndexAssignmentInstruction">
            <summary>
            Compiler IIndexAssignmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexAssignmentInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexAssignmentInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexAssignmentInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.IndexAssignmentInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.IndexAssignmentInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexAssignmentInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexAssignmentInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IndexAssignmentInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.IndexAssignmentInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexAssignmentInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IInspectInstruction">
            <summary>
            Compiler IInspectInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IInspectInstruction.WithList">
            <summary>
            Replicated list from <see cref="P:BaseNode.InspectInstruction.WithBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.InspectInstruction">
            <summary>
            Compiler IInspectInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.WithList">
            <summary>
            Replicated list from <see cref="P:BaseNode.InspectInstruction.WithBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.InspectInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyWith">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.InspectInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.InspectInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.InspectInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.InspectInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.InspectInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.InspectInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.InspectInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.InspectInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.InspectInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.InspectInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.InspectInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IInstruction">
            <summary>
            Compiler IInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.IInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.IInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IKeywordAssignmentInstruction">
            <summary>
            Compiler IKeywordAssignmentInstruction.
            </summary>
        </member>
        <member name="T:CompilerNode.KeywordAssignmentInstruction">
            <summary>
            Compiler IKeywordAssignmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordAssignmentInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.KeywordAssignmentInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.KeywordAssignmentInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordAssignmentInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordAssignmentInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.KeywordAssignmentInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.KeywordAssignmentInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordAssignmentInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IOverLoopInstruction">
            <summary>
            Compiler IOverLoopInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IOverLoopInstruction.IndexerList">
            <summary>
            Replicated list from <see cref="P:BaseNode.OverLoopInstruction.IndexerBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IOverLoopInstruction.InvariantList">
            <summary>
            Replicated list from <see cref="P:BaseNode.OverLoopInstruction.InvariantBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IOverLoopInstruction.InnerLoopScope">
            <summary>
            Scope of instructions in the loop.
            </summary>
        </member>
        <member name="P:CompilerNode.IOverLoopInstruction.ResolvedInitResult">
            <summary>
            Result types of initialization.
            </summary>
        </member>
        <member name="T:CompilerNode.OverLoopInstruction">
            <summary>
            Compiler IOverLoopInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.IndexerList">
            <summary>
            Replicated list from <see cref="P:BaseNode.OverLoopInstruction.IndexerBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.InvariantList">
            <summary>
            Replicated list from <see cref="P:BaseNode.OverLoopInstruction.InvariantBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.OverLoopInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.OverLoopInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.OverLoopInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.OverLoopInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.InnerLoopScope">
            <summary>
            Scope of instructions in the loop.
            </summary>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.ResolvedInitResult">
            <summary>
            Result types of initialization.
            </summary>
        </member>
        <member name="M:CompilerNode.OverLoopInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.OverLoopInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.OverLoopInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.OverLoopInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.OverLoopInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPrecursorIndexAssignmentInstruction">
            <summary>
            Compiler IPrecursorIndexAssignmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorIndexAssignmentInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PrecursorIndexAssignmentInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorIndexAssignmentInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="T:CompilerNode.PrecursorIndexAssignmentInstruction">
            <summary>
            Compiler IPrecursorIndexAssignmentInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PrecursorIndexAssignmentInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexAssignmentInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexAssignmentInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PrecursorIndexAssignmentInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PrecursorIndexAssignmentInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexAssignmentInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexAssignmentInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.PrecursorIndexAssignmentInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.PrecursorIndexAssignmentInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorIndexAssignmentInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPrecursorInstruction">
            <summary>
            Compiler IPrecursorInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PrecursorInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IPrecursorInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="T:CompilerNode.PrecursorInstruction">
            <summary>
            Compiler IPrecursorInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PrecursorInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PrecursorInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PrecursorInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.PrecursorInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.PrecursorInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.PrecursorInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IRaiseEventInstruction">
            <summary>
            Compiler IRaiseEventInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IRaiseEventInstruction.ResolvedFeature">
            <summary>
            The event feature.
            </summary>
        </member>
        <member name="P:CompilerNode.IRaiseEventInstruction.ResolvedEntityType">
            <summary>
            The event entity type.
            </summary>
        </member>
        <member name="T:CompilerNode.RaiseEventInstruction">
            <summary>
            Compiler IRaiseEventInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.RaiseEventInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.RaiseEventInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.RaiseEventInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.ResolvedFeature">
            <summary>
            The event feature.
            </summary>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.ResolvedEntityType">
            <summary>
            The event entity type.
            </summary>
        </member>
        <member name="M:CompilerNode.RaiseEventInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.RaiseEventInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.RaiseEventInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.RaiseEventInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.RaiseEventInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IReleaseInstruction">
            <summary>
            Compiler IReleaseInstruction.
            </summary>
        </member>
        <member name="T:CompilerNode.ReleaseInstruction">
            <summary>
            Compiler IReleaseInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ReleaseInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ReleaseInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ReleaseInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="M:CompilerNode.ReleaseInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ReleaseInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ReleaseInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ReleaseInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.ReleaseInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IThrowInstruction">
            <summary>
            Compiler IThrowInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.IThrowInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ThrowInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IThrowInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:CompilerNode.IThrowInstruction.ResolvedType">
            <summary>
            The resolved exception type.
            </summary>
        </member>
        <member name="T:CompilerNode.ThrowInstruction">
            <summary>
            Compiler IThrowInstruction.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.ArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ThrowInstruction.ArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ThrowInstruction.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ThrowInstruction.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ThrowInstruction.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ThrowInstruction.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.ResolvedResult">
            <summary>
            Types of results of the instruction.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.ResolvedException">
            <summary>
            List of exceptions the instruction can throw.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.FeatureCall">
            <summary>
            Details of the feature call.
            </summary>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.ResolvedType">
            <summary>
            The resolved exception type.
            </summary>
        </member>
        <member name="M:CompilerNode.ThrowInstruction.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.ThrowInstruction.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.ThrowInstruction.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="P:CompilerNode.ThrowInstruction.InstructionToString">
            <summary>
            Gets a string representation of the instruction.
            </summary>
        </member>
        <member name="M:CompilerNode.ThrowInstruction.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ILibrary">
            <summary>
            Compiler ILibrary.
            </summary>
        </member>
        <member name="P:CompilerNode.ILibrary.ImportList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Library.ImportBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ILibrary.ClassIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Library.ClassIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ILibrary.ValidLibraryName">
            <summary>
            The library name, verified as valid.
            </summary>
        </member>
        <member name="P:CompilerNode.ILibrary.ValidSourceName">
            <summary>
            The library source name, verified as valid.
            </summary>
        </member>
        <member name="P:CompilerNode.ILibrary.ImportedClassTable">
            <summary>
            Table of imported classes.
            </summary>
        </member>
        <member name="P:CompilerNode.ILibrary.ImportedLibraryList">
            <summary>
            List of libraries imported by this one.
            </summary>
        </member>
        <member name="P:CompilerNode.ILibrary.IsResolved">
            <summary>
            True if all imports have been resolved.
            </summary>
        </member>
        <member name="M:CompilerNode.ILibrary.CheckLibraryNames(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.ILibrary}},System.Collections.Generic.IList{CompilerNode.ILibrary},EaslyCompiler.IErrorList)">
            <summary>
            Validates the library name and library source name, and update <see cref="P:CompilerNode.ILibrary.ValidLibraryName"/> and <see cref="P:CompilerNode.ILibrary.ValidSourceName"/>.
            </summary>
            <param name="libraryTable">Table of valid library names and their sources, updated upon return.</param>
            <param name="validatedLibraryList">List of classes with valid names, updated upon return.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if library names are valid.</returns>
        </member>
        <member name="M:CompilerNode.ILibrary.InitLibraryTables(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},EaslyCompiler.IErrorList)">
            <summary>
            Initializes the list of classes belonging to the library.
            </summary>
            <param name="classTable">Valid class names.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if initialization succeeded.</returns>
        </member>
        <member name="M:CompilerNode.ILibrary.Resolve(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.ILibrary}},System.Collections.Generic.IList{CompilerNode.ILibrary},System.Boolean@,EaslyCompiler.IErrorList)">
            <summary>
            Resolves reference from libraries to classes and other libraries.
            </summary>
            <param name="libraryTable">The table of known libraries.</param>
            <param name="resolvedLibraryList">The list of libraries that have been resolved so far.</param>
            <param name="importChanged">Indicates that the import specifier has changed.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if the method succeeded.</returns>
        </member>
        <member name="T:CompilerNode.Library">
            <summary>
            Compiler ILibrary.
            </summary>
        </member>
        <member name="P:CompilerNode.Library.ImportList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Library.ImportBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Library.ClassIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Library.ClassIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Library.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Library.ValidLibraryName">
            <summary>
            The library name, verified as valid.
            </summary>
        </member>
        <member name="P:CompilerNode.Library.ValidSourceName">
            <summary>
            The library source name, verified as valid.
            </summary>
        </member>
        <member name="P:CompilerNode.Library.ImportedClassTable">
            <summary>
            Table of imported classes.
            </summary>
        </member>
        <member name="P:CompilerNode.Library.ImportedLibraryList">
            <summary>
            List of libraries imported by this one.
            </summary>
        </member>
        <member name="P:CompilerNode.Library.IsResolved">
            <summary>
            True if all imports have been resolved.
            </summary>
        </member>
        <member name="M:CompilerNode.Library.CheckLibraryNames(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.ILibrary}},System.Collections.Generic.IList{CompilerNode.ILibrary},EaslyCompiler.IErrorList)">
            <summary>
            Validates the library name and library source name, and update <see cref="P:CompilerNode.Library.ValidLibraryName"/> and <see cref="P:CompilerNode.Library.ValidSourceName"/>.
            </summary>
            <param name="libraryTable">Table of valid library names and their sources, updated upon return.</param>
            <param name="validatedLibraryList">List of classes with valid names, updated upon return.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if library names are valid.</returns>
        </member>
        <member name="M:CompilerNode.Library.InitLibraryTables(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},EaslyCompiler.IErrorList)">
            <summary>
            Initializes the list of classes belonging to the library.
            </summary>
            <param name="classTable">Valid class names.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if initialization succeeded.</returns>
        </member>
        <member name="M:CompilerNode.Library.Resolve(Easly.ISealableDictionary{System.String,Easly.ISealableDictionary{System.String,CompilerNode.ILibrary}},System.Collections.Generic.IList{CompilerNode.ILibrary},System.Boolean@,EaslyCompiler.IErrorList)">
            <summary>
            Resolves reference from libraries to classes and other libraries.
            </summary>
            <param name="libraryTable">The table of known libraries.</param>
            <param name="resolvedLibraryList">The list of libraries that have been resolved so far.</param>
            <param name="importChanged">Indicates that the import specifier has changed.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if the method succeeded.</returns>
        </member>
        <member name="M:CompilerNode.Library.MergeImports(Easly.ISealableDictionary{System.String,EaslyCompiler.IImportedClass},CompilerNode.IImport,CompilerNode.ILibrary,EaslyCompiler.IErrorList)">
            <summary>
            Merges an import clause with already imported classes.
            </summary>
            <param name="importedClassTable">Already imported classes.</param>
            <param name="importItem">The merged import.</param>
            <param name="matchingLibrary">The library referenced by <paramref name="importItem"/>.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if the merge succeeded.</returns>
        </member>
        <member name="M:CompilerNode.Library.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IName">
            <summary>
            Compiler IName.
            </summary>
        </member>
        <member name="P:CompilerNode.IName.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IName.Text"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.Name">
            <summary>
            Compiler IName.
            </summary>
        </member>
        <member name="M:CompilerNode.Name.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.Name"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.Name.#ctor(EaslyCompiler.ISource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.Name"/> class.
            </summary>
            <param name="location">The location associated to this name.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:CompilerNode.Name.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Name.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Name.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Name.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Name.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Name.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Name.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Name.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Name.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Name.ValidText">
            <summary>
            The valid value of <see cref="P:BaseNode.IName.Text"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Name.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.INode">
            <summary>
            Compiler INode.
            </summary>
        </member>
        <member name="T:CompilerNode.IAnchoredType">
            <summary>
            Compiler IAnchoredType.
            </summary>
        </member>
        <member name="T:CompilerNode.AnchoredType">
            <summary>
            Compiler IAnchoredType.
            </summary>
        </member>
        <member name="P:CompilerNode.AnchoredType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AnchoredType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AnchoredType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AnchoredType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AnchoredType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AnchoredType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AnchoredType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AnchoredType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AnchoredType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AnchoredType.ResolvedTypeName">
            <summary>
            The name of the resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.AnchoredType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.AnchoredType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.AnchoredType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IClassType">
            <summary>
            Compiler-only IClassType.
            </summary>
        </member>
        <member name="P:CompilerNode.IClassType.SourceType">
            <summary>
            The source from which this type is issued.
            </summary>
        </member>
        <member name="P:CompilerNode.IClassType.BaseClass">
            <summary>
            The class used to instanciate this type.
            </summary>
        </member>
        <member name="P:CompilerNode.IClassType.TypeArgumentTable">
            <summary>
            Arguments if the class is generic.
            </summary>
        </member>
        <member name="P:CompilerNode.IClassType.TypedefTable">
            <summary>
            Typedefs available in this type.
            </summary>
        </member>
        <member name="M:CompilerNode.IClassType.CloneWithRenames(Easly.ISealableDictionary{EaslyCompiler.IFeatureName,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,CompilerNode.ITypedefType},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,CompilerNode.IDiscrete},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance},CompilerNode.IClassType)">
            <summary>
            Creates a clone of this type with renamed identifiers.
            </summary>
            <param name="renamedExportTable">The rename table for exports.</param>
            <param name="renamedTypedefTable">The rename table for typedefs.</param>
            <param name="renamedDiscreteTable">The rename table for discretes.</param>
            <param name="renamedFeatureTable">The rename table for features.</param>
            <param name="instancingClassType">The type that is requesting cloning.</param>
        </member>
        <member name="P:CompilerNode.IClassType.IsUsedInCloneOf">
            <summary>
            True if an instance of the class is cloned at some point.
            </summary>
        </member>
        <member name="M:CompilerNode.IClassType.MarkAsUsedInCloneOf">
            <summary>
            Sets the <see cref="P:CompilerNode.IClassType.IsUsedInCloneOf"/> flag.
            </summary>
        </member>
        <member name="T:CompilerNode.ClassType">
            <summary>
            Compiler-only IClassType.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.ClassAnyType">
            <summary>
            Compiler 'Any' type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.ClassAnyReferenceType">
            <summary>
            Compiler 'Any Reference' type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.ClassAnyValueType">
            <summary>
            Compiler 'Any Value' type.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassType.#ctor(CompilerNode.IObjectType,CompilerNode.IClass,Easly.ISealableDictionary{System.String,EaslyCompiler.ICompiledType})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ClassType"/> class.
            </summary>
            <param name="sourceType">The source from which this type is issued.</param>
            <param name="baseClass">The class used to instanciate this type.</param>
            <param name="typeArgumentTable">Arguments if the class is generic.</param>
        </member>
        <member name="M:CompilerNode.ClassType.Create(CompilerNode.IClass,Easly.ISealableDictionary{System.String,EaslyCompiler.ICompiledType},EaslyCompiler.ICompiledTypeWithFeature)">
            <summary>
            Creates a <see cref="T:CompilerNode.ClassType"/>.
            </summary>
            <param name="baseClass">The class used to instanciate this type.</param>
            <param name="typeArgumentTable">Arguments if the class is generic.</param>
            <param name="instancingClassType">The class type if this instance is a derivation (such as renaming).</param>
        </member>
        <member name="M:CompilerNode.ClassType.#ctor(CompilerNode.IClass,Easly.ISealableDictionary{System.String,EaslyCompiler.ICompiledType},EaslyCompiler.ICompiledTypeWithFeature,Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ClassType"/> class.
            </summary>
            <param name="baseClass">The class used to instanciate this type.</param>
            <param name="typeArgumentTable">Arguments if the class is generic.</param>
            <param name="instancingClassType">The class type if this instance is a derivation (such as renaming).</param>
            <param name="conformanceTable">The initialized conformance table.</param>
        </member>
        <member name="P:CompilerNode.ClassType.DiscreteTable">
            <summary>
            Discretes available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.FeatureTable">
            <summary>
            Features available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.ExportTable">
            <summary>
            Exports available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.ConformanceTable">
            <summary>
            Table of conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.InstancingRecordList">
            <summary>
            List of type instancing.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.TypeFriendlyName">
            <summary>
            Type friendly name, unique.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.IsReference">
            <summary>
            True if the type is a reference type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.IsValue">
            <summary>
            True if the type is a value type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.OriginatingTypedef">
            <summary>
            The typedef this type comes from, if assigned.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassType.GetTypeTable">
            <summary>
            Gets the type table for this type.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassType.MergeConformingParentTypes(CompilerNode.IClass,CompilerNode.IClassType)">
            <summary>
            Merge inheritance clauses.
            </summary>
            <param name="baseClass">The class with inheritance to merge.</param>
            <param name="resolvedClassType">The type from the class.</param>
        </member>
        <member name="M:CompilerNode.ClassType.InstanciateType(EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates an instance of a class type, or reuse an existing instance.
            </summary>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The proposed type instance name.</param>
            <param name="resolvedType">The proposed type instance.</param>
        </member>
        <member name="M:CompilerNode.ClassType.ResolveType(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},CompilerNode.IClass,Easly.ISealableDictionary{System.String,EaslyCompiler.ICompiledType},EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Locates, or creates, a resolved class type.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseClass">The class this is from.</param>
            <param name="typeArgumentTable">The generic arguments used when creating the class type.</param>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.ClassType.TypeTableContaining(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},CompilerNode.IClass,Easly.ISealableDictionary{System.String,EaslyCompiler.ICompiledType},EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Checks if a matching class type exists in a type table.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseClass">The class this is from.</param>
            <param name="typeArgumentTable">The generic arguments used when creating the class type.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.ClassType.BuildType(CompilerNode.IClass,Easly.ISealableDictionary{System.String,EaslyCompiler.ICompiledType},EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates a class type with resolved arguments.
            </summary>
            <param name="baseClass">The class this is from.</param>
            <param name="typeArgumentTable">The generic arguments used when creating the class type.</param>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="P:CompilerNode.ClassType.SourceType">
            <summary>
            The source from which this type is issued.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.BaseClass">
            <summary>
            The class used to instanciate this type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.TypeArgumentTable">
            <summary>
            Arguments if the class is generic.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.TypedefTable">
            <summary>
            Typedefs available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.IsUsedInCloneOf">
            <summary>
            True if an instance of the class is cloned at some point.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassType.TypesHaveIdenticalSignature(CompilerNode.IClassType,CompilerNode.IClassType)">
            <summary>
            Compares two types.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="M:CompilerNode.ClassType.CloneWithRenames(Easly.ISealableDictionary{EaslyCompiler.IFeatureName,Easly.ISealableDictionary{System.String,CompilerNode.IClass}},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,CompilerNode.ITypedefType},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,CompilerNode.IDiscrete},Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance},CompilerNode.IClassType)">
            <summary>
            Creates a clone of this type with renamed identifiers.
            </summary>
            <param name="renamedExportTable">The rename table for exports.</param>
            <param name="renamedTypedefTable">The rename table for typedefs.</param>
            <param name="renamedDiscreteTable">The rename table for discretes.</param>
            <param name="renamedFeatureTable">The rename table for features.</param>
            <param name="instancingClassType">The type that is requesting cloning.</param>
        </member>
        <member name="M:CompilerNode.ClassType.MarkAsUsedInCloneOf">
            <summary>
            Sets the <see cref="P:CompilerNode.ClassType.IsUsedInCloneOf"/> flag.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassType.NumberKind">
            <summary>
            The number kind if the type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassType.GetDefaultNumberKind">
            <summary>
            Gets the default number kind for this type.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassType.UpdateNumberKind(EaslyCompiler.NumberKinds,System.Boolean@)">
            <summary>
            Tentatively updates the number kind if <paramref name="numberKind"/> is more accurate.
            </summary>
            <param name="numberKind">The new kind.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="M:CompilerNode.ClassType.UpdateNumberKind(EaslyCompiler.ICompiledNumberType,System.Boolean@)">
            <summary>
            Tentatively updates the number kind from another type if it is more accurate.
            </summary>
            <param name="type">The other type.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="M:CompilerNode.ClassType.UpdateNumberKind(System.Collections.Generic.IList{EaslyCompiler.ICompiledNumberType},System.Boolean@)">
            <summary>
            Tentatively updates the number kind from a list of other types, if they are all more accurate.
            </summary>
            <param name="typeList">The list of types.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="M:CompilerNode.ClassType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ITypedefType">
            <summary>
            Compiler-only ITypedefType.
            </summary>
        </member>
        <member name="P:CompilerNode.ITypedefType.ReferencedTypeName">
            <summary>
            Resolved type name of the source.
            </summary>
        </member>
        <member name="P:CompilerNode.ITypedefType.ReferencedType">
            <summary>
            Resolved type of the source.
            </summary>
        </member>
        <member name="T:CompilerNode.TypedefType">
            <summary>
            Compiler-only ITypedefType.
            </summary>
        </member>
        <member name="P:CompilerNode.TypedefType.ReferencedTypeName">
            <summary>
            Resolved type name of the source.
            </summary>
        </member>
        <member name="P:CompilerNode.TypedefType.ReferencedType">
            <summary>
            Resolved type of the source.
            </summary>
        </member>
        <member name="P:CompilerNode.TypedefType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.TypedefType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IFormalGenericType">
            <summary>
            Compiler-only IFormalGenericType.
            </summary>
        </member>
        <member name="P:CompilerNode.IFormalGenericType.FormalGeneric">
            <summary>
            The generic from which this instance is issued.
            </summary>
        </member>
        <member name="P:CompilerNode.IFormalGenericType.ResolvedTypeName">
            <summary>
            The associated unique type name.
            </summary>
        </member>
        <member name="P:CompilerNode.IFormalGenericType.IsUsedToCreate">
            <summary>
            True if the type is used to create at least one object.
            </summary>
        </member>
        <member name="M:CompilerNode.IFormalGenericType.SetIsUsedToCreate">
            <summary>
            Sets the <see cref="P:CompilerNode.IFormalGenericType.IsUsedToCreate"/> property.
            </summary>
        </member>
        <member name="T:CompilerNode.FormalGenericType">
            <summary>
            Compiler-only IFormalGenericType.
            </summary>
        </member>
        <member name="M:CompilerNode.FormalGenericType.#ctor(CompilerNode.IGeneric,EaslyCompiler.ITypeName)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.FormalGenericType"/> class.
            </summary>
            <param name="formalGeneric">The generic from which this instance is issued.</param>
            <param name="resolvedTypeName">The associated unique type name.</param>
        </member>
        <member name="P:CompilerNode.FormalGenericType.FormalGeneric">
            <summary>
            The generic from which this instance is issued.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.ResolvedTypeName">
            <summary>
            The associated unique type name.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.DiscreteTable">
            <summary>
            Discretes available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.FeatureTable">
            <summary>
            Features available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.ExportTable">
            <summary>
            Exports available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.ConformanceTable">
            <summary>
            Table of conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.InstancingRecordList">
            <summary>
            List of type instancing.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.TypeFriendlyName">
            <summary>
            Type friendly name, unique.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.IsReference">
            <summary>
            True if the type is a reference type.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.IsValue">
            <summary>
            True if the type is a value type.
            </summary>
        </member>
        <member name="P:CompilerNode.FormalGenericType.OriginatingTypedef">
            <summary>
            The typedef this type comes from, if assigned.
            </summary>
        </member>
        <member name="M:CompilerNode.FormalGenericType.GetTypeTable">
            <summary>
            Gets the type table for this type.
            </summary>
        </member>
        <member name="M:CompilerNode.FormalGenericType.InstanciateType(EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates an instance of a class type, or reuse an existing instance.
            </summary>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The proposed type instance name.</param>
            <param name="resolvedType">The proposed type instance.</param>
        </member>
        <member name="P:CompilerNode.FormalGenericType.IsUsedToCreate">
            <summary>
            True if the type is used to create at least one object.
            </summary>
        </member>
        <member name="M:CompilerNode.FormalGenericType.SetIsUsedToCreate">
            <summary>
            Sets the <see cref="P:CompilerNode.FormalGenericType.IsUsedToCreate"/> property.
            </summary>
        </member>
        <member name="M:CompilerNode.FormalGenericType.TypesHaveIdenticalSignature(CompilerNode.IFormalGenericType,CompilerNode.IFormalGenericType)">
            <summary>
            Compares two types.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="P:CompilerNode.FormalGenericType.NumberKind">
            <summary>
            The number kind if the type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.FormalGenericType.GetDefaultNumberKind">
            <summary>
            Gets the default number kind for this type.
            </summary>
        </member>
        <member name="M:CompilerNode.FormalGenericType.UpdateNumberKind(EaslyCompiler.NumberKinds,System.Boolean@)">
            <summary>
            Tentatively updates the number kind if <paramref name="numberKind"/> is more accurate.
            </summary>
            <param name="numberKind">The new kind.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="M:CompilerNode.FormalGenericType.UpdateNumberKind(EaslyCompiler.ICompiledNumberType,System.Boolean@)">
            <summary>
            Tentatively updates the number kind from another type if it is more accurate.
            </summary>
            <param name="type">The other type.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="M:CompilerNode.FormalGenericType.UpdateNumberKind(System.Collections.Generic.IList{EaslyCompiler.ICompiledNumberType},System.Boolean@)">
            <summary>
            Tentatively updates the number kind from a list of other types, if they are all more accurate.
            </summary>
            <param name="typeList">The list of types.</param>
            <param name="isChanged">True if the number kind was changed.</param>
        </member>
        <member name="M:CompilerNode.FormalGenericType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IFunctionType">
            <summary>
            Compiler IFunctionType.
            </summary>
        </member>
        <member name="P:CompilerNode.IFunctionType.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.FunctionType.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IFunctionType.ResolvedBaseTypeName">
            <summary>
            Resolved type name for the base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IFunctionType.ResolvedBaseType">
            <summary>
            Resolved type for the base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IFunctionType.MostCommonResult">
            <summary>
            Resolved type for the most common result of all overloads.
            </summary>
        </member>
        <member name="T:CompilerNode.FunctionType">
            <summary>
            Compiler IFunctionType.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.FunctionType"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionType.#ctor(EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,System.Collections.Generic.IList{CompilerNode.IQueryOverloadType})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.FunctionType"/> class.
            </summary>
            <param name="baseTypeName">Name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="overloadList">The list of resolved overloads.</param>
        </member>
        <member name="P:CompilerNode.FunctionType.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.FunctionType.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionType.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyOverload">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.FunctionType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.FunctionType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.FunctionType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.FunctionType.ResolvedBaseTypeName">
            <summary>
            Resolved type name for the base type.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.ResolvedBaseType">
            <summary>
            Resolved type for the base type.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.MostCommonResult">
            <summary>
            Resolved type for the most common result of all overloads.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.DiscreteTable">
            <summary>
            Discretes available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.FeatureTable">
            <summary>
            Features available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.ExportTable">
            <summary>
            Exports available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.ConformanceTable">
            <summary>
            Table of conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.InstancingRecordList">
            <summary>
            List of type instancing.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.TypeFriendlyName">
            <summary>
            Type friendly name, unique.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.IsReference">
            <summary>
            True if the type is a reference type.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.IsValue">
            <summary>
            True if the type is a value type.
            </summary>
        </member>
        <member name="P:CompilerNode.FunctionType.OriginatingTypedef">
            <summary>
            The typedef this type comes from, if assigned.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionType.InstanciateType(EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates an instance of a class type, or reuse an existing instance.
            </summary>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The proposed type instance name.</param>
            <param name="resolvedType">The proposed type instance.</param>
        </member>
        <member name="M:CompilerNode.FunctionType.ResolveType(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,System.Collections.Generic.IList{CompilerNode.IQueryOverloadType},EaslyCompiler.ITypeName@,CompilerNode.IFunctionType@)">
            <summary>
            Locates, or creates, a resolved function type.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseTypeName">Name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="overloadList">The list of resolved overloads.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.FunctionType.TypeTableContaining(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},EaslyCompiler.ICompiledType,System.Collections.Generic.IList{CompilerNode.IQueryOverloadType},EaslyCompiler.ITypeName@,CompilerNode.IFunctionType@)">
            <summary>
            Checks if a matching function type exists in a type table.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseType">The resolved base type.</param>
            <param name="overloadList">The list of resolved overloads.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.FunctionType.IsQueryOverloadMatching(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},CompilerNode.IQueryOverloadType,System.Collections.Generic.IList{CompilerNode.IQueryOverloadType})">
            <summary>
            Checks if a matching function and overload exists in a type table.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="overload">The overload to check.</param>
            <param name="overloadList">The list of other overloads in the candidate function type.</param>
        </member>
        <member name="M:CompilerNode.FunctionType.BuildType(EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,System.Collections.Generic.IList{CompilerNode.IQueryOverloadType},EaslyCompiler.ITypeName@,CompilerNode.IFunctionType@)">
            <summary>
            Creates a function type with resolved arguments.
            </summary>
            <param name="baseTypeName">Name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="overloadList">The list of resolved overloads.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.FunctionType.TypesHaveIdenticalSignature(CompilerNode.IFunctionType,CompilerNode.IFunctionType)">
            <summary>
            Compares two types.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="P:CompilerNode.FunctionType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.FunctionType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IGenericType">
            <summary>
            Compiler IGenericType.
            </summary>
        </member>
        <member name="P:CompilerNode.IGenericType.TypeArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.GenericType.TypeArgumentBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IGenericType.BaseClass">
            <summary>
            Base class of the generic type.
            </summary>
        </member>
        <member name="P:CompilerNode.IGenericType.ArgumentStyle">
            <summary>
            The style of type arguments.
            </summary>
        </member>
        <member name="P:CompilerNode.IGenericType.ArgumentIdentifierTable">
            <summary>
            Table of argument identifiers for assignment.
            </summary>
        </member>
        <member name="P:CompilerNode.IGenericType.ResolvedTypeArgumentTable">
            <summary>
            Resolved types for arguments.
            </summary>
        </member>
        <member name="P:CompilerNode.IGenericType.ResolvedArgumentLocationTable">
            <summary>
            Resolved locations for arguments.
            </summary>
        </member>
        <member name="M:CompilerNode.IGenericType.SetArgumentStyle(EaslyCompiler.TypeArgumentStyles)">
            <summary>
            Sets the style of type arguments.
            </summary>
            <param name="argumentStyle">The style of type arguments.</param>
        </member>
        <member name="T:CompilerNode.GenericType">
            <summary>
            Compiler IGenericType.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.TypeArgumentList">
            <summary>
            Replicated list from <see cref="P:BaseNode.GenericType.TypeArgumentBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.GenericType.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyTypeArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.GenericType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.GenericType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.GenericType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.GenericType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.GenericType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.BaseClass">
            <summary>
            Base class of the generic type.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.ArgumentStyle">
            <summary>
            The style of type arguments.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.ArgumentIdentifierTable">
            <summary>
            Table of argument identifiers for assignment.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.ResolvedTypeArgumentTable">
            <summary>
            Resolved types for arguments.
            </summary>
        </member>
        <member name="P:CompilerNode.GenericType.ResolvedArgumentLocationTable">
            <summary>
            Resolved locations for arguments.
            </summary>
        </member>
        <member name="M:CompilerNode.GenericType.SetArgumentStyle(EaslyCompiler.TypeArgumentStyles)">
            <summary>
            Sets the style of type arguments.
            </summary>
            <param name="argumentStyle">The style of type arguments.</param>
        </member>
        <member name="P:CompilerNode.GenericType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.GenericType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IIndexerType">
            <summary>
            Compiler IIndexerType.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.IndexParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.IndexParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.GetRequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.GetRequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.GetEnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.GetEnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.GetExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.GetExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.SetRequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.SetRequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.SetEnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.SetEnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.SetExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.SetExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.ResolvedBaseTypeName">
            <summary>
            The type name of the resolved base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.ResolvedBaseType">
            <summary>
            The type name of the resolved base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.ResolvedEntityTypeName">
            <summary>
            The type name of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.ResolvedEntityType">
            <summary>
            The type of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.IIndexerType.ParameterTable">
            <summary>
            Table of resolved parameters.
            </summary>
        </member>
        <member name="T:CompilerNode.IndexerType">
            <summary>
            Compiler IIndexerType.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.IndexerType"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerType.#ctor(EaslyCompiler.ITypeName,CompilerNode.IClassType,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,BaseNode.UtilityType,System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.ParameterEndStatus,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.IndexerType"/> class.
            </summary>
            <param name="baseTypeName">The type name of the resolved base type.</param>
            <param name="baseType">The type of the resolved base type.</param>
            <param name="entityTypeName">The type name of the resolved result type.</param>
            <param name="entityType">The type of the resolved result type.</param>
            <param name="indexerKind">Type of indexer.</param>
            <param name="indexParameterList">The list of parameters.</param>
            <param name="parameterEnd">The indexer parameter end type.</param>
            <param name="getRequireList">The list of require assertions for the getter.</param>
            <param name="getEnsureList">The list of ensure assertions for the getter.</param>
            <param name="getExceptionIdentifierList">The list of known exceptions thrown for the getter.</param>
            <param name="setRequireList">The list of require assertions for the setter.</param>
            <param name="setEnsureList">The list of ensure assertions for the setter.</param>
            <param name="setExceptionIdentifierList">The list of known exceptions thrown for the setter.</param>
        </member>
        <member name="P:CompilerNode.IndexerType.IndexParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.IndexParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.GetRequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.GetRequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.GetEnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.GetEnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.GetExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.GetExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.SetRequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.SetRequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.SetEnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.SetEnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.SetExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.IndexerType.SetExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerType.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyTypeArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.IndexerType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.IndexerType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.IndexerType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.IndexerType.ResolvedBaseTypeName">
            <summary>
            The type name of the resolved base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.ResolvedBaseType">
            <summary>
            The type of the resolved base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.ResolvedEntityTypeName">
            <summary>
            The type name of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.ResolvedEntityType">
            <summary>
            The type of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.ParameterTable">
            <summary>
            Table of resolved parameters.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.DiscreteTable">
            <summary>
            Discretes available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.FeatureTable">
            <summary>
            Features available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.ExportTable">
            <summary>
            Exports available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.ConformanceTable">
            <summary>
            Table of conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.InstancingRecordList">
            <summary>
            List of type instancing.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.TypeFriendlyName">
            <summary>
            Type friendly name, unique.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.IsReference">
            <summary>
            True if the type is a reference type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.IsValue">
            <summary>
            True if the type is a value type.
            </summary>
        </member>
        <member name="P:CompilerNode.IndexerType.OriginatingTypedef">
            <summary>
            The typedef this type comes from, if assigned.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerType.InstanciateType(EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates an instance of a class type, or reuse an existing instance.
            </summary>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The proposed type instance name.</param>
            <param name="resolvedType">The proposed type instance.</param>
        </member>
        <member name="M:CompilerNode.IndexerType.ResolveType(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},EaslyCompiler.ITypeName,CompilerNode.IClassType,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,BaseNode.UtilityType,System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.ParameterEndStatus,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Locates, or creates, a resolved function type.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseTypeName">The type name of the resolved base type.</param>
            <param name="baseType">The type of the resolved base type.</param>
            <param name="entityTypeName">The type name of the resolved result type.</param>
            <param name="entityType">The type of the resolved result type.</param>
            <param name="indexerKind">Type of indexer.</param>
            <param name="indexParameterList">The list of parameters.</param>
            <param name="parameterEnd">The indexer parameter end type.</param>
            <param name="getRequireList">The list of require assertions for the getter.</param>
            <param name="getEnsureList">The list of ensure assertions for the getter.</param>
            <param name="getExceptionIdentifierList">The list of known exceptions thrown for the getter.</param>
            <param name="setRequireList">The list of require assertions for the setter.</param>
            <param name="setEnsureList">The list of ensure assertions for the setter.</param>
            <param name="setExceptionIdentifierList">The list of known exceptions thrown for the setter.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.IndexerType.TypeTableContaining(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType,BaseNode.UtilityType,System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.ParameterEndStatus,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Checks if a matching function type exists in a type table.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseType">The type of the resolved base type.</param>
            <param name="entityType">The type of the resolved result type.</param>
            <param name="indexerKind">Type of indexer.</param>
            <param name="indexParameterList">The list of parameters.</param>
            <param name="parameterEnd">The indexer parameter end type.</param>
            <param name="getRequireList">The list of require assertions for the getter.</param>
            <param name="getEnsureList">The list of ensure assertions for the getter.</param>
            <param name="getExceptionIdentifierList">The list of known exceptions thrown for the getter.</param>
            <param name="setRequireList">The list of require assertions for the setter.</param>
            <param name="setEnsureList">The list of ensure assertions for the setter.</param>
            <param name="setExceptionIdentifierList">The list of known exceptions thrown for the setter.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.IndexerType.BuildType(EaslyCompiler.ITypeName,CompilerNode.IClassType,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,BaseNode.UtilityType,System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.ParameterEndStatus,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates a function type with resolved arguments.
            </summary>
            <param name="baseTypeName">The type name of the resolved base type.</param>
            <param name="baseType">The type of the resolved base type.</param>
            <param name="entityTypeName">The type name of the resolved result type.</param>
            <param name="entityType">The type of the resolved result type.</param>
            <param name="indexerKind">Type of indexer.</param>
            <param name="indexParameterList">The list of parameters.</param>
            <param name="parameterEnd">The indexer parameter end type.</param>
            <param name="getRequireList">The list of require assertions for the getter.</param>
            <param name="getEnsureList">The list of ensure assertions for the getter.</param>
            <param name="getExceptionIdentifierList">The list of known exceptions thrown for the getter.</param>
            <param name="setRequireList">The list of require assertions for the setter.</param>
            <param name="setEnsureList">The list of ensure assertions for the setter.</param>
            <param name="setExceptionIdentifierList">The list of known exceptions thrown for the setter.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.IndexerType.TypesHaveIdenticalSignature(CompilerNode.IIndexerType,CompilerNode.IIndexerType)">
            <summary>
            Compares two types.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="P:CompilerNode.IndexerType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.IndexerType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IKeywordAnchoredType">
            <summary>
            Compiler IKeywordAnchoredType.
            </summary>
        </member>
        <member name="P:CompilerNode.IKeywordAnchoredType.ResolvedCurrentTypeName">
            <summary>
            The resolved type name if the anchor is Current.
            </summary>
        </member>
        <member name="P:CompilerNode.IKeywordAnchoredType.ResolvedCurrentType">
            <summary>
            The resolved type if the anchor is Current.
            </summary>
        </member>
        <member name="P:CompilerNode.IKeywordAnchoredType.ResolvedOtherTypeName">
            <summary>
            The resolved type name if the anchor is not Current.
            </summary>
        </member>
        <member name="P:CompilerNode.IKeywordAnchoredType.ResolvedOtherType">
            <summary>
            The resolved type if the anchor is not Current.
            </summary>
        </member>
        <member name="T:CompilerNode.KeywordAnchoredType">
            <summary>
            Compiler IKeywordAnchoredType.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordAnchoredType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.KeywordAnchoredType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.KeywordAnchoredType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.ResolvedCurrentTypeName">
            <summary>
            The resolved type name if the anchor is Current.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.ResolvedCurrentType">
            <summary>
            The resolved type if the anchor is Current.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.ResolvedOtherTypeName">
            <summary>
            The resolved type name if the anchor is not Current.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.ResolvedOtherType">
            <summary>
            The resolved type if the anchor is not Current.
            </summary>
        </member>
        <member name="P:CompilerNode.KeywordAnchoredType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.KeywordAnchoredType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IObjectType">
            <summary>
            Compiler IObjectType.
            </summary>
        </member>
        <member name="P:CompilerNode.IObjectType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.IObjectType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.IObjectType.TypeToString">
            <summary>
            Gets a string representation of the type.
            </summary>
        </member>
        <member name="T:CompilerNode.ObjectType">
            <summary>
            Type hepler class.
            </summary>
        </member>
        <member name="M:CompilerNode.ObjectType.TypesHaveIdenticalSignature(EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Compares two types.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="M:CompilerNode.ObjectType.TypeConformToBase(EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType,System.Boolean)">
            <summary>
            Checks that a type conforms to a base type.
            </summary>
            <param name="derivedType">The type to check.</param>
            <param name="baseType">The base type.</param>
            <param name="isConversionAllowed">True if the method should try to find a conversion path from base to derived.</param>
        </member>
        <member name="M:CompilerNode.ObjectType.TypeConformToBase(EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType,EaslyCompiler.IErrorList,EaslyCompiler.ISource,System.Boolean)">
            <summary>
            Checks that a type conforms to a base type.
            </summary>
            <param name="derivedType">The type to check.</param>
            <param name="baseType">The base type.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="sourceLocation">The location for reporting errors.</param>
            <param name="isConversionAllowed">True if the method should try to find a conversion path from base to derived.</param>
        </member>
        <member name="M:CompilerNode.ObjectType.QueryOverloadConformToBase(CompilerNode.IQueryOverloadType,CompilerNode.IQueryOverloadType,EaslyCompiler.IErrorList,EaslyCompiler.ISource)">
            <summary>
            Checks that a query overload conforms to another.
            </summary>
            <param name="derivedType">The derived type.</param>
            <param name="baseType">The base type.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="sourceLocation">The location for reporting errors.</param>
        </member>
        <member name="M:CompilerNode.ObjectType.CommandOverloadConformToBase(CompilerNode.ICommandOverloadType,CompilerNode.ICommandOverloadType,EaslyCompiler.IErrorList,EaslyCompiler.ISource)">
            <summary>
            Checks that a command overload conforms to another.
            </summary>
            <param name="derivedType">The derived type.</param>
            <param name="baseType">The base type.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="sourceLocation">The location for reporting errors.</param>
        </member>
        <member name="M:CompilerNode.ObjectType.TypesHaveCommonDescendant(CompilerNode.IClass,EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType)">
            <summary>
            Checks if two types have a common descendant.
            </summary>
            <param name="embeddingClass">The embedding class with all registered types.</param>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="M:CompilerNode.ObjectType.GetQualifiedPathFinalType(CompilerNode.IClass,EaslyCompiler.ICompiledType,Easly.ISealableDictionary{System.String,CompilerNode.IScopeAttributeFeature},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Int32,EaslyCompiler.IErrorList,EaslyCompiler.ICompiledFeature@,CompilerNode.IDiscrete@,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@,System.Boolean@)">
            <summary>
            Gets the object a path is refering to.
            </summary>
            <param name="baseClass">The class where the path is used.</param>
            <param name="baseType">The type at the start of the path.</param>
            <param name="localScope">The local scope.</param>
            <param name="validPath">The path.</param>
            <param name="index">Index of the current identifier in the path.</param>
            <param name="errorList">The list of errors found.</param>
            <param name="finalFeature">The feature at the end of the path, if any, upon return.</param>
            <param name="finalDiscrete">The discrete at the end of the path, if any, upon return.</param>
            <param name="finalTypeName">The type name of the result.</param>
            <param name="finalType">The type of the result.</param>
            <param name="inheritBySideAttribute">Inherited from an effective body.</param>
        </member>
        <member name="M:CompilerNode.ObjectType.FillResultPath(CompilerNode.IClass,EaslyCompiler.ICompiledType,Easly.ISealableDictionary{System.String,CompilerNode.IScopeAttributeFeature},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Int32,System.Collections.Generic.IList{EaslyCompiler.IExpressionType})">
            <summary>
            Update all elements along a path with their type, previously validated.
            </summary>
            <param name="baseClass">The class where the path is used.</param>
            <param name="baseType">The type at the start of the path.</param>
            <param name="localScope">The local scope.</param>
            <param name="validPath">The path.</param>
            <param name="index">Index of the current identifier in the path.</param>
            <param name="resultPath">The path receiving updated elements.</param>
        </member>
        <member name="T:CompilerNode.IProcedureType">
            <summary>
            Compiler IProcedureType.
            </summary>
        </member>
        <member name="P:CompilerNode.IProcedureType.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ProcedureType.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IProcedureType.ResolvedBaseTypeName">
            <summary>
            Resolved type name for the base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IProcedureType.ResolvedBaseType">
            <summary>
            Resolved type for the base type.
            </summary>
        </member>
        <member name="T:CompilerNode.ProcedureType">
            <summary>
            Compiler IProcedureType.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ProcedureType"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureType.#ctor(EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,System.Collections.Generic.IList{CompilerNode.ICommandOverloadType})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.ProcedureType"/> class.
            </summary>
            <param name="baseTypeName">Name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="overloadList">The list of resolved overloads.</param>
        </member>
        <member name="P:CompilerNode.ProcedureType.OverloadList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ProcedureType.OverloadBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureType.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyOverload">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.ProcedureType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ProcedureType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ProcedureType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.ProcedureType.ResolvedBaseTypeName">
            <summary>
            Resolved type name for the base type.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.ResolvedBaseType">
            <summary>
            Resolved type for the base type.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.DiscreteTable">
            <summary>
            Discretes available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.FeatureTable">
            <summary>
            Features available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.ExportTable">
            <summary>
            Exports available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.ConformanceTable">
            <summary>
            Table of conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.InstancingRecordList">
            <summary>
            List of type instancing.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.TypeFriendlyName">
            <summary>
            Type friendly name, unique.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.IsReference">
            <summary>
            True if the type is a reference type.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.IsValue">
            <summary>
            True if the type is a value type.
            </summary>
        </member>
        <member name="P:CompilerNode.ProcedureType.OriginatingTypedef">
            <summary>
            The typedef this type comes from, if assigned.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureType.InstanciateType(EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates an instance of a class type, or reuse an existing instance.
            </summary>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The proposed type instance name.</param>
            <param name="resolvedType">The proposed type instance.</param>
        </member>
        <member name="M:CompilerNode.ProcedureType.ResolveType(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,System.Collections.Generic.IList{CompilerNode.ICommandOverloadType},EaslyCompiler.ITypeName@,CompilerNode.IProcedureType@)">
            <summary>
            Locates, or creates, a resolved procedure type.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseTypeName">Name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="overloadList">The list of resolved overloads.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.ProcedureType.TypeTableContaining(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},EaslyCompiler.ICompiledTypeWithFeature,System.Collections.Generic.IList{CompilerNode.ICommandOverloadType},EaslyCompiler.ITypeName@,CompilerNode.IProcedureType@)">
            <summary>
            Checks if a matching procedure type exists in a type table.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseType">The resolved base type.</param>
            <param name="overloadList">The list of resolved overloads.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.ProcedureType.IsCommandOverloadMatching(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},CompilerNode.ICommandOverloadType,System.Collections.Generic.IList{CompilerNode.ICommandOverloadType})">
            <summary>
            Checks if a matching procedure and overload exists in a type table.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="overload">The overload to check.</param>
            <param name="overloadList">The list of other overloads in the candidate procedure type.</param>
        </member>
        <member name="M:CompilerNode.ProcedureType.BuildType(EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,System.Collections.Generic.IList{CompilerNode.ICommandOverloadType},EaslyCompiler.ITypeName@,CompilerNode.IProcedureType@)">
            <summary>
            Creates a procedure type with resolved arguments.
            </summary>
            <param name="baseTypeName">Name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="overloadList">The list of resolved overloads.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.ProcedureType.TypesHaveIdenticalSignature(CompilerNode.IProcedureType,CompilerNode.IProcedureType)">
            <summary>
            Compares two types.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="P:CompilerNode.ProcedureType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.ProcedureType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPropertyType">
            <summary>
            Compiler IPropertyType.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyType.GetEnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyType.GetEnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyType.GetExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyType.GetExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyType.SetRequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyType.SetRequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyType.SetExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyType.SetExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyType.ResolvedBaseTypeName">
            <summary>
            The type name of the resolved base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyType.ResolvedBaseType">
            <summary>
            The type name of the resolved base type.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyType.ResolvedEntityTypeName">
            <summary>
            The type name of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.IPropertyType.ResolvedEntityType">
            <summary>
            The type of the resolved result type.
            </summary>
        </member>
        <member name="T:CompilerNode.PropertyType">
            <summary>
            Compiler IPropertyType.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.PropertyType"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyType.#ctor(EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,BaseNode.UtilityType,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.PropertyType"/> class.
            </summary>
            <param name="baseTypeName">The type name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="entityTypeName">The type name of the resolved result type.</param>
            <param name="entityType">The type of the resolved result type.</param>
            <param name="propertyKind">The type of the property.</param>
            <param name="getEnsureList">The list of ensure assertions for the getter.</param>
            <param name="getExceptionIdentifierList">The list of known exceptions thrown for the getter.</param>
            <param name="setRequireList">The list of require assertions for the setter.</param>
            <param name="setExceptionIdentifierList">The list of known exceptions thrown for the setter.</param>
        </member>
        <member name="P:CompilerNode.PropertyType.GetEnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyType.GetEnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.GetExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyType.GetExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.SetRequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyType.SetRequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.SetExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.PropertyType.SetExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyType.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyTypeArgument">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.PropertyType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PropertyType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PropertyType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PropertyType.ResolvedBaseTypeName">
            <summary>
            The type name of the resolved base type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.ResolvedBaseType">
            <summary>
            The type name of the resolved base type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.ResolvedEntityTypeName">
            <summary>
            The type name of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.ResolvedEntityType">
            <summary>
            The type of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.DiscreteTable">
            <summary>
            Discretes available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.FeatureTable">
            <summary>
            Features available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.ExportTable">
            <summary>
            Exports available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.ConformanceTable">
            <summary>
            Table of conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.InstancingRecordList">
            <summary>
            List of type instancing.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.TypeFriendlyName">
            <summary>
            Type friendly name, unique.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.IsReference">
            <summary>
            True if the type is a reference type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.IsValue">
            <summary>
            True if the type is a value type.
            </summary>
        </member>
        <member name="P:CompilerNode.PropertyType.OriginatingTypedef">
            <summary>
            The typedef this type comes from, if assigned.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyType.InstanciateType(EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates an instance of a class type, or reuse an existing instance.
            </summary>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The proposed type instance name.</param>
            <param name="resolvedType">The proposed type instance.</param>
        </member>
        <member name="M:CompilerNode.PropertyType.ResolveType(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,BaseNode.UtilityType,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Locates, or creates, a resolved property type.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseTypeName">Name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="entityTypeName">The type name of the resolved result type.</param>
            <param name="entityType">The type of the resolved result type.</param>
            <param name="propertyKind">The type of the property.</param>
            <param name="getEnsureList">The list of ensure assertions for the getter.</param>
            <param name="getExceptionIdentifierList">The list of known exceptions thrown for the getter.</param>
            <param name="setRequireList">The list of require assertions for the setter.</param>
            <param name="setExceptionIdentifierList">The list of known exceptions thrown for the setter.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.PropertyType.TypeTableContaining(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},EaslyCompiler.ICompiledType,EaslyCompiler.ICompiledType,BaseNode.UtilityType,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Checks if a matching function type exists in a type table.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="baseType">The type of the resolved base type.</param>
            <param name="entityType">The type of the resolved result type.</param>
            <param name="propertyKind">The type of the property.</param>
            <param name="getEnsureList">The list of ensure assertions for the getter.</param>
            <param name="getExceptionIdentifierList">The list of known exceptions thrown for the getter.</param>
            <param name="setRequireList">The list of require assertions for the setter.</param>
            <param name="setExceptionIdentifierList">The list of known exceptions thrown for the setter.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.PropertyType.BuildType(EaslyCompiler.ITypeName,CompilerNode.IObjectType,EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType,BaseNode.UtilityType,System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier},EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates a function type with resolved arguments.
            </summary>
            <param name="baseTypeName">The type name of the resolved base type.</param>
            <param name="baseType">The base type.</param>
            <param name="resolvedBaseType">The resolved base type.</param>
            <param name="entityTypeName">The type name of the resolved result type.</param>
            <param name="entityType">The type of the resolved result type.</param>
            <param name="propertyKind">The type of the property.</param>
            <param name="getEnsureList">The list of ensure assertions for the getter.</param>
            <param name="getExceptionIdentifierList">The list of known exceptions thrown for the getter.</param>
            <param name="setRequireList">The list of require assertions for the setter.</param>
            <param name="setExceptionIdentifierList">The list of known exceptions thrown for the setter.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.PropertyType.TypesHaveIdenticalSignature(CompilerNode.IPropertyType,CompilerNode.IPropertyType)">
            <summary>
            Compares two types.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="P:CompilerNode.PropertyType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.PropertyType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ISimpleType">
            <summary>
            Compiler ISimpleType.
            </summary>
        </member>
        <member name="P:CompilerNode.ISimpleType.TypeNameSource">
            <summary>
            Type name of the source.
            </summary>
        </member>
        <member name="P:CompilerNode.ISimpleType.TypeSource">
            <summary>
            Type of the source.
            </summary>
        </member>
        <member name="P:CompilerNode.ISimpleType.ValidTypeSource">
            <summary>
            Name of the source type.
            </summary>
        </member>
        <member name="P:CompilerNode.ISimpleType.FormalGenericNameSource">
            <summary>
            Name of the source type when a formal generic.
            </summary>
        </member>
        <member name="P:CompilerNode.ISimpleType.FormalGenericSource">
            <summary>
            Source type when a formal generic.
            </summary>
        </member>
        <member name="T:CompilerNode.SimpleType">
            <summary>
            Compiler ISimpleType.
            </summary>
        </member>
        <member name="M:CompilerNode.SimpleType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.SimpleType"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.SimpleType.#ctor(CompilerNode.IIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.SimpleType"/> class.
            </summary>
            <param name="classIdentifier">The class identifier</param>
        </member>
        <member name="P:CompilerNode.SimpleType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.SimpleType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.SimpleType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.SimpleType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.SimpleType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.TypeNameSource">
            <summary>
            Type name of the source.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.TypeSource">
            <summary>
            Type of the source.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.ValidTypeSource">
            <summary>
            Name of the source type.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.FormalGenericNameSource">
            <summary>
            Name of the source type when a formal generic.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.FormalGenericSource">
            <summary>
            Source type when a formal generic.
            </summary>
        </member>
        <member name="P:CompilerNode.SimpleType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.SimpleType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ITupleType">
            <summary>
            Compiler ITupleType.
            </summary>
        </member>
        <member name="P:CompilerNode.ITupleType.EntityDeclarationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.TupleType.EntityDeclarationBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.ITupleType.FieldTable">
            <summary>
            Table of resolved fields.
            </summary>
        </member>
        <member name="M:CompilerNode.ITupleType.CloneWithRenames(Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance})">
            <summary>
            Creates a clone of this type with renamed identifiers.
            </summary>
            <param name="renamedFieldTable">The rename table for fields.</param>
        </member>
        <member name="T:CompilerNode.TupleType">
            <summary>
            Compiler ITupleType.
            </summary>
        </member>
        <member name="M:CompilerNode.TupleType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.TupleType"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.TupleType.#ctor(System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.SharingType,Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.TupleType"/> class.
            </summary>
            <param name="entityDeclarationList">The resolved list of fields.</param>
            <param name="sharing">The type sharing.</param>
            <param name="renamedFieldTable">The list of fields to rename.</param>
        </member>
        <member name="P:CompilerNode.TupleType.EntityDeclarationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.TupleType.EntityDeclarationBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.TupleType.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyEntityDeclaration">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.TupleType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.TupleType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.TupleType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.TupleType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.TupleType.ResolvedTypeName">
            <summary>
            The resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.ResolvedType">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.DiscreteTable">
            <summary>
            Discretes available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.FeatureTable">
            <summary>
            Features available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.ExportTable">
            <summary>
            Exports available in this type.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.ConformanceTable">
            <summary>
            Table of conforming types.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.InstancingRecordList">
            <summary>
            List of type instancing.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.TypeFriendlyName">
            <summary>
            Type friendly name, unique.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.IsReference">
            <summary>
            True if the type is a reference type.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.IsValue">
            <summary>
            True if the type is a value type.
            </summary>
        </member>
        <member name="P:CompilerNode.TupleType.OriginatingTypedef">
            <summary>
            The typedef this type comes from, if assigned.
            </summary>
        </member>
        <member name="M:CompilerNode.TupleType.GetTypeTable">
            <summary>
            Gets the type table for this type.
            </summary>
        </member>
        <member name="M:CompilerNode.TupleType.InstanciateType(EaslyCompiler.ICompiledTypeWithFeature,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates an instance of a class type, or reuse an existing instance.
            </summary>
            <param name="instancingClassType">The class type to instanciate.</param>
            <param name="resolvedTypeName">The proposed type instance name.</param>
            <param name="resolvedType">The proposed type instance.</param>
        </member>
        <member name="M:CompilerNode.TupleType.ResolveType(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.SharingType,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Locates, or creates, a resolved tuple type.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="entityDeclarationList">The resolved list of fields.</param>
            <param name="sharing">The type sharing.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.TupleType.TypeTableContaining(Easly.ISealableDictionary{EaslyCompiler.ITypeName,EaslyCompiler.ICompiledType},System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.SharingType,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Checks if a matching tuple type exists in a type table.
            </summary>
            <param name="typeTable">The table of existing types.</param>
            <param name="entityDeclarationList">The resolved list of fields.</param>
            <param name="sharing">The type sharing.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="M:CompilerNode.TupleType.BuildType(System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.SharingType,EaslyCompiler.ITypeName@,EaslyCompiler.ICompiledType@)">
            <summary>
            Creates a tuple type with resolved arguments.
            </summary>
            <param name="entityDeclarationList">The resolved list of fields.</param>
            <param name="sharing">The type sharing.</param>
            <param name="resolvedTypeName">The type name upon return.</param>
            <param name="resolvedType">The type upon return.</param>
        </member>
        <member name="P:CompilerNode.TupleType.FieldTable">
            <summary>
            Table of resolved fields.
            </summary>
        </member>
        <member name="M:CompilerNode.TupleType.TypesHaveIdenticalSignature(CompilerNode.ITupleType,CompilerNode.ITupleType)">
            <summary>
            Compares two types.
            </summary>
            <param name="type1">The first type.</param>
            <param name="type2">The second type.</param>
        </member>
        <member name="M:CompilerNode.TupleType.CloneWithRenames(Easly.ISealableDictionary{EaslyCompiler.IFeatureName,EaslyCompiler.IFeatureInstance})">
            <summary>
            Creates a clone of this type with renamed identifiers.
            </summary>
            <param name="renamedFieldTable">The rename table for fields.</param>
        </member>
        <member name="P:CompilerNode.TupleType.TypeToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
        </member>
        <member name="M:CompilerNode.TupleType.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IOverload">
            <summary>
            A command or query overload.
            </summary>
        </member>
        <member name="T:CompilerNode.IPattern">
            <summary>
            Compiler IPattern.
            </summary>
        </member>
        <member name="T:CompilerNode.Pattern">
            <summary>
            Compiler IPattern.
            </summary>
        </member>
        <member name="P:CompilerNode.Pattern.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Pattern.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Pattern.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Pattern.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Pattern.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Pattern.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Pattern.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Pattern.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Pattern.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="T:CompilerNode.IQualifiedName">
            <summary>
            Compiler IQualifiedName.
            </summary>
        </member>
        <member name="P:CompilerNode.IQualifiedName.ValidPath">
            <summary>
            The valid value of <see cref="P:BaseNode.IQualifiedName.Path"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQualifiedName.ValidResultTypePath">
            <summary>
            Result types of features along the path.
            </summary>
        </member>
        <member name="P:CompilerNode.IQualifiedName.PathToString">
            <summary>
            Raw path as string.
            </summary>
        </member>
        <member name="T:CompilerNode.QualifiedName">
            <summary>
            Compiler IQualifiedName.
            </summary>
        </member>
        <member name="M:CompilerNode.QualifiedName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.QualifiedName"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.QualifiedName.#ctor(BaseNode.IQualifiedName,EaslyCompiler.IExpressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.QualifiedName"/> class.
            </summary>
            <param name="source">The pre-constructed source.</param>
            <param name="sourceType">The qualified name resolved type.</param>
        </member>
        <member name="P:CompilerNode.QualifiedName.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.QualifiedName.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QualifiedName.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QualifiedName.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QualifiedName.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QualifiedName.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.QualifiedName.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.QualifiedName.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.QualifiedName.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.QualifiedName.ValidPath">
            <summary>
            The valid value of <see cref="P:BaseNode.IQualifiedName.Path"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.QualifiedName.ValidResultTypePath">
            <summary>
            Result types of features along the path.
            </summary>
        </member>
        <member name="M:CompilerNode.QualifiedName.IsQualifiedNameEqual(CompilerNode.IQualifiedName,CompilerNode.IQualifiedName)">
            <summary>
            Compares two qualified names.
            </summary>
            <param name="qualifiedName1">The first qualified name.</param>
            <param name="qualifiedName2">The second qualified name.</param>
        </member>
        <member name="P:CompilerNode.QualifiedName.PathToString">
            <summary>
            Raw path as string.
            </summary>
        </member>
        <member name="M:CompilerNode.QualifiedName.QualifiedNameListToString(System.Collections.IEnumerable)">
            <summary>
            Gets a string representation of a list of qualified names.
            </summary>
            <param name="qualifiedNameList">The list of qualified names.</param>
        </member>
        <member name="M:CompilerNode.QualifiedName.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IQueryOverload">
            <summary>
            Compiler IQueryOverload.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverload.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.ResultList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverload.ResultBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.ModifiedQueryList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverload.ModifiedQueryBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.IsDeferredOverload">
            <summary>
            Indicates if the overload is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.HasExternBody">
            <summary>
            True if the overload contains an extern body.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.HasPrecursorBody">
            <summary>
            True if the overload contains a precursor body.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.ParameterTable">
            <summary>
            List of resolved parameters.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.ResultTable">
            <summary>
            List of resolved parameters.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.ConformantResultTable">
            <summary>
            List of resolved conformant parameter types.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.ResolvedAssociatedType">
            <summary>
            The resolved associated type.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.CompleteConformantResultTable">
            <summary>
            List of resolved conformant parameter types, both this overload and the associated type.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.ResolvedBody">
            <summary>
            The resolved body.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.NumberArgumentTable">
            <summary>
            The know arguments to the overload for each number parameter.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverload.NumberKind">
            <summary>
            The number kind if the overload result type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.IQueryOverload.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IQueryOverload.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IQueryOverload.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.QueryOverload">
            <summary>
            Compiler IQueryOverload.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverload.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ResultList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverload.ResultBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ModifiedQueryList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverload.ModifiedQueryBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverload.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyEntityDeclaration">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.QueryOverload.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverload.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.QueryOverload.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.QueryOverload.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.QueryOverload.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.IsDeferredOverload">
            <summary>
            Indicates if the overload is deferred in another class.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.HasExternBody">
            <summary>
            True if the overload contains an extern body.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.HasPrecursorBody">
            <summary>
            True if the overload contains a precursor body.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ParameterTable">
            <summary>
            List of resolved parameters.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ResultTable">
            <summary>
            List of resolved parameters.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ConformantResultTable">
            <summary>
            List of resolved conformant parameter types.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ResolvedAssociatedType">
            <summary>
            The resolved associated type.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.CompleteConformantResultTable">
            <summary>
            List of resolved conformant parameter types, both this overload and the associated type.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ResolvedResultTypeName">
            <summary>
            The name of the resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ResolvedResultType">
            <summary>
            The resolved result type.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.ResolvedBody">
            <summary>
            The resolved body.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.NumberArgumentTable">
            <summary>
            The know arguments to the overload for each number parameter.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.NumberKind">
            <summary>
            The number kind if the constant type is a number.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverload.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverload.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.QueryOverload.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="M:CompilerNode.QueryOverload.UpdateParameterKind(System.Collections.Generic.IList{EaslyCompiler.NumberKinds},EaslyCompiler.NumberKinds@)">
            <summary>
            Gets the best guess for the kind of a number parameter.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverload.QueryOverloadToString">
            <summary>
            Gets a string representation of the overload.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverload.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IQueryOverloadType">
            <summary>
            Compiler IQueryOverloadType.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.ResultList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.ResultBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.TypeName">
            <summary>
            Type name associated to this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.ParameterTable">
            <summary>
            Table of parameters for this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.ResultTable">
            <summary>
            Table of results for this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.ConformantResultTable">
            <summary>
            Table of conformant results for this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.IQueryOverloadType.ResultTypeList">
            <summary>
            List of result types for each results.
            </summary>
        </member>
        <member name="T:CompilerNode.QueryOverloadType">
            <summary>
            Compiler IQueryOverloadType.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverloadType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.QueryOverloadType"/> class.
            This constructor is required for deserialization.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverloadType.#ctor(System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},BaseNode.ParameterEndStatus,System.Collections.Generic.IList{CompilerNode.IEntityDeclaration},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IAssertion},System.Collections.Generic.IList{CompilerNode.IIdentifier})">
            <summary>
            Initializes a new instance of the <see cref="T:CompilerNode.QueryOverloadType"/> class.
            </summary>
            <param name="parameterList">The list of parameters.</param>
            <param name="parameterEnd">The closed or open status.</param>
            <param name="resultList">The list of results.</param>
            <param name="requireList">The list of require assertions.</param>
            <param name="ensureList">The list of ensure assertions.</param>
            <param name="exceptionIdentifierList">The list of exceptions this overload can throw.</param>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.ParameterList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.ParameterBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.ResultList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.ResultBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.RequireList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.RequireBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.EnsureList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.EnsureBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.ExceptionIdentifierList">
            <summary>
            Replicated list from <see cref="P:BaseNode.QueryOverloadType.ExceptionIdentifierBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverloadType.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyEntityDeclaration">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverloadType.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.QueryOverloadType.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.QueryOverloadType.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.TypeName">
            <summary>
            Type name associated to this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.ParameterTable">
            <summary>
            Table of parameters for this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.ResultTable">
            <summary>
            Table of results for this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.ConformantResultTable">
            <summary>
            Table of conformant results for this overload.
            </summary>
        </member>
        <member name="P:CompilerNode.QueryOverloadType.ResultTypeList">
            <summary>
            List of result types for each results.
            </summary>
        </member>
        <member name="M:CompilerNode.QueryOverloadType.InstanciateQueryOverloadType(EaslyCompiler.ICompiledTypeWithFeature,CompilerNode.IQueryOverloadType@)">
            <summary>
            Finds or creates an overload type with the corresponding parameters.
            </summary>
            <param name="instancingClassType">The type attempting to find the overload type.</param>
            <param name="instancedOverload">The new overload type upon return if not found.</param>
        </member>
        <member name="M:CompilerNode.QueryOverloadType.QueryOverloadsHaveIdenticalSignature(CompilerNode.IQueryOverloadType,CompilerNode.IQueryOverloadType)">
            <summary>
            Compares two overloads.
            </summary>
            <param name="overload1">The first overload.</param>
            <param name="overload2">The second overload.</param>
        </member>
        <member name="T:CompilerNode.IRange">
            <summary>
            Compiler IRange
            </summary>
        </member>
        <member name="P:CompilerNode.IRange.ResolvedRange">
            <summary>
            The resolved range as a constant.
            </summary>
        </member>
        <member name="P:CompilerNode.IRange.ResolvedException">
            <summary>
            List of exceptions the range can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.IRange.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IRange.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IRange.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Range">
            <summary>
            Compiler IRange
            </summary>
        </member>
        <member name="P:CompilerNode.Range.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Range.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Range.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Range.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Range.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Range.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Range.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Range.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Range.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Range.ResolvedRange">
            <summary>
            The resolved range as a constant.
            </summary>
        </member>
        <member name="P:CompilerNode.Range.ResolvedException">
            <summary>
            List of exceptions the range can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.Range.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.Range.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.Range.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IRename">
            <summary>
            Compiler IRename.
            </summary>
        </member>
        <member name="P:CompilerNode.IRename.ValidSourceText">
            <summary>
            The valid value of <see cref="P:BaseNode.IRename.SourceIdentifier"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IRename.ValidDestinationText">
            <summary>
            The valid value of <see cref="P:BaseNode.IRename.DestinationIdentifier"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.IRename.CheckGenericRename``1(Easly.IDictionaryIndex{``0}[],Easly.ISealableDictionary{System.String,System.String},Easly.ISealableDictionary{System.String,System.String},System.Func{``0,System.String},System.Func{System.String,``0},EaslyCompiler.IErrorList)">
            <summary>
            Checks and validates a rename clause.
            </summary>
            <typeparam name="TKey">The object type on which rename operates.</typeparam>
            <param name="renamedItemTables">Competing collections of renames this instance belongs to.</param>
            <param name="sourceIdentifierTable">Table of source to destination associations already resolved.</param>
            <param name="destinationIdentifierTable">Table of destination to source associations already resolved.</param>
            <param name="key2String">Provides the string from the key.</param>
            <param name="string2Key">Creates a key from a string.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if the rename is valid.</returns>
        </member>
        <member name="T:CompilerNode.Rename">
            <summary>
            Compiler IRename.
            </summary>
        </member>
        <member name="P:CompilerNode.Rename.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Rename.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Rename.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Rename.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Rename.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Rename.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Rename.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Rename.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Rename.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Rename.ValidSourceText">
            <summary>
            The valid value of <see cref="P:BaseNode.IRename.SourceIdentifier"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Rename.ValidDestinationText">
            <summary>
            The valid value of <see cref="P:BaseNode.IRename.DestinationIdentifier"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Rename.CheckGenericRename``1(Easly.IDictionaryIndex{``0}[],Easly.ISealableDictionary{System.String,System.String},Easly.ISealableDictionary{System.String,System.String},System.Func{``0,System.String},System.Func{System.String,``0},EaslyCompiler.IErrorList)">
            <summary>
            Checks and validates a rename clause.
            </summary>
            <typeparam name="TKey">The object type on which rename operates.</typeparam>
            <param name="renamedItemTables">Competing collections of renames this instance belongs to.</param>
            <param name="sourceIdentifierTable">Table of source to destination associations already resolved.</param>
            <param name="destinationIdentifierTable">Table of destination to source associations already resolved.</param>
            <param name="key2String">Provides the string from the key.</param>
            <param name="string2Key">Creates a key from a string.</param>
            <param name="errorList">List of errors found.</param>
            <returns>True if the rename is valid.</returns>
        </member>
        <member name="T:CompilerNode.IClassReplicate">
            <summary>
            Compiler IClassReplicate.
            </summary>
        </member>
        <member name="T:CompilerNode.ClassReplicate">
            <summary>
            Compiler IClassReplicate.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassReplicate.PatternList">
            <summary>
            Replicated list from <see cref="P:BaseNode.ClassReplicate.PatternBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassReplicate.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyEntityDeclaration">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.ClassReplicate.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassReplicate.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassReplicate.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassReplicate.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassReplicate.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.ClassReplicate.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.ClassReplicate.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.ClassReplicate.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.ClassReplicate.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="T:CompilerNode.IGlobalReplicate">
            <summary>
            Compiler IGlobalReplicate.
            </summary>
        </member>
        <member name="T:CompilerNode.GlobalReplicate">
            <summary>
            Compiler IGlobalReplicate.
            </summary>
        </member>
        <member name="P:CompilerNode.GlobalReplicate.PatternList">
            <summary>
            Processed list of patterns.
            </summary>
        </member>
        <member name="T:CompilerNode.IRoot">
            <summary>
            Compiler IRoot.
            </summary>
        </member>
        <member name="P:CompilerNode.IRoot.ClassList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Root.ClassBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IRoot.LibraryList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Root.LibraryBlocks"/>.
            </summary>
        </member>
        <member name="T:CompilerNode.Root">
            <summary>
            Compiler IRoot.
            </summary>
        </member>
        <member name="P:CompilerNode.Root.ClassList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Root.ClassBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Root.LibraryList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Root.LibraryBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Root.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyName">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="T:CompilerNode.IScope">
            <summary>
            Compiler IScope.
            </summary>
        </member>
        <member name="P:CompilerNode.IScope.EntityDeclarationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Scope.EntityDeclarationBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IScope.InstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Scope.InstructionBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IScope.ResolvedResult">
            <summary>
            Types of results of the scope.
            </summary>
        </member>
        <member name="P:CompilerNode.IScope.ResolvedException">
            <summary>
            List of exceptions the scope can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.IScope.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IScope.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IScope.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.Scope">
            <summary>
            Compiler IScope.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.EntityDeclarationList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Scope.EntityDeclarationBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.InstructionList">
            <summary>
            Replicated list from <see cref="P:BaseNode.Scope.InstructionBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.Scope.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyEntityDeclaration">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.Scope.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Scope.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Scope.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Scope.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Scope.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.ResolvedResult">
            <summary>
            Types of results of the scope.
            </summary>
        </member>
        <member name="P:CompilerNode.Scope.ResolvedException">
            <summary>
            List of exceptions the scope can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.Scope.IsScopeHolder(EaslyCompiler.ISource)">
            <summary>
            Checks if a source is a valid scope holder.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:CompilerNode.Scope.CurrentScope(EaslyCompiler.ISource)">
            <summary>
            Gets the scope associated to a node.
            </summary>
            <param name="source">The node with a scope</param>
        </member>
        <member name="M:CompilerNode.Scope.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.Scope.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.Scope.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.IAssignmentTypeArgument">
            <summary>
            Compiler IAssignmentTypeArgument.
            </summary>
        </member>
        <member name="T:CompilerNode.AssignmentTypeArgument">
            <summary>
            Compiler IAssignmentTypeArgument.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentTypeArgument.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.AssignmentTypeArgument.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.AssignmentTypeArgument.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.ResolvedSourceTypeName">
            <summary>
            Name of the resolved source type.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.ResolvedSourceType">
            <summary>
            The resolved source type.
            </summary>
        </member>
        <member name="P:CompilerNode.AssignmentTypeArgument.TypeArgumentToString">
            <summary>
            Gets a string representation of the type argument.
            </summary>
        </member>
        <member name="M:CompilerNode.AssignmentTypeArgument.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.IPositionalTypeArgument">
            <summary>
            Compiler IPositionalTypeArgument.
            </summary>
        </member>
        <member name="T:CompilerNode.PositionalTypeArgument">
            <summary>
            Compiler IPositionalTypeArgument.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.PositionalTypeArgument.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.PositionalTypeArgument.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.PositionalTypeArgument.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.ResolvedSourceTypeName">
            <summary>
            Name of the resolved source type.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.ResolvedSourceType">
            <summary>
            The resolved source type.
            </summary>
        </member>
        <member name="P:CompilerNode.PositionalTypeArgument.TypeArgumentToString">
            <summary>
            Gets a string representation of the type argument.
            </summary>
        </member>
        <member name="M:CompilerNode.PositionalTypeArgument.ToString">
            <summary></summary>
        </member>
        <member name="T:CompilerNode.ITypeArgument">
            <summary>
            Compiler ITypeArgument.
            </summary>
        </member>
        <member name="P:CompilerNode.ITypeArgument.ResolvedSourceTypeName">
            <summary>
            Name of the resolved source type.
            </summary>
        </member>
        <member name="P:CompilerNode.ITypeArgument.ResolvedSourceType">
            <summary>
            The resolved source type.
            </summary>
        </member>
        <member name="P:CompilerNode.ITypeArgument.TypeArgumentToString">
            <summary>
            Gets a string representation of the type argument.
            </summary>
        </member>
        <member name="T:CompilerNode.TypeArgument">
            <summary>
            Type Argument helper class.
            </summary>
        </member>
        <member name="M:CompilerNode.TypeArgument.TypeArgumentListToString(System.Collections.IEnumerable)">
            <summary>
            Gets a string representation of a list of type arguments.
            </summary>
            <param name="argumentList">The list of type arguments.</param>
        </member>
        <member name="T:CompilerNode.ITypedef">
            <summary>
            Compiler ITypedef.
            </summary>
        </member>
        <member name="P:CompilerNode.ITypedef.ValidTypedefName">
            <summary>
            The valid typedef name.
            </summary>
        </member>
        <member name="P:CompilerNode.ITypedef.ResolvedDefinedTypeName">
            <summary>
            Resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.ITypedef.ResolvedDefinedType">
            <summary>
            Resolved type.
            </summary>
        </member>
        <member name="T:CompilerNode.Typedef">
            <summary>
            Compiler ITypedef.
            </summary>
        </member>
        <member name="P:CompilerNode.Typedef.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.Typedef.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Typedef.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Typedef.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Typedef.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.Typedef.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.Typedef.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.Typedef.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.Typedef.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.Typedef.ValidTypedefName">
            <summary>
            The valid typedef name.
            </summary>
        </member>
        <member name="P:CompilerNode.Typedef.ResolvedDefinedTypeName">
            <summary>
            Resolved type name.
            </summary>
        </member>
        <member name="P:CompilerNode.Typedef.ResolvedDefinedType">
            <summary>
            Resolved type.
            </summary>
        </member>
        <member name="T:CompilerNode.IWith">
            <summary>
            Compiler IWith.
            </summary>
        </member>
        <member name="P:CompilerNode.IWith.RangeList">
            <summary>
            Replicated list from <see cref="P:BaseNode.With.RangeBlocks"/>.
            </summary>
        </member>
        <member name="P:CompilerNode.IWith.ResolvedResult">
            <summary>
            Types of results of the with clause.
            </summary>
        </member>
        <member name="P:CompilerNode.IWith.ResolvedException">
            <summary>
            List of exceptions the with clause can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.IWith.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.IWith.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.IWith.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
        <member name="T:CompilerNode.With">
            <summary>
            Compiler IWith.
            </summary>
        </member>
        <member name="P:CompilerNode.With.RangeList">
            <summary>
            Replicated list from <see cref="P:BaseNode.With.RangeBlocks"/>.
            </summary>
        </member>
        <member name="M:CompilerNode.With.FillReplicatedList(System.String,System.Collections.Generic.List{BaseNode.INode})">
            <summary>
            Fills lists with the result of replication.
            </summary>
            <param name="propertyEntityDeclaration">The property name of the block.</param>
            <param name="nodeList">The node list.</param>
        </member>
        <member name="P:CompilerNode.With.ParentSource">
            <summary>
            The parent node, null if root.
            </summary>
        </member>
        <member name="P:CompilerNode.With.EmbeddingClass">
            <summary>
            The parent class, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.With.EmbeddingFeature">
            <summary>
            The parent feature, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.With.EmbeddingOverload">
            <summary>
            The parent overload, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.With.EmbeddingBody">
            <summary>
            The parent body, null if none.
            </summary>
        </member>
        <member name="P:CompilerNode.With.EmbeddingAssertion">
            <summary>
            The parent assertion, null if none.
            </summary>
        </member>
        <member name="M:CompilerNode.With.InitializeSource(EaslyCompiler.ISource)">
            <summary>
            Initializes parents based on the provided <paramref name="parentSource"/> node.
            </summary>
            <param name="parentSource">The parent node.</param>
        </member>
        <member name="M:CompilerNode.With.Reset(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Reset some intermediate results.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to reset.</param>
        </member>
        <member name="M:CompilerNode.With.IsResolved(EaslyCompiler.IRuleTemplateList)">
            <summary>
            Checks if a rule is resolved for this source.
            </summary>
            <param name="ruleTemplateList">The list of rule templates that would read the properties to check.</param>
        </member>
        <member name="P:CompilerNode.With.LocalScope">
            <summary>
            Entities local to a scope.
            </summary>
        </member>
        <member name="P:CompilerNode.With.AdditionalScope">
            <summary>
            Additional entities such as loop indexer.
            </summary>
        </member>
        <member name="P:CompilerNode.With.InnerScopes">
            <summary>
            List of scopes containing the current instance.
            </summary>
        </member>
        <member name="P:CompilerNode.With.FullScope">
            <summary>
            All reachable entities.
            </summary>
        </member>
        <member name="P:CompilerNode.With.ResolvedResult">
            <summary>
            Types of results of the with clause.
            </summary>
        </member>
        <member name="P:CompilerNode.With.ResolvedException">
            <summary>
            List of exceptions the with clause can throw.
            </summary>
        </member>
        <member name="M:CompilerNode.With.RestartNumberType(System.Boolean@)">
            <summary>
            Restarts a check of number types.
            </summary>
        </member>
        <member name="M:CompilerNode.With.CheckNumberType(System.Boolean@)">
            <summary>
            Check number types.
            </summary>
            <param name="isChanged">True upon return if a number type was changed.</param>
        </member>
        <member name="M:CompilerNode.With.ValidateNumberType(EaslyCompiler.IErrorList)">
            <summary>
            Validates number types. If not valid, adds an error.
            </summary>
            <param name="errorList">The list of errors found.</param>
        </member>
    </members>
</doc>

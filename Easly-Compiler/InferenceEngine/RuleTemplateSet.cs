namespace EaslyCompiler
{
    using System.Collections.Generic;
    using CompilerNode;

    /// <summary>
    /// Set of <see cref="IRuleTemplate"/>.
    /// </summary>
    public static class RuleTemplateSet
    {
        /// <summary>
        /// Rules for the identifiers inference pass.
        /// </summary>
        public static RuleTemplateList Identifiers { get; } = new RuleTemplateList()
        {
            // Create many derivations of IdentifierRuleTemplate to have separate static constructors, to ensure separate namespaces.
            new ExportChangeRuleTemplate(),
            new IdentifierRuleTemplate<IIdentifier>(),
            new IdentifierRuleTemplate<IClassIdentifier>(),
            new IdentifierRuleTemplate<IClassOrExportIdentifier>(),
            new IdentifierRuleTemplate<IClassOrFeatureIdentifier>(),
            new IdentifierRuleTemplate<IExportIdentifier>(),
            new IdentifierRuleTemplate<IFeatureIdentifier>(),
            new IdentifierRuleTemplate<ILibraryIdentifier>(),
            new IdentifierRuleTemplate<IReplicateIdentifier>(),
            new IdentifierRuleTemplate<ISourceIdentifier>(),
            new IdentifierRuleTemplate<ITypeIdentifier>(),
            new ManifestCharacterTextRuleTemplate(),
            new ManifestNumberTextRuleTemplate(),
            new ManifestStringTextRuleTemplate(),
            new NameRuleTemplate(),
            new QualifiedNameRuleTemplate(),
            new RenameRuleTemplate(),
        };

        /// <summary>
        /// Rules for the types inference pass.
        /// </summary>
        public static IRuleTemplateList Types { get; } = new RuleTemplateList()
        {
            // No dependency rules.
            new AllInheritancesClassGroupRuleTemplate(),
            new AllInheritancesGroupRuleTemplate(),
            new AllGenericsRuleTemplate(),
            new AllImportedClassRuleTemplate(),
            new AllInheritancesInstancedRuleTemplate(),
            new AllInheritancesRuleTemplate(),
            new AllLocalDiscretesRuleTemplate(),
            new AllDiscretesRuleTemplate(),
            new AllLocalExportsRuleTemplate(),
            new AllExportsRuleTemplate(),
            new AllLocalFeaturesRuleTemplate(),
            new AllFeaturesRuleTemplate(),
            new AllLocalTypedefsRuleTemplate(),
            new AllTypedefsRuleTemplate(),
            new AssertionTagExpressionBodyRuleTemplate(),
            new AssignmentInstructionRuleTemplate(),
            new CheckInstructionRuleTemplate(),
            new CommandInstructionRuleTemplate(),
            new CommandOverloadRuleTemplate(),
            new ConstraintRenameRuleTemplate(),
            new CommandOverloadTypeRuleTemplate(),
            new CreateInstructionRuleTemplate(),
            new EffectiveBodyRuleTemplate<IEffectiveBody>(),
            new EffectiveBodyRuleTemplate<IGetterEffectiveBody>(),
            new EffectiveBodyRuleTemplate<IOverloadEffectiveBody>(),
            new EffectiveBodyRuleTemplate<ISetterEffectiveBody>(),
            new ExportRuleTemplate(),
            new FeatureRuleTemplate<IAttributeFeature>(),
            new FeatureRuleTemplate<IConstantFeature>(),
            new FeatureRuleTemplate<ICreationFeature>(),
            new FeatureRuleTemplate<IFunctionFeature>(),
            new FeatureRuleTemplate<IProcedureFeature>(),
            new FeatureRuleTemplate<IPropertyFeature>(),
            new ForLoopInstructionRuleTemplate(),
            new GenericDefaultTypeRuleTemplate(),
            new GenericRuleTemplate(),
            new GenericConstraintsRuleTemplate(),
            new IndexAssignmentInstructionRuleTemplate(),
            new IndexerRuleTemplate(),
            new InheritanceClassGroupRuleTemplate(),
            new KeywordAssignmentInstructionRuleTemplate(),
            new LocalNamespaceRuleTemplate(),
            new NamespaceRuleTemplate(),
            new PrecursorIndexAssignmentInstructionRuleTemplate(),
            new PrecursorInstructionRuleTemplate(),
            new ProcedureFeatureRuleTemplate(),
            new RaiseEventInstructionRuleTemplate(),
            new ReleaseInstructionRuleTemplate(),
            new ScopeRuleTemplate(),
            new SimpleTypeClassRuleTemplate(),
            new SimpleTypeSourceRuleTemplate(),
            new ThrowInstructionRuleTemplate(),
            new TypedefRuleTemplate(),
            new WithRuleTemplate(),

            // At least one dependency rules.
            new AnchoredTypeRuleTemplate(),
            new AsLongAsInstructionRuleTemplate(),
            new AssignmentTypeArgumentRuleTemplate(),
            new AttachmentInstructionRuleTemplate(),
            new AttachmentRuleTemplate(),
            new AttributeFeatureRuleTemplate(),
            new ConditionalRuleTemplate(),
            new ConstantFeatureRuleTemplate(),
            new ConstraintConformanceRuleTemplate(),
            new ConstraintParentTypeRuleTemplate(),
            new ConstraintRuleTemplate(),
            new ContinuationRuleTemplate(),
            new CreationFeatureRuleTemplate(),
            new DebugInstructionRuleTemplate(),
            new DiscreteRuleTemplate(),
            new EntityDeclarationRuleTemplate(),
            new FunctionFeatureRuleTemplate(),
            new FunctionFeatureResultRuleTemplate(),
            new FunctionTypeRuleTemplate(),
            new FunctionTypeResultRuleTemplate(),
            new GenericTypeArgumentsRuleTemplate(),
            new GenericTypeRuleTemplate(),
            new IfThenElseInstructionRuleTemplate(),
            new IndexerFeatureRuleTemplate(),
            new IndexerTypeRuleTemplate(),
            new InheritanceClassParentRuleTemplate(),
            new InheritanceParentTypeRuleTemplate(),
            new InheritanceRenameRuleTemplate(),
            new InspectInstructionRuleTemplate(),
            new KeywordAnchoredTypeCurrentRuleTemplate(),
            new KeywordAnchoredTypeRuleTemplate(),
            new OverLoopInstructionRuleTemplate(),
            new PositionalTypeArgumentRuleTemplate(),
            new ProcedureTypeRuleTemplate(),
            new PropertyFeatureRuleTemplate(),
            new PropertyTypeRuleTemplate(),
            new QueryOverloadResultRuleTemplate(),
            new QueryOverloadRuleTemplate(),
            new QueryOverloadConformanceRuleTemplate(),
            new QueryOverloadAssociatedTypeConformanceRuleTemplate(),
            new QueryOverloadTypeRuleTemplate(),
            new QueryOverloadTypeConformanceRuleTemplate(),
            new SimpleTypeInheritanceRuleTemplate(),
            new TupleTypeRuleTemplate(),
            new TypedefSourceRuleTemplate(),
        };

        /// <summary>
        /// Rules for the contract inference pass.
        /// </summary>
        public static IRuleTemplateList Contract { get; } = new RuleTemplateList()
        {
            new AgentExpressionRuleTemplate(),
            new AllBodiesRuleTemplate(),
            new AllEntitiesWithDefaultRuleTemplate(),
            new AllInheritanceTagsRuleTemplate(),
            new AsLongAsInstructionContractRuleTemplate(),
            new AssertionRuleTemplate(),
            new AssertionTagExpressionConstantRuleTemplate(),
            new AssertionTagExpressionRuleTemplate(),
            new AssertionTagExpressionSourceRuleTemplate(),
            new AssignmentArgumentConstantRuleTemplate(),
            new AssignmentArgumentRuleTemplate(),
            new AssignmentInstructionContractRuleTemplate(),
            new AttachmentContractRuleTemplate(),
            new AttachmentInstructionContractRuleTemplate(),
            new AttachmentInstructionInitContractRuleTemplate(),
            new BinaryConditionalExpressionConstantRuleTemplate(),
            new BinaryConditionalExpressionRuleTemplate(),
            new BinaryOperatorExpressionConstantRuleTemplate(),
            new BinaryOperatorExpressionRuleTemplate(),
            new BodyRuleTemplate<IDeferredBody>(),
            new BodyRuleTemplate<IOverloadDeferredBody>(),
            new BodyRuleTemplate<ISetterDeferredBody>(),
            new BodyRuleTemplate<IGetterDeferredBody>(),
            new BodyRuleTemplate<IEffectiveBody>(),
            new BodyRuleTemplate<IOverloadEffectiveBody>(),
            new BodyRuleTemplate<ISetterEffectiveBody>(),
            new BodyRuleTemplate<IGetterEffectiveBody>(),
            new BodyRuleTemplate<IExternBody>(),
            new BodyRuleTemplate<IOverloadExternBody>(),
            new BodyRuleTemplate<ISetterExternBody>(),
            new BodyRuleTemplate<IGetterExternBody>(),
            new BodyRuleTemplate<IPrecursorBody>(),
            new BodyRuleTemplate<IOverloadPrecursorBody>(),
            new BodyRuleTemplate<ISetterPrecursorBody>(),
            new BodyRuleTemplate<IGetterPrecursorBody>(),
            new CheckInstructionContractRuleTemplate(),
            new ClassConstantExpressionConstantRuleTemplate(),
            new ClassConstantExpressionRuleTemplate(),
            new CloneOfExpressionRuleTemplate(),
            new CommandInstructionContractRuleTemplate(),
            new CommandOverloadContractRuleTemplate(),
            new ConditionalContractRuleTemplate(),
            new ContinuationContractRuleTemplate(),
            new CreateInstructionContractRuleTemplate(),
            new DebugInstructionContractRuleTemplate(),
            new DeferredBodyRuleContractTemplate<IDeferredBody>(),
            new DeferredBodyRuleContractTemplate<IOverloadDeferredBody>(),
            new DeferredBodyRuleContractTemplate<IGetterDeferredBody>(),
            new DeferredBodyRuleContractTemplate<ISetterDeferredBody>(),
            new EffectiveBodyRuleContractTemplate<IEffectiveBody>(),
            new EffectiveBodyRuleContractTemplate<IOverloadEffectiveBody>(),
            new EffectiveBodyRuleContractTemplate<IGetterEffectiveBody>(),
            new EffectiveBodyRuleContractTemplate<ISetterEffectiveBody>(),
            new EntityExpressionRuleTemplate(),
            new EqualityExpressionConstantRuleTemplate(),
            new EqualityExpressionRuleTemplate(),
            new ExternBodyRuleContractTemplate<IExternBody>(),
            new ExternBodyRuleContractTemplate<IOverloadExternBody>(),
            new ExternBodyRuleContractTemplate<IGetterExternBody>(),
            new ExternBodyRuleContractTemplate<ISetterExternBody>(),
            new ForLoopInstructionContractRuleTemplate(),
            new IfThenElseInstructionContractRuleTemplate(),
            new IndexAssignmentInstructionContractRuleTemplate(),
            new IndexQueryExpressionRuleTemplate(),
            new InheritanceTagRuleTemplate(),
            new InitializedObjectExpressionConstantRuleTemplate(),
            new InitializedObjectExpressionRuleTemplate(),
            new InspectInstructionContractRuleTemplate(),
            new KeywordAssignmentInstructionContractRuleTemplate(),
            new KeywordExpressionRuleTemplate(),
            new ManifestCharacterExpressionRuleTemplate(),
            new ManifestNumberExpressionRuleTemplate(),
            new ManifestStringExpressionRuleTemplate(),
            new NewExpressionRuleTemplate(),
            new OldExpressionRuleTemplate(),
            new OverLoopInstructionContractRuleTemplate(),
            new OverLoopInstructionInitContractRuleTemplate(),
            new PositionalArgumentConstantRuleTemplate(),
            new PositionalArgumentRuleTemplate(),
            new PrecursorBodyContractRuleTemplate<IPrecursorBody>(),
            new PrecursorBodyContractRuleTemplate<IOverloadPrecursorBody>(),
            new PrecursorBodyContractRuleTemplate<IGetterPrecursorBody>(),
            new PrecursorBodyContractRuleTemplate<ISetterPrecursorBody>(),
            new PrecursorExpressionConstantRuleTemplate(),
            new PrecursorExpressionRuleTemplate(),
            new PrecursorIndexAssignmentInstructionContractRuleTemplate(),
            new PrecursorIndexExpressionRuleTemplate(),
            new PrecursorInstructionContractRuleTemplate(),
            new QualifiedNameContractRuleTemplate(),
            new QueryExpressionConstantRuleTemplate(),
            new QueryExpressionRuleTemplate(),
            new QueryOverloadContractRuleTemplate(),
            new RaiseEventInstructionContractRuleTemplate(),
            new RangeContractRuleTemplate(),
            new ReleaseInstructionContractRuleTemplate(),
            new ResultOfExpressionConstantRuleTemplate(),
            new ResultOfExpressionRuleTemplate(),
            new ScopeContractRuleTemplate(),
            new ThrowInstructionContractRuleTemplate(),
            new UnaryNotExpressionConstantRuleTemplate(),
            new UnaryNotExpressionRuleTemplate(),
            new UnaryOperatorExpressionConstantRuleTemplate(),
            new UnaryOperatorExpressionRuleTemplate(),
            new WithContractRuleTemplate(),
        };

        /// <summary>
        /// Rules for the body inference pass.
        /// </summary>
        public static IRuleTemplateList Body { get; } = new RuleTemplateList()
        {
            new AgentExpressionComputationRuleTemplate(),
            new AllBodiesComputationRuleTemplate(),
            new AsLongAsInstructionComputationRuleTemplate(),
            new AssertionComputationRuleTemplate(),
            new AssertionTagExpressionComputationRuleTemplate(),
            new AssignmentArgumentComputationRuleTemplate(),
            new AssignmentInstructionComputationRuleTemplate(),
            new AttachmentComputationRuleTemplate(),
            new AttachmentInstructionComputationRuleTemplate(),
            new BinaryConditionalExpressionComputationRuleTemplate(),
            new BinaryOperatorExpressionComputationRuleTemplate(),
            new CheckInstructionComputationRuleTemplate(),
            new ClassConstantExpressionComputationRuleTemplate(),
            new CloneOfExpressionComputationRuleTemplate(),
            new CommandInstructionComputationRuleTemplate(),
            new ConditionalComputationRuleTemplate(),
            new ContinuationComputationRuleTemplate(),
            new CreateInstructionComputationRuleTemplate(),
            new DebugInstructionComputationRuleTemplate(),
            new DeferredBodyComputationRuleTemplate<IDeferredBody>(),
            new DeferredBodyComputationRuleTemplate<IOverloadDeferredBody>(),
            new DeferredBodyComputationRuleTemplate<IGetterDeferredBody>(),
            new DeferredBodyComputationRuleTemplate<ISetterDeferredBody>(),
            new EffectiveBodyComputationRuleTemplate<IEffectiveBody>(),
            new EffectiveBodyComputationRuleTemplate<IOverloadEffectiveBody>(),
            new EffectiveBodyComputationRuleTemplate<IGetterEffectiveBody>(),
            new EffectiveBodyComputationRuleTemplate<ISetterEffectiveBody>(),
            new EntityExpressionComputationRuleTemplate(),
            new EqualityExpressionComputationRuleTemplate(),
            new ExternBodyComputationRuleTemplate<IExternBody>(),
            new ExternBodyComputationRuleTemplate<IOverloadExternBody>(),
            new ExternBodyComputationRuleTemplate<IGetterExternBody>(),
            new ExternBodyComputationRuleTemplate<ISetterExternBody>(),
            new ForLoopInstructionComputationRuleTemplate(),
            new IfThenElseInstructionComputationRuleTemplate(),
            new IndexAssignmentInstructionComputationRuleTemplate(),
            new IndexQueryExpressionComputationRuleTemplate(),
            new InitializedObjectExpressionComputationRuleTemplate(),
            new InspectInstructionComputationRuleTemplate(),
            new KeywordAssignmentInstructionComputationRuleTemplate(),
            new KeywordExpressionComputationRuleTemplate(),
            new ManifestCharacterExpressionComputationRuleTemplate(),
            new ManifestNumberExpressionComputationRuleTemplate(),
            new ManifestStringExpressionComputationRuleTemplate(),
            new NewExpressionComputationRuleTemplate(),
            new OldExpressionComputationRuleTemplate(),
            new OverLoopInstructionComputationRuleTemplate(),
            new PositionalArgumentComputationRuleTemplate(),
            new PrecursorBodyComputationRuleTemplate<IPrecursorBody>(),
            new PrecursorBodyComputationRuleTemplate<IOverloadPrecursorBody>(),
            new PrecursorBodyComputationRuleTemplate<IGetterPrecursorBody>(),
            new PrecursorBodyComputationRuleTemplate<ISetterPrecursorBody>(),
            new PrecursorExpressionComputationRuleTemplate(),
            new PrecursorIndexAssignmentInstructionComputationRuleTemplate(),
            new PrecursorIndexExpressionComputationRuleTemplate(),
            new PrecursorInstructionComputationRuleTemplate(),
            new QueryExpressionComputationRuleTemplate(),
            new RaiseEventInstructionComputationRuleTemplate(),
            new RangeComputationRuleTemplate(),
            new ReleaseInstructionComputationRuleTemplate(),
            new ResultOfExpressionComputationRuleTemplate(),
            new ScopeComputationRuleTemplate(),
            new ThrowInstructionComputationRuleTemplate(),
            new UnaryNotExpressionComputationRuleTemplate(),
            new UnaryOperatorExpressionComputationRuleTemplate(),
            new WithComputationRuleTemplate(),
        };
    }
}
